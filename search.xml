<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Freemarker快速入门</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<p>转学成在线项目<br>在内容管理接口工层 添加Freemarker与SpringBoot的整合包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot 对结果视图 Freemarker 集成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在nacos为内容管理接口层配置freemarker，公用配置组新加一个freemarker-config-dev.yaml<br><img src='https://s21.ax1x.com/2024/04/08/pFLTE5D.png'><br>配置信息如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span>   <span class="comment">#关闭模板缓存，方便测试</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">template_update_delay:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.ftl</span>   <span class="comment">#页面模板后缀名</span></span><br><span class="line">    <span class="attr">charset:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">template-loader-path:</span> <span class="string">classpath:/templates/</span>   <span class="comment">#页面模板位置(默认为 classpath:/templates/)</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="comment">#关闭项目中的静态资源映射(static、resources文件夹下的资源)</span></span><br></pre></td></tr></table></figure><p>在内容管理接口工程添加freemarker-config-dev.yaml<br><img src='https://s21.ax1x.com/2024/04/09/pFLTZPe.png'></p><p>添加模板，在resources下创建templates目录，添加test.ftl模板文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello $&#123;name&#125;!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写controller方法，准备模型数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.content.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.math.raw.Mod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> freemarker测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/15 19:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreemarkerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testfreemarker&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">//设置模型数据</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        <span class="comment">//设置模板名称</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;test&quot;</span>);<span class="comment">//根据视图名称加.ftl找到模板</span></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动内容管理接口工程，访问<a href="http://localhost:63040/content/testfreemarker">http://localhost:63040/content/testfreemarker</a><br>屏幕输出：Hello 小明！<br>效果如图：<br><img src='https://s21.ax1x.com/2024/04/09/pFLTnxA.png'></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Freemarker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马点评-分布式锁-redis</title>
      <link href="/posts/351a294f.html"/>
      <url>/posts/351a294f.html</url>
      
        <content type="html"><![CDATA[<h1 id="基于原理和不同实现方式对比"><a href="#基于原理和不同实现方式对比" class="headerlink" title="基于原理和不同实现方式对比"></a>基于原理和不同实现方式对比</h1><p><img src='https://pic.imgdb.cn/item/661e0af90ea9cb1403e0fb07.png'></p><p>分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。<br><img src='https://pic.imgdb.cn/item/661e0b590ea9cb1403e1b5d3.png'></p><h2 id="分布式锁的实现"><a href="#分布式锁的实现" class="headerlink" title="分布式锁的实现"></a>分布式锁的实现</h2><p>分布式锁的核心是实现多进程之间互斥，而满足这一点的方式有很多，常见的有三种：<br><img src='https://pic.imgdb.cn/item/661e0b7f0ea9cb1403e1f9be.png'></p><h1 id="Redis的分布式锁实现思路"><a href="#Redis的分布式锁实现思路" class="headerlink" title="Redis的分布式锁实现思路"></a>Redis的分布式锁实现思路</h1><p>实现分布式锁时需要实现的两个基本方法：<br>获取锁：<br>1.互斥：确保只能有一个线程获取锁<br>2.非阻塞：尝试一次，成功返回true，失败返回false<br><img src='https://pic.imgdb.cn/item/661e0e2a0ea9cb1403e6ff46.png'></p><p>释放锁：<br>1.手动释放<br>2.超时释放:获取锁时添加一个超时时间(避免服务器宕机或者业务超时)<br><img src='https://pic.imgdb.cn/item/661e0e330ea9cb1403e70e35.png'></p><p><img src='https://pic.imgdb.cn/item/661e0e4d0ea9cb1403e73a0d.png'></p><h1 id="实现Redis分布式锁版本1"><a href="#实现Redis分布式锁版本1" class="headerlink" title="实现Redis分布式锁版本1"></a>实现Redis分布式锁版本1</h1><p>可以借鉴于解决缓存击穿时候用到的互斥锁方法，基本上是差不多的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeoutSec 锁持有的超时时间，过期后自动释放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代表获取成功，false代表获取锁失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX=<span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">                .setIfAbsent(KEY_PREFIX + name, threadId + <span class="string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success); <span class="comment">//自动拆箱，避免空指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改优惠卷秒杀的锁。将其设置为setnx。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">       <span class="comment">//1.查询优惠卷</span></span><br><span class="line">       <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">       <span class="comment">//2.判断秒杀是否开始</span></span><br><span class="line">       <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">           <span class="comment">//尚未开始</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//3.判断秒杀是否已经结束</span></span><br><span class="line">       <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">           <span class="comment">//已经结束</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//4.判断库存是否充足</span></span><br><span class="line">       <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">//库存不足</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">       <span class="comment">//创建锁对象</span></span><br><span class="line">       <span class="type">SimpleRedisLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">       <span class="comment">//获取锁</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1200</span>);</span><br><span class="line">       <span class="comment">//判断是否获取锁成功</span></span><br><span class="line">       <span class="keyword">if</span> (!isLock)&#123;</span><br><span class="line">           <span class="comment">//获取锁失败，返回错误或重试</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许重复下单&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//获取代理对象（事务）</span></span><br><span class="line">           <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">           <span class="keyword">return</span> proxy.createVoucherOrder(voucherId, voucher);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//释放锁</span></span><br><span class="line">           lock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h1 id="Redis分布式锁误删问题"><a href="#Redis分布式锁误删问题" class="headerlink" title="Redis分布式锁误删问题"></a>Redis分布式锁误删问题</h1><p><img src='https://pic.imgdb.cn/item/661e15270ea9cb1403f3e1c0.png'></p><p>业务变化<br><img src='https://pic.imgdb.cn/item/661e15350ea9cb1403f40605.png'></p><h2 id="解决Redis分布式锁误删问题"><a href="#解决Redis分布式锁误删问题" class="headerlink" title="解决Redis分布式锁误删问题"></a>解决Redis分布式锁误删问题</h2><p>需求：修改之前的分布式锁实现，满足：<br>1.在获取锁时存入线程标示（可以用UUID表示）<br>2.在释放锁时先获取锁中的线程标示，判断是否与当前线程标示一致<br>    如果一致则释放锁<br>    如果不一致则不释放锁</p><p>改善地方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX=<span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ID_PREFIX= UUID.randomUUID().toString(<span class="literal">true</span>)+<span class="string">&quot;-&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX+Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">                .setIfAbsent(KEY_PREFIX + name, threadId + <span class="string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success); <span class="comment">//自动拆箱，避免空指针</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX+Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁中的标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line">        <span class="comment">//判断标识是否一致</span></span><br><span class="line">        <span class="keyword">if</span> (threadId.equals(id))&#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">## 分布式锁的原子性问题</span><br><span class="line">&lt;img src=<span class="string">&#x27;https://pic.imgdb.cn/item/661e189b0ea9cb1403fa86e1.png&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"># Lua脚本解决多条命令原子性问题</span><br><span class="line">Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。Lua是一种编程语言，它的基本语法大家可以参考网站：https:<span class="comment">//www.runoob.com/lua/lua-tutorial.html</span></span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&#x27;https://pic.imgdb.cn/item/661e1da30ea9cb140303f51d.png&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&#x27;https://pic.imgdb.cn/item/661e1dcc0ea9cb1403043e49.png&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">释放锁的业务流程是这样的：</span><br><span class="line"><span class="number">1.</span>获取锁中的线程标示</span><br><span class="line"><span class="number">2.</span>判断是否与指定的标示（当前线程标示）一致</span><br><span class="line"><span class="number">3.</span>如果一致则释放锁（删除）</span><br><span class="line"><span class="number">4.</span>如果不一致则什么都不做</span><br><span class="line">如果用Lua脚本来表示则是这样的：</span><br><span class="line">&lt;img src=<span class="string">&#x27;https://pic.imgdb.cn/item/661e1e220ea9cb140304eb08.png&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">## Java调用Lua脚本改造分布式锁</span><br><span class="line">需求：基于Lua脚本实现分布式锁的释放锁逻辑</span><br><span class="line">提示：RedisTemplate调用Lua脚本的API如下：</span><br><span class="line">&lt;img src=<span class="string">&#x27;https://pic.imgdb.cn/item/661e32c60ea9cb14032acca3.png&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">在resources添加unlock.lua代码</span><br><span class="line">```lua</span><br><span class="line"><span class="title function_">if</span> <span class="params">(redis.call(<span class="string">&#x27;get&#x27;</span>,KEYS[<span class="number">1</span>])</span>==ARGV[<span class="number">1</span>]) then</span><br><span class="line">    --释放锁 del key</span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line">end</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><br>SimpleRedisLock完善地方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line">  <span class="comment">//在静态代码块里初始化</span></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">      UNLOCK_SCRIPT=<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">      UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">      UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//调用lua脚本</span></span><br><span class="line">      stringRedisTemplate.execute(</span><br><span class="line">              UNLOCK_SCRIPT,</span><br><span class="line">              Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">              ID_PREFIX+Thread.currentThread().getId()</span><br><span class="line">              );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>基于Redis的分布式锁实现思路：<br>1.利用set nx ex获取锁，并设置过期时间，保存线程标示<br>2.释放锁时先判断线程标示是否与自己一致，一致则删除锁</p><p>特性：<br>1.利用set nx满足互斥性<br>2.利用set ex保证故障时锁依然能释放，避免死锁，提高安全性<br>3.利用Redis集群保证高可用和高并发特性</p><h1 id="Redisson功能介绍"><a href="#Redisson功能介绍" class="headerlink" title="Redisson功能介绍"></a>Redisson功能介绍</h1><p>基于setnx实现的分布式锁存在下面的问题：<br><img src='https://pic.imgdb.cn/item/661e37100ea9cb1403308ab7.png'></p><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。<br><img src='https://pic.imgdb.cn/item/661e37470ea9cb140330dad5.png'><br>官网地址： <a href="https://redisson.org">https://redisson.org</a><br>GitHub地址： <a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a></p><h1 id="Redisson快速入门"><a href="#Redisson快速入门" class="headerlink" title="Redisson快速入门"></a>Redisson快速入门</h1><p><img src='https://pic.imgdb.cn/item/661e3ce00ea9cb14033bd73c.png'></p><p>3.使用Redisson的分布式锁<br><img src='https://pic.imgdb.cn/item/661e3d080ea9cb14033c2570.png'></p><h2 id="Redisson的可重入锁原理"><a href="#Redisson的可重入锁原理" class="headerlink" title="Redisson的可重入锁原理"></a>Redisson的可重入锁原理</h2><p>java测试代码<br><img src='https://pic.imgdb.cn/item/661e7cc60ea9cb1403f19593.png'></p><p>业务流程<br><img src='https://pic.imgdb.cn/item/661e7cdc0ea9cb1403f295a0.png'></p><p>lua代码与其相应的步骤<br>获取锁<br><img src='https://pic.imgdb.cn/item/661e7d1b0ea9cb1403f52d77.png'></p><p>释放锁<br><img src='https://pic.imgdb.cn/item/661e7d240ea9cb1403f58f98.png'></p><h2 id="Redisson的锁重试和WatchDog机制"><a href="#Redisson的锁重试和WatchDog机制" class="headerlink" title="Redisson的锁重试和WatchDog机制"></a>Redisson的锁重试和WatchDog机制</h2><p><img src='https://pic.imgdb.cn/item/661e83e00ea9cb14032b0d4f.png'></p><p>Redisson分布式锁原理：<br>1.可重入：利用hash结构记录线程id和重入次数<br>2.可重试：利用信号量和PubSub功能实现等待、唤醒，获取锁失败的重试机制<br>3.超时续约：利用watchDog，每隔一段时间（releaseTime / 3），重置超时时间</p><h2 id="Redisson的multiLock原理"><a href="#Redisson的multiLock原理" class="headerlink" title="Redisson的multiLock原理"></a>Redisson的multiLock原理</h2><p>可建立或者不建立从结点<br><img src='https://pic.imgdb.cn/item/661e8ada0ea9cb140360a77b.png'></p><p>新增代码<br><img src='https://pic.imgdb.cn/item/661e8b1b0ea9cb14036280b1.png'></p><p><img src='https://pic.imgdb.cn/item/661e8b310ea9cb14036325af.png'></p><p>1）不可重入Redis分布式锁：<br>原理：利用setnx的互斥性；利用ex避免死锁；释放锁时判断线程标示<br>缺陷：不可重入、无法重试、锁超时失效<br>2）可重入的Redis分布式锁：<br>原理：利用hash结构，记录线程标示和重入次数；利用watchDog延续锁时间；利用信号量控制锁重试等待<br>缺陷：redis宕机引起锁失效问题<br>3）Redisson的multiLock：<br>原理：多个独立的Redis节点，必须在所有节点都获取重入锁，才算获取锁成功<br>缺陷：运维成本高、实现复杂</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis实战项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jackson快速入门</title>
      <link href="/posts/cc38c3e.html"/>
      <url>/posts/cc38c3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jackson-Maven-依赖"><a href="#Jackson-Maven-依赖" class="headerlink" title="Jackson Maven 依赖"></a>Jackson Maven 依赖</h1><p>在使用 Jackson 时，大多数情况下我们只需要添加 jackson-databind 依赖项，就可以使用 Jackson 功能了，它依赖了下面两个包<br><img src='https://pic.imgdb.cn/item/661df3090ea9cb1403b2708b.png'></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="ObjectMapper-对象映射器"><a href="#ObjectMapper-对象映射器" class="headerlink" title="ObjectMapper 对象映射器"></a>ObjectMapper 对象映射器</h1><p>ObjectMapper 是 Jackson 库中最常用的一个类，使用它可以进行 Java 对象和 JSON 字符串之间快速转换。如果你用过 FastJson，那么 Jackson 中的 ObjectMapper 就如同 FastJson 中的 JSON 类。</p><p>这个类中有一些常用的方法：<br>1.readValue() 方法可以进行 JSON 的反序列化操作，比如可以将字符串、文件流、字节流、字节数组等将常见的内容转换成 Java 对象。<br>2.writeValue() 方法可以进行 JSON 的序列化操作，可以将 Java 对象转换成 JSON 字符串。</p><h1 id="Jackson-JSON-基本操作"><a href="#Jackson-JSON-基本操作" class="headerlink" title="Jackson JSON 基本操作"></a>Jackson JSON 基本操作</h1><h2 id="Jackson-JSON-序列化"><a href="#Jackson-JSON-序列化" class="headerlink" title="Jackson JSON 序列化"></a>Jackson JSON 序列化</h2>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>框架面试</title>
      <link href="/posts/c6a26601.html"/>
      <url>/posts/c6a26601.html</url>
      
        <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src='https://pic.imgdb.cn/item/661d51440ea9cb1403e6374f.png'></p><h1 id="Spring框架中的单例bean是线程安全的吗？"><a href="#Spring框架中的单例bean是线程安全的吗？" class="headerlink" title="Spring框架中的单例bean是线程安全的吗？"></a>Spring框架中的单例bean是线程安全的吗？</h1><h2 id="Spring框架中的bean是单例的吗？"><a href="#Spring框架中的bean是单例的吗？" class="headerlink" title="Spring框架中的bean是单例的吗？"></a>Spring框架中的bean是单例的吗？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>singleton : bean在每个Spring IOC容器中只有一个实例。<br>prototype：一个bean的定义可以有多个实例。<br><u>不是线程安全的</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;    <span class="comment">//成员方法需考虑线程安全  </span></span><br><span class="line">     <span class="meta">@Autowired</span>    </span><br><span class="line">     <span class="keyword">private</span> UserService userService;    </span><br><span class="line">     <span class="meta">@GetMapping(&quot;/getById/&#123;id&#125;&quot;)</span>   </span><br><span class="line">      <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;   </span><br><span class="line">             count++;       </span><br><span class="line">             System.out.println(count);        </span><br><span class="line">             <span class="keyword">return</span> userService.getById(id);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring bean并没有可变的状态(比如Service类和DAO类)，所以在某种程度上说Spring的单例bean是线程安全的。</p><p>回答：<br>不是线程安全的<br>Spring框架中有一个@Scope注解，默认的值就是singleton，单例的。<br>因为一般在spring的bean的中都是注入无状态的对象，没有线程安全问题，如果在bean中定义了可修改的成员变量，是要考虑线程安全问题的，可以使用多例或者加锁来解决</p><p>面试<br><img src='https://pic.imgdb.cn/item/661d565c0ea9cb1403ea4ecd.png'><br>无状态的类-&gt;不能被修改的成员变量</p><h1 id="Spring-AOP相关面试"><a href="#Spring-AOP相关面试" class="headerlink" title="Spring-AOP相关面试"></a>Spring-AOP相关面试</h1><p>AOP称为面向切面编程，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。</p><p>常见的AOP使用场景：<br>1.记录操作日志<br>2.缓存处理<br>3.Spring中内置的事务处理</p><h2 id="记录操作日志思路"><a href="#记录操作日志思路" class="headerlink" title="记录操作日志思路"></a>记录操作日志思路</h2><p><img src='https://pic.imgdb.cn/item/661d5a240ea9cb1403ef5be0.png'><br>获取请求的用户名、请求方式、访问地址、模块名称、登录ip、操作时间，记录到数据库的日志表中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.PARAMETER, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模块名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>   <span class="comment">//切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.itheima.annotation.Log)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//获取用户名</span></span><br><span class="line">        <span class="comment">//需要通过解析seesion或token获取</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取被增强类和方法的信息</span></span><br><span class="line">        <span class="comment">/* Signature signature = joinPoint.getSignature();</span></span><br><span class="line"><span class="comment">        MethodSignature methodSignature = (MethodSignature) signature;</span></span><br><span class="line"><span class="comment">        //获取被增强的方法对象</span></span><br><span class="line"><span class="comment">        Method method = methodSignature.getMethod();</span></span><br><span class="line"><span class="comment">        //从方法中解析注解</span></span><br><span class="line"><span class="comment">        if(method != null)&#123;</span></span><br><span class="line"><span class="comment">            Log logAnnotation = method.getAnnotation(Log.class);</span></span><br><span class="line"><span class="comment">            System.out.println(logAnnotation.name());</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //方法名字</span></span><br><span class="line"><span class="comment">        String name = method.getName();</span></span><br><span class="line"><span class="comment">        System.out.println(name);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //通过工具类获取Request对象</span></span><br><span class="line"><span class="comment">        RequestAttributes reqa = RequestContextHolder.getRequestAttributes();</span></span><br><span class="line"><span class="comment">        ServletRequestAttributes sra = (ServletRequestAttributes)reqa;</span></span><br><span class="line"><span class="comment">        HttpServletRequest request = sra.getRequest();</span></span><br><span class="line"><span class="comment">        //访问的url</span></span><br><span class="line"><span class="comment">        String url = request.getRequestURI().toString();</span></span><br><span class="line"><span class="comment">        System.out.println(url);</span></span><br><span class="line"><span class="comment">        //请求方式</span></span><br><span class="line"><span class="comment">        String methodName = request.getMethod();</span></span><br><span class="line"><span class="comment">        System.out.println(methodName);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //登录IP</span></span><br><span class="line"><span class="comment">        String ipAddr = getIpAddr(request);</span></span><br><span class="line"><span class="comment">        System.out.println(ipAddr);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //操作时间</span></span><br><span class="line"><span class="comment">        System.out.println(new Date());*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存到数据库（操作日志）</span></span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在对面的方法上面加上标识符</p><h2 id="Spring中的事务是如何实现的"><a href="#Spring中的事务是如何实现的" class="headerlink" title="Spring中的事务是如何实现的"></a>Spring中的事务是如何实现的</h2><p>Spring支持编程式事务管理和声明式事务管理两种方式。<br>1.编程式事务控制：需使用TransactionTemplate来进行实现，对业务代码有侵入性，项目中很少使用<br>2.声明式事务管理：声明式事务管理建立在AOP之上的。其本质是通过AOP功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p><h2 id="面试回答"><a href="#面试回答" class="headerlink" title="面试回答"></a>面试回答</h2><h3 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h3><p>面向切面编程，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取公共模块复用，降低耦合</p><h2 id="你们项目中有没有使用到AOP"><a href="#你们项目中有没有使用到AOP" class="headerlink" title="你们项目中有没有使用到AOP"></a>你们项目中有没有使用到AOP</h2><p>记录操作日志，缓存，spring实现的事务<br>核心是：使用aop中的环绕通知+切点表达式（找到要记录日志的方法），通过环绕通知的参数获取请求方法的参数（类、方法、注解、请求方式等），获取到这些参数以后，保存到数据库</p><h2 id="Spring中的事务是如何实现的-1"><a href="#Spring中的事务是如何实现的-1" class="headerlink" title="Spring中的事务是如何实现的"></a>Spring中的事务是如何实现的</h2><p>其本质是通过AOP功能，对方法前后进行拦截，在执行方法之前开启事务，在执行完目标方法之后根据执行情况提交或者回滚事务。（一般只说声明事务管理）</p><p>面试<br><div class="tip info"><p>面试官：什么是AOP<br>候选人：<br>aop是面向切面编程，在spring中用于将那些与业务无关，但却对多个对象产<br>生影响的公共行为和逻辑，抽取公共模块复用，降低耦合，一般比如可以做<br>为公共日志保存，事务处理等<br>面试官：你们项目中有没有使用到AOP<br>候选人：<br>我们当时在后台管理系统中，就是使用aop来记录了系统的操作日志<br>主要思路是这样的，使用aop中的环绕通知+切点表达式，这个表达式就是要<br>找到要记录日志的方法，然后通过环绕通知的参数获取请求方法的参数，比<br>如类信息、方法信息、注解、请求方式等，获取到这些参数以后，保存到数<br>据库<br>面试官：Spring中的事务是如何实现的<br>候选人：<br>spring实现的事务本质就是aop完成，对方法前后进行拦截，在执行方法之前<br>开启事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p></div></p><h1 id="Spring-事务失效的场景"><a href="#Spring-事务失效的场景" class="headerlink" title="Spring-事务失效的场景"></a>Spring-事务失效的场景</h1><p>Spring中事务失效的场景有哪些<br>1.异常捕获处理<br>2.抛出检查异常<br>3.非public方法<br><img src='https://pic.imgdb.cn/item/661d602e0ea9cb1403f65ff0.png'></p><p><img src='https://pic.imgdb.cn/item/661d603b0ea9cb1403f66d2b.png'></p><p><img src='https://pic.imgdb.cn/item/661d60510ea9cb1403f68103.png'></p><p>回答：<br>异常捕获处理，自己处理了异常，没有抛出，解决：手动抛出<br>抛出检查异常，配置rollbackFor属性为Exception<br>非public方法导致的事务失效，改为public</p><p>面试</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用DOM操纵图片</title>
      <link href="/posts/10da5fae.html"/>
      <url>/posts/10da5fae.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8"><title>练习5：DOM操作</title></head><body><div id="cont_left"><ul><img src="../img/siteicon/fold.gif"><a onclick="show('menu1')"> 通过DOM获取信息 </a><ul id="menu1"><li onclick="showImg()"><img src="../img/siteicon/doc.gif">获取原始图片路径</li><li onclick="getFruit()"><img src="../img/siteicon/doc.gif">获取我喜欢的水果</li></ul></ul><ul><img src="../img/siteicon/fold.gif"><a onclick="show('menu2')"> 通过DOM操作元素 </a><ul id="menu2"><li onclick="createImg()"><img src="../img/siteicon/doc.gif">创建图片</li><li onclick="cloneImg()"><img src="../img/siteicon/doc.gif">克隆图片</li><li onclick="changeImg()"><img src="../img/siteicon/doc.gif">改变图片</li><li onclick="removeImg()"><img src="../img/siteicon/doc.gif">删除图片</li></ul></ul><ul><img src="../img/siteicon/fold.gif"><a onclick="show('menu3')"> 通过DOM操作样式 </a><ul id="menu3"><li onclick="changeCss1()"><img src="../img/siteicon/doc.gif">为原始图片加上行间样式</li><li onclick="changeCss2()"><img src="../img/siteicon/doc.gif">为所有的fieldset加上内部样式</li></ul></ul></div><fieldset><legend>原始图片</legend><img id="fruit" src="../img/siteicon/fruit.jpg"></fieldset><fieldset><legend>图片路径</legend><p id="msg1">在这里显示</p></fieldset><fieldset><legend>选择你喜欢的水果</legend><ul style="text-align: left;"><li><input name="enjoy" type="checkbox" value="苹果" />苹果</li><li><input name="enjoy" type="checkbox" value="香蕉" checked="checked" />香蕉</li><li><input name="enjoy" type="checkbox" value="葡萄" />葡萄</li><li><input name="enjoy" type="checkbox" value="梨" checked="checked" />梨</li><li><input name="enjoy" type="checkbox" value="西瓜" />西瓜</li></ul><div id="msg2" style="margin-top: 10px;text-align: left;"></div></fieldset><fieldset><legend>创建图片</legend><div id="msg3"></div></fieldset><fieldset><legend>克隆图片</legend><div id="msg4"></div></fieldset><script>//菜单收缩与扩展function show(title) {let currentMenu = document.getElementById(title);let currentStatus = currentMenu.style.display;currentMenu.style.display = currentStatus == "" ? "none" : "";}//获取原始图片路径function showImg() {var text = document.getElementById('msg1'); //获取需要输出地方的文本         var src = document.getElementById('fruit').src;      //获取原始图片的srctext.innerHTML = src;  //将原始图片的src赋予text   }//获取喜欢的水果function getFruit() {var a = document.getElementsByName('enjoy'); //获取name为enjoy的元素document.getElementById('msg2').innerHTML = "你最喜欢的水果是："; //获取需要输出地方的文本内容//for循环 追加写入水果for (var i = 0; i <= a.length; i++) {if (a[i].checked == true) {document.getElementById('msg2').innerHTML += a[i].value + " ";}}}//创建图片function createImg() {var msg3 = document.getElementById('msg3'); //获取id元素var im = document.createElement('img'); //创建图片im.src = "../img/siteicon/grape.jpg";   //选取想要创建的图片msg3.appendChild(im); //图片挂载到id上}//克隆图片function cloneImg() {var msg4 = document.getElementById('msg4'); //获取id元素var cloneim = document.getElementById('fruit'); //获取图片idmsg4.appendChild(cloneim.cloneNode());  //图片挂载到id上}//改变图片function changeImg() {var msg5 = document.getElementById('fruit'); //获取id元素msg5.src = "../img/siteicon/grape.jpg"; //更改src}//删除图片function removeImg() {var msg6 = document.getElementById('fruit'); //获取id元素msg6.parentNode.removeChild(msg6); //删除父节点}//操作样式1function changeCss1() {var ele = document.getElementById('fruit'); //获取idele.style.border = 'solid 4px red';  //改变border样式}//操作样式2function changeCss2() {var ele = document.getElementsByTagName('fieldset');for (var i = 0; i < ele.length; i++) {ele[i].style.backgroundColor = "green"}}</script></body></html>]]></content>
      
      
      <categories>
          
          <category> 前端js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/posts/5729df21.html"/>
      <url>/posts/5729df21.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是多线程"><a href="#什么是多线程" class="headerlink" title="什么是多线程"></a>什么是多线程</h1><p>线程是操作系统能够进行运行调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。<br>简单理解：应用软件中互相独立，可以同行运行的功能<br><img src='https://pic.imgdb.cn/item/661a934e68eb935713a14d83.png'></p><h1 id="多线程的两个概念"><a href="#多线程的两个概念" class="headerlink" title="多线程的两个概念"></a>多线程的两个概念</h1><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>并发：在同一时刻，有多个指令在单个CPU上<u>交替</u>执行</p><h2 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h2><p>并行：在同一时刻，有多个指令在多个CPU上<u>同时</u>执行</p><h1 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h1><p>1.继承Thread类的方式进行实现<br>2.实现Runnable接口的方式进行实现<br>3.利用Callable接口和Future接口方式实现</p><h2 id="继承Thread类的方式进行实现"><a href="#继承Thread类的方式进行实现" class="headerlink" title="继承Thread类的方式进行实现"></a>继承Thread类的方式进行实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//书写线程要执行代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 多线程的第一种启动方式：</span></span><br><span class="line"><span class="comment">         * 1.自己第一个类继承Thread</span></span><br><span class="line"><span class="comment">         * 2.重写run方法</span></span><br><span class="line"><span class="comment">         * 3.创建子类对象，并启动线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现Runnable接口的方式进行实现"><a href="#实现Runnable接口的方式进行实现" class="headerlink" title="实现Runnable接口的方式进行实现"></a>实现Runnable接口的方式进行实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRun</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//书写线程要执行代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//获取到当前线程的对象</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            System.out.println(t.getName()+<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 多线程的第二钟启动方式：</span></span><br><span class="line"><span class="comment">         * 1.自己定义一个类实现Runnable接口</span></span><br><span class="line"><span class="comment">         * 2.重写里面的run方法</span></span><br><span class="line"><span class="comment">         * 3.创建自己的类的对象</span></span><br><span class="line"><span class="comment">         * 4.创建一个Thread类的对象，并开启线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建MyRun的对象</span></span><br><span class="line">        <span class="comment">//表示多线程要执行的任务</span></span><br><span class="line">        <span class="type">MyRun</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRun</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给线程设置名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用Callable接口和Future接口方式实现"><a href="#利用Callable接口和Future接口方式实现" class="headerlink" title="利用Callable接口和Future接口方式实现"></a>利用Callable接口和Future接口方式实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//求1~100之间的和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum = sum + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 多线程的第三种实现方式：</span></span><br><span class="line"><span class="comment">         * 特点：可以获取到多线程运行的结果</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 1.创建一个类MyCallable实现Callable接口</span></span><br><span class="line"><span class="comment">         * 2.重写call（是有返回值的，表示多线程运行的结果）</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3.创建MyCallable的对象（表示多线程要执行的任务）</span></span><br><span class="line"><span class="comment">         * 4.创建FutureTask的对象（作用管理多线程运行的结果）</span></span><br><span class="line"><span class="comment">         * 5.创建Thread类的对象，并启动（表示线程）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建MyCallable的对象（表示多线程要执行的任务）</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">        <span class="comment">//创建FutureTask的对象（作用管理多线程运行的结果）</span></span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line">        <span class="comment">//创建线程的对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取多线的结果</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> ft.get();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三种方式对比"><a href="#三种方式对比" class="headerlink" title="三种方式对比"></a>三种方式对比</h2><p><img src='https://pic.imgdb.cn/item/661a9e0c68eb935713ad6736.png'></p><h1 id="常见的成员方法"><a href="#常见的成员方法" class="headerlink" title="常见的成员方法"></a>常见的成员方法</h1><p><img src='https://pic.imgdb.cn/item/661aa2f368eb935713b3cfc2.png'></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//书写线程要执行代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  String getName()  返回此线程的名称</span></span><br><span class="line"><span class="comment">         *  void setName（String name） 设置线程的名字（构造方法也可也以）</span></span><br><span class="line"><span class="comment">         *  细节：</span></span><br><span class="line"><span class="comment">         *  1.如果我们没有给线程设置名字,线程也是有默认的名字的</span></span><br><span class="line"><span class="comment">         *          格式：Thread-X(X序号，从0开始的)</span></span><br><span class="line"><span class="comment">         *  2.如果我们要给线程设置名字，可以用set方法进行设置，也可也构造方法设置</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  static Thread currentThread()  获取当前线程的对象</span></span><br><span class="line"><span class="comment">         *  细节：</span></span><br><span class="line"><span class="comment">         *      当JVm虚拟机启动之后，会自动的启动多条线程</span></span><br><span class="line"><span class="comment">         *      其中有一条线程就叫做mian线程</span></span><br><span class="line"><span class="comment">         *      它的作用就是去调用mian方法，并执行里面的代码</span></span><br><span class="line"><span class="comment">         *      在以前，我们写的所有代码，其实都是运行在mian线程当中</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  static void sleep(long time)  让线程休眠指定的时间，单位为毫秒</span></span><br><span class="line"><span class="comment">         *  细节：</span></span><br><span class="line"><span class="comment">         *      1.哪条线程执行到这个方法，那么哪条线程就会在这里停留对应的时间</span></span><br><span class="line"><span class="comment">         *      2.方法的参数：就表示睡眠的时间，单位为毫秒</span></span><br><span class="line"><span class="comment">         *          1秒=1000毫秒</span></span><br><span class="line"><span class="comment">         *      3.当时间到了之后，线程会自动的醒来，继续执行下面的其他代码</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建线程的对象</span></span><br><span class="line">     <span class="comment">/*   MyThread t1 = new MyThread(&quot;飞机&quot;);</span></span><br><span class="line"><span class="comment">        MyThread t2 = new MyThread(&quot;坦克&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //2.开启线程</span></span><br><span class="line"><span class="comment">        t1.start();</span></span><br><span class="line"><span class="comment">        t2.start();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//哪条线程执行到这个方法，此时获取的就是哪条线程的对象</span></span><br><span class="line">       <span class="comment">/* Thread t = Thread.currentThread();</span></span><br><span class="line"><span class="comment">        String name = t.getName();</span></span><br><span class="line"><span class="comment">        System.out.println(name);*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;111111&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;22222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-----&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  setPriority(int newPriority)  设置线程的优先级  默认优先级是5</span></span><br><span class="line"><span class="comment">         *  final int getPriority()  获取线程的优先级</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程要执行的参数对象</span></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;坦克&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*     System.out.println(t1.getPriority());</span></span><br><span class="line"><span class="comment">        System.out.println(t2.getPriority());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println(Thread.currentThread().getPriority());*/</span></span><br><span class="line">        t1.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.setPriority(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">            final void setDaemon(boolean on)    设置为守护线程</span></span><br><span class="line"><span class="comment">            细节：</span></span><br><span class="line"><span class="comment">                当其他的非守护线程执行完毕之后，守护线程会陆续结束</span></span><br><span class="line"><span class="comment">            通俗易懂：</span></span><br><span class="line"><span class="comment">                当女神线程结束了，那么备胎也没有存在的必要了</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;女神&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;备胎&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把第二个线程设置为守护线程（备胎线程）</span></span><br><span class="line">        t2.setDaemon(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应用场景<br><img src='https://pic.imgdb.cn/item/661aa84f68eb935713ba4c0f.png'><br>当线程1取消掉，那么线程2会自动挂掉</p><h2 id="礼让线程"><a href="#礼让线程" class="headerlink" title="礼让线程"></a>礼让线程</h2><p>尽量的让线程CPU的执行权均匀点<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//&quot;飞机&quot;  &quot;坦克&quot;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line">            <span class="comment">//表示出让当前CPU的执行权</span></span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public static void yield()      出让线程/礼让线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;坦克&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入线程"><a href="#插入线程" class="headerlink" title="插入线程"></a>插入线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public final void join()  插入线程/插队线程</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        t.setName(<span class="string">&quot;土豆&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示把t这个线程，插入到当前线程之前。</span></span><br><span class="line">        <span class="comment">//t:土豆</span></span><br><span class="line">        <span class="comment">//当前线程: main线程</span></span><br><span class="line">        t.join();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行在main线程当中的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><p><img src='https://pic.imgdb.cn/item/661de6650ea9cb14039c3c59.png'></p><p>#</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马点评-优惠卷秒杀-redis</title>
      <link href="/posts/7f197c2e.html"/>
      <url>/posts/7f197c2e.html</url>
      
        <content type="html"><![CDATA[<h1 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h1><p>每个店铺都可以发布优惠券：<br><img src='https://pic.imgdb.cn/item/661a360568eb93571333f0d4.png'></p><p>当用户抢购时，就会生成订单并保存到tb_voucher_order这张表中，而订单表如果使用数据库自增ID就存在一些问题：<br>1.id的规律性太明显(容易让用户猜到一天有多少订单量)<br>2.受单表数据量的限制（随着我们商城规模越来越大，mysql的单表的容量不宜超过500W）</p><p>全局ID生成器，是一种在分布式系统下用来生成全局唯一ID的工具，一般要满足下列特性：<br><img src='https://pic.imgdb.cn/item/661a362b68eb93571334437c.png'></p><p>为了增加ID的安全性，我们可以不直接使用Redis自增的数值，而是拼接一些其它信息：<br><img src='https://pic.imgdb.cn/item/661a36bc68eb935713358967.png'><br>ID的组成部分：<br>1.符号位：1bit，永远为0<br>2.时间戳：31bit，以秒为单位，可以使用69年<br>3.序列号：32bit，秒内的计数器，支持每秒产生2^32个不同ID</p><h2 id="实现全局唯一ID"><a href="#实现全局唯一ID" class="headerlink" title="实现全局唯一ID"></a>实现全局唯一ID</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> BEGIN_TIMESTAMP=<span class="number">1713020400L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> COUNT_BITS=<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisIdWorker</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span>  <span class="title function_">nextId</span><span class="params">(String keyPrefix)</span>&#123;</span><br><span class="line">        <span class="comment">//1.生成时间戳</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowSecond</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> nowSecond - BEGIN_TIMESTAMP;</span><br><span class="line">        <span class="comment">//2.生成序列号</span></span><br><span class="line">        <span class="comment">//2.1.获取当前日期，精确到天</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy:MM:dd&quot;</span>));</span><br><span class="line">        <span class="comment">//2.2.自增长</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;icr:&quot;</span> + keyPrefix + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line">        <span class="comment">//3.拼接并返回</span></span><br><span class="line">        <span class="keyword">return</span> timestamp&lt;&lt;COUNT_BITS | count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        LocalDateTime time = LocalDateTime.of(2024, 4, 13, 15, 0);</span></span><br><span class="line"><span class="comment">        long second = time.toEpochSecond(ZoneOffset.UTC);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;second=&quot;+second);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局唯一ID生成策略：<br>1.UUID<br>2.Redis自增<br>3.snowflake算法<br>4.数据库自增<br>Redis自增ID策略：<br>1.每天一个key，方便统计订单量<br>2.ID构造是 时间戳 + 计数器</p><h1 id="实现优惠券秒杀下单"><a href="#实现优惠券秒杀下单" class="headerlink" title="实现优惠券秒杀下单"></a>实现优惠券秒杀下单</h1><h2 id="添加秒杀优惠卷"><a href="#添加秒杀优惠卷" class="headerlink" title="添加秒杀优惠卷"></a>添加秒杀优惠卷</h2><p>每个店铺都可以发布优惠券，分为平价券和特价券。平价券可以任意购买，而特价券需要秒杀抢购：<br><img src='https://pic.imgdb.cn/item/661a490d68eb935713503095.png'><br>表关系如下：<br>1.tb_voucher：优惠券的基本信息，优惠金额、使用规则等<br>2.tb_seckill_voucher：优惠券的库存、开始抢购时间，结束抢购时间。特价优惠券才需要填写这些信息</p><p>添加秒杀优惠卷<br><img src='https://pic.imgdb.cn/item/661a492268eb9357135038a0.png'></p><p>分析出对应的接口<br><img src='https://pic.imgdb.cn/item/661a493a68eb93571350421b.png'></p><h2 id="实现秒杀下单"><a href="#实现秒杀下单" class="headerlink" title="实现秒杀下单"></a>实现秒杀下单</h2><p>下单时需要判断两点：<br>1.秒杀是否开始或结束，如果尚未开始或已经结束则无法下单<br>2.库存是否充足，不足则无法下单<br><img src='https://pic.imgdb.cn/item/661a4dd868eb93571354a818.png'></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="keyword">implements</span> <span class="title class_">IVoucherOrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ISeckillVoucherService seckillVoucherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询优惠卷</span></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">        <span class="comment">//2.判断秒杀是否开始</span></span><br><span class="line">        <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">//尚未开始</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.判断秒杀是否已经结束</span></span><br><span class="line">        <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="comment">//已经结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.判断库存是否充足</span></span><br><span class="line">        <span class="keyword">if</span> (voucher.getStock()&lt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//库存不足</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.扣减库存</span></span><br><span class="line">       <span class="type">boolean</span> success= seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>,voucherId).update();</span><br><span class="line">        <span class="keyword">if</span> (!success)&#123;</span><br><span class="line">            <span class="comment">//扣减失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">//6.1.订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">//6.2.用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">//6.3. 代金卷id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        save(voucherOrder);</span><br><span class="line">        <span class="comment">//7.返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h1><p><img src='https://pic.imgdb.cn/item/661a523068eb9357135930b3.png'></p><p>超卖问题是典型的多线程安全问题，针对这一问题的常见解决方案就是加锁：<br><img src='https://pic.imgdb.cn/item/661a525368eb935713597230.png'></p><p>乐观锁的关键是判断之前查询得到的数据是否有被修改过，常见的方式有两种：<br><img src='https://pic.imgdb.cn/item/661a527d68eb935713599c79.png'></p><p><img src='https://pic.imgdb.cn/item/661a528b68eb93571359a5f3.png'></p><p>修改地方（使用乐观锁CAS法）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.扣减库存</span></span><br><span class="line">      <span class="type">boolean</span> success= seckillVoucherService.update()</span><br><span class="line">               .setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">               .eq(<span class="string">&quot;voucher_id&quot;</span>,voucherId).gt(<span class="string">&quot;stock&quot;</span>,voucher.getStock())</span><br><span class="line">              .update();</span><br></pre></td></tr></table></figure></p><p>超卖这样的线程安全问题，解决方案有哪些？<br>1.悲观锁：添加同步锁，让线程串行执行<br>    优点：简单粗暴<br>    缺点：性能一般<br>2.乐观锁：不加锁，在更新时判断是否有其它线程在修改<br>    优点：性能好<br>    缺点：存在成功率低的问题</p><h1 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h1><p>需求：修改秒杀业务，要求同一个优惠券，一个用户只能下一单<br><img src='https://pic.imgdb.cn/item/661a661b68eb93571375d80d.png'></p><p>将方法抽取出来<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId, SeckillVoucher voucher)</span> &#123;</span><br><span class="line">    <span class="comment">//5.一人一单</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//5.1.查询订单</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">        <span class="comment">//5.2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//用户已经购买过了</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).gt(<span class="string">&quot;stock&quot;</span>, voucher.getStock())</span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="comment">//扣减失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">//6.1.订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">//6.2.用户id</span></span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">//6.3. 代金卷id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        save(voucherOrder);</span><br><span class="line">        <span class="comment">//7.返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>修改地方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">       <span class="keyword">synchronized</span> (userId.toString().intern()) &#123;<span class="comment">//保证是同一个用户</span></span><br><span class="line">           <span class="comment">//获取代理对象（事务）</span></span><br><span class="line">           <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">           <span class="keyword">return</span> proxy.createVoucherOrder(voucherId, voucher);<span class="comment">//解决事务代理异常问题</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>启动类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.hmdp.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HmDianPingApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HmDianPingApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="一人一单的并发安全问题"><a href="#一人一单的并发安全问题" class="headerlink" title="一人一单的并发安全问题"></a>一人一单的并发安全问题</h2><p>通过加锁可以解决在单机情况下的一人一单安全问题，但是在集群模式下就不行了。<br>1.我们将服务启动两份，端口分别为8081和8082：<br><img src='https://pic.imgdb.cn/item/661a6e0168eb93571380938f.png'><br>2.然后修改nginx的conf目录下的nginx.conf文件，配置反向代理和负载均衡：<br><img src='https://pic.imgdb.cn/item/661a6e1d68eb93571380c2f5.png'><br>现在，用户请求会在这两个节点上负载均衡，再次测试下是否存在线程安全问题。<br><img src='https://pic.imgdb.cn/item/661a6e3f68eb93571380f744.png'></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis实战项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mq初级</title>
      <link href="/posts/16d34fdb.html"/>
      <url>/posts/16d34fdb.html</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ课程介绍"><a href="#RabbitMQ课程介绍" class="headerlink" title="RabbitMQ课程介绍"></a>RabbitMQ课程介绍</h1><ul><li>同步通讯：就如同打视频电话，双方的交互都是实时的。因此同一时刻你只能跟一个人打视频电话。</li><li>异步通讯：就如同发微信聊天，双方的交互不是实时的，你不需要立刻给对方回应。因此你可以多线操作，同时跟多人聊天<br>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发微信可以同时与多个人收发微信，但是往往响应会有延迟。</li></ul><p>例如<br><img src='https://pic.imgdb.cn/item/661955f368eb935713f1af90.png'><br>如上图所示，如果采用同步机制的话，会非常费时间，导致性能变差，所以我们这时候要采用MQ异步消息<br><img src='https://pic.imgdb.cn/item/6619562868eb935713f1e196.png'></p><p>所以，如果我们的业务需要实时得到服务提供方的响应，则应该选择同步通讯（同步调用）。而如果我们追求更高的效率，并且不需要实时响应，则应该选择异步通讯（异步调用）。<br>导学<br><img src="https://pic.imgdb.cn/item/6619568468eb935713f2a5a1.png"></p><h1 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h1><p><img src='https://pic.imgdb.cn/item/661958ab68eb935713f5b713.png'></p><p>同步调用的优势是什么？<br>时效性强，等待到结果才返回</p><p>同步调用的问题是什么？<br>1.括展性差<br>2.性能下降<br>3.级联失败问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> mq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马点评-缓存-redis</title>
      <link href="/posts/cf1ce85f.html"/>
      <url>/posts/cf1ce85f.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h1><p>缓存就是数据交换的缓冲区（称作Cache [ kæʃ ] ），是存贮数据的临时地方，一般读写性能较高。<br><img src='https://pic.imgdb.cn/item/6618de0368eb9357133ac27e.png'></p><p>优缺点<br><img src='https://pic.imgdb.cn/item/6618de1b68eb9357133adad0.png'></p><h1 id="添加Redis缓存"><a href="#添加Redis缓存" class="headerlink" title="添加Redis缓存"></a>添加Redis缓存</h1><p><img src='https://pic.imgdb.cn/item/6618e21a68eb935713406848.png'></p><h2 id="商铺缓存"><a href="#商铺缓存" class="headerlink" title="商铺缓存"></a>商铺缓存</h2><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据id查询商铺信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 商铺详情数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> shopService.queryById(id);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据id查询商铺信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 商铺详情数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> Result <span class="title function_">queryById</span><span class="params">(Long id)</span></span><br></pre></td></tr></table></figure><p>实现service接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据id查询商铺信息</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 商铺详情数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">       <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">       <span class="comment">//2.判断是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">           <span class="comment">//3.存在，直接返回</span></span><br><span class="line">           <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">           <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//4.不存在，根据id查询数据库</span></span><br><span class="line">       <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">       <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">       <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//6.存在，写入redis</span></span><br><span class="line">       stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop));</span><br><span class="line">       <span class="comment">//7.返回</span></span><br><span class="line">       <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="店铺类型缓存"><a href="#店铺类型缓存" class="headerlink" title="店铺类型缓存"></a>店铺类型缓存</h2><p><img src='https://pic.imgdb.cn/item/6618e53c68eb935713445e64.png'><br>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/shop-type&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopTypeController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IShopTypeService typeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryTypeList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  typeService.queryList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Result <span class="title function_">queryList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></p><p>实现service接口  集合对象list转为json需要一个一个转JSONUtil.toJsonStr    json转为集合对象list也是JSONUtil.toBean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopTypeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShopTypeMapper, ShopType&gt; <span class="keyword">implements</span> <span class="title class_">IShopTypeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.向redis查找数据</span></span><br><span class="line">        List&lt;String&gt; shopTypeJSONList = stringRedisTemplate.opsForList().range(CACHE_SHOP_TYPE_LIST_KEY, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shopTypeJSONList != <span class="literal">null</span> &amp;&amp; shopTypeJSONList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//2.存在，返回数据</span></span><br><span class="line">            List&lt;ShopType&gt; typeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String str : shopTypeJSONList) &#123;</span><br><span class="line">                <span class="type">ShopType</span> <span class="variable">type</span> <span class="operator">=</span> JSONUtil.toBean(str, ShopType.class);</span><br><span class="line">                typeList.add(type);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(typeList);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.不存在，向数据库查询数据</span></span><br><span class="line">        List&lt;ShopType&gt; typeList = query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">        <span class="comment">//4.不存在，返回错误信息</span></span><br><span class="line">        <span class="keyword">if</span> (typeList == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;不存在商品分类信息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.存在，写入缓存</span></span><br><span class="line">        <span class="keyword">for</span> (ShopType shopType : typeList) &#123;</span><br><span class="line">            stringRedisTemplate.opsForList()</span><br><span class="line">                    .leftPushAll(CACHE_SHOP_TYPE_LIST_KEY, JSONUtil.toJsonStr(shopType));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.返回数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(typeList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h1><p><img src='https://pic.imgdb.cn/item/6618fba368eb93571366a11b.png'><br>业务场景：<br>低一致性需求：使用内存淘汰机制。例如店铺类型的查询缓存<br>高一致性需求：主动更新，并以超时剔除作为兜底方案。例如店铺详情查询的缓存</p><h2 id="主动更新策略"><a href="#主动更新策略" class="headerlink" title="主动更新策略"></a>主动更新策略</h2><p><img src='https://pic.imgdb.cn/item/6618fc1a68eb93571367417f.png'></p><div class="tip info"><p>操作缓存和数据库时有三个问题需要考虑：<br>1.删除缓存还是更新缓存？  删除缓存<br>    更新缓存：每次更新数据库都更新缓存，无效写操作较多<br>    删除缓存：更新数据库时让缓存失效，查询时再更新缓存<br>2.如何保证缓存与数据库的操作的同时成功或失败？<br>    单体系统，将缓存与数据库操作放在一个事务<br>    分布式系统，利用TCC等分布式事务方案<br>3.先操作缓存还是先操作数据库？<br>    先删除缓存，再操作数据库<br>    先操作数据库，再删除缓存</p></div><h3 id="先操作缓存还是先操作数据库？"><a href="#先操作缓存还是先操作数据库？" class="headerlink" title="先操作缓存还是先操作数据库？"></a>先操作缓存还是先操作数据库？</h3><p><img src='https://pic.imgdb.cn/item/6618fce368eb935713685e61.png'></p><p>选择先操作数据库因为：条件要恰好缓存失效 在写入缓存时间内，突然来了个线程更新数据库，又去删除缓存 （满足3个巧合，可能性低）</p><h2 id="给查询商铺的缓存添加超时剔除和主动更新的策略"><a href="#给查询商铺的缓存添加超时剔除和主动更新的策略" class="headerlink" title="给查询商铺的缓存添加超时剔除和主动更新的策略"></a>给查询商铺的缓存添加超时剔除和主动更新的策略</h2><p>修改ShopController中的业务逻辑，满足下面的需求：<br>1.根据id查询店铺时，如果缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间<br>2.根据id修改店铺时，先修改数据库，再删除缓存</p><p>第一个条件在查询店铺接口做点修改<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure></p><p>条件2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shop.getId();</span><br><span class="line">    <span class="keyword">if</span> (id==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺id不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.更新数据库</span></span><br><span class="line">    updateById(shop);</span><br><span class="line">    <span class="comment">//2.删除缓存</span></span><br><span class="line">    stringRedisTemplate.delete(CACHE_SHOP_KEY + shop.getId());</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p>缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库<br>常见的解决方案有两种：<br>1.缓存空对象<br>优点：实现简单，维护方便<br>缺点：<br>    额外的内存消耗<br>    可能造成短期的不一致<br>如图所示<br><img src='https://pic.imgdb.cn/item/6619059d68eb9357137a69e1.png'></p><p>2.布隆过滤<br>优点：内存占用较少，没有多余key<br>缺点：<br>    实现复杂<br>    存在误判可能<br>如图所示<br><img src='https://pic.imgdb.cn/item/661905e268eb9357137ae3dd.png'></p><h2 id="解决查询商铺信息的缓存穿透"><a href="#解决查询商铺信息的缓存穿透" class="headerlink" title="解决查询商铺信息的缓存穿透"></a>解决查询商铺信息的缓存穿透</h2><p><img src='https://pic.imgdb.cn/item/6619090468eb9357137ffea3.png'></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">     <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">     <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">     <span class="comment">//2.判断是否存在</span></span><br><span class="line">     <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">         <span class="comment">//3.存在，直接返回</span></span><br><span class="line">         <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">         <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//判断命中的是否是空值</span></span><br><span class="line">     <span class="keyword">if</span> (shopJson!=<span class="literal">null</span>)&#123;   <span class="comment">// &#x27;&#x27;并不为null  null前面的if条件语句判断了</span></span><br><span class="line">         <span class="comment">//返回一个错误信息</span></span><br><span class="line">         <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺信息不存在&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//4.不存在，根据id查询数据库</span></span><br><span class="line">     <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">     <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">     <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">//将空值写入redis</span></span><br><span class="line">         stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>,CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">         <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//6.存在，写入redis</span></span><br><span class="line">     stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">     <span class="comment">//7.返回</span></span><br><span class="line">     <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>缓存穿透的解决方案有哪些？<br>缓存null值(主)<br>布隆过滤(主)<br>增强id的复杂度，避免被猜测id规律<br>做好数据的基础格式校验<br>加强用户权限校验<br>做好热点参数的限流</p><h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p><img src='https://pic.imgdb.cn/item/66190d6968eb935713857a15.png'><br>解决方案：<br>给不同的Key的TTL添加随机值   我采用random这个类解决。 然后添加到redis设置过期时间那里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">TLL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>-<span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>利用Redis集群提高服务的可用性<br>给缓存业务添加降级限流策略<br>给业务添加多级缓存</p><h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><p>缓存击穿问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><p><img src='https://pic.imgdb.cn/item/6619153568eb935713906103.png'><br>常见的解决方案有两种:<br>1.互斥锁<br><img src='https://pic.imgdb.cn/item/6619156068eb935713908251.png'></p><p>2.逻辑过期<br><img src='https://pic.imgdb.cn/item/6619158368eb93571390a85f.png'></p><p>两种方法根据业务需求来选择（CAP理论）是要强一致性还是要可用性<br>如图是两种方法对比<br><img src='https://pic.imgdb.cn/item/661915a268eb93571390c00b.png'></p><h2 id="基于互斥锁方式解决缓存击穿问题"><a href="#基于互斥锁方式解决缓存击穿问题" class="headerlink" title="基于互斥锁方式解决缓存击穿问题"></a>基于互斥锁方式解决缓存击穿问题</h2><p>需求：修改根据id查询商铺的业务，基于互斥锁方式来解决缓存击穿问题</p><p><img src='https://pic.imgdb.cn/item/6619ea4d68eb935713af0e19.png'></p><p>将缓存穿透处理方法提取出来<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓存穿透</span></span><br><span class="line">  <span class="keyword">public</span> Shop <span class="title function_">queryWithPassThrough</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">      <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">      <span class="comment">//2.判断是否存在</span></span><br><span class="line">      <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">          <span class="comment">//3.存在，直接返回</span></span><br><span class="line">          <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断命中的是否是空值</span></span><br><span class="line">      <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">//返回一个错误信息</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//4.不存在，根据id查询数据库</span></span><br><span class="line">      <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">      <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">      <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">//将空值写入redis</span></span><br><span class="line">          stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//6.存在，写入redis</span></span><br><span class="line">      stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">      <span class="comment">//7.返回</span></span><br><span class="line">      <span class="keyword">return</span> shop;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>设置互斥锁 抢锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, LOCK_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(flag); <span class="comment">//避免空指针</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>释放锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">       stringRedisTemplate.delete(key);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>解决缓存击穿的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">       <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">       <span class="comment">//2.判断是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">           <span class="comment">//3.存在，直接返回</span></span><br><span class="line">           <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//判断命中的是否是空值</span></span><br><span class="line">       <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//返回一个错误信息</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.实现缓存重建</span></span><br><span class="line">       <span class="comment">//4.1 获取互斥锁</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">lockkey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">       <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockkey);</span><br><span class="line">           <span class="comment">//4.2判断是否获取成功</span></span><br><span class="line">           <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">               <span class="comment">//4.3失败，则休眠并重试</span></span><br><span class="line">               Thread.sleep(<span class="number">50</span>);</span><br><span class="line">               <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.4成功，根据id查询数据库</span></span><br><span class="line">           shop = getById(id);</span><br><span class="line">           <span class="comment">//模拟重建的延时</span></span><br><span class="line">           Thread.sleep(<span class="number">200</span>);</span><br><span class="line">           <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">           <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="comment">//将空值写入redis</span></span><br><span class="line">               stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//6.存在，写入redis</span></span><br><span class="line">           stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//7.释放互斥锁</span></span><br><span class="line">           unlock(lockkey);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//8.返回</span></span><br><span class="line">       <span class="keyword">return</span> shop;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">     <span class="comment">//缓存穿透</span></span><br><span class="line">     <span class="comment">//Shop shop = queryWithPassThrough(id);</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//互斥锁解决缓存击穿</span></span><br><span class="line">     <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> queryWithMutex(id);</span><br><span class="line">     <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="基于逻辑过期方式解决缓存击穿问题"><a href="#基于逻辑过期方式解决缓存击穿问题" class="headerlink" title="基于逻辑过期方式解决缓存击穿问题"></a>基于逻辑过期方式解决缓存击穿问题</h2><p>需求：修改根据id查询商铺的业务，基于逻辑过期方式来解决缓存击穿问题<br><img src='https://pic.imgdb.cn/item/6619f58c68eb935713c3cb35.png'></p><p>创建一个新的类，防止修改原来的类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisData</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime; <span class="comment">//过期时间</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//万能存数据的属性如可以存shop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>提前设置数据，封装逻辑过期时间<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveShop2Redis</span><span class="params">(Long id,Long expireSeconds)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//1.查询店铺数据</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="comment">//2.封装逻辑过期时间</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    redisData.setData(shop);</span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));</span><br><span class="line">    <span class="comment">//3.写入Redis</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HmDianPingApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ShopServiceImpl shopService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSaveShop</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        shopService.saveShop2Redis(<span class="number">1L</span>,<span class="number">10L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService CACHE_REBUILD_EXECUTOR= Executors.newFixedThreadPool(<span class="number">10</span>);<span class="comment">//线程池，开启10个线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Shop <span class="title function_">queryWithLogicalExpire</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">        <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(shopJson)) &#123;</span><br><span class="line">            <span class="comment">//3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.命中，需要先把json反序列化为对象</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, RedisData.class);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(data, Shop.class);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="comment">//5.判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="comment">//5.1.未过期，直接返回店铺信息</span></span><br><span class="line">            <span class="keyword">return</span> shop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.2.已过期，需要缓存重建</span></span><br><span class="line">        <span class="comment">//6.缓存重建</span></span><br><span class="line">        <span class="comment">//6.1.获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">//6.2.判断是否获取锁成功</span></span><br><span class="line">        <span class="keyword">if</span> (isLock)&#123;</span><br><span class="line">            <span class="comment">//6.3.成功，开启独立线程，实现缓存重建</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//重建缓存</span></span><br><span class="line">                    <span class="built_in">this</span>.saveShop2Redis(id,<span class="number">20L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.4.返回过期的商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="缓存工具类"><a href="#缓存工具类" class="headerlink" title="缓存工具类"></a>缓存工具类</h1><p>基于StringRedisTemplate封装一个缓存工具类，满足下列需求：<br>方法1：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间<br>方法2：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理缓存击穿问题<br>方法3：根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题<br>方法4：根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheClient</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicalExpire</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="comment">//设置逻辑过期</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">        redisData.setData(value);</span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));</span><br><span class="line">        <span class="comment">//写入Redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存穿透</span></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">Json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(Json)) &#123;</span><br><span class="line">            <span class="comment">//3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(Json, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断命中的是否是空值</span></span><br><span class="line">        <span class="keyword">if</span> (Json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//返回一个错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.不存在，根据id查询数据库</span></span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">        <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//将空值写入redis</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.存在，写入redis</span></span><br><span class="line">        <span class="built_in">this</span>.set(key, r, time, unit);</span><br><span class="line">        <span class="comment">//7.返回</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);<span class="comment">//线程池，开启10个线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(json)) &#123;</span><br><span class="line">            <span class="comment">//3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.命中，需要先把json反序列化为对象</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean(data, type);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="comment">//5.判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">//5.1.未过期，直接返回店铺信息</span></span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.2.已过期，需要缓存重建</span></span><br><span class="line">        <span class="comment">//6.缓存重建</span></span><br><span class="line">        <span class="comment">//6.1.获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">//6.2.判断是否获取锁成功</span></span><br><span class="line">        <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">            <span class="comment">//6.3.成功，开启独立线程，实现缓存重建</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//查数据库</span></span><br><span class="line">                    <span class="type">R</span> <span class="variable">r1</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">                    <span class="comment">//写入redis</span></span><br><span class="line">                    <span class="built_in">this</span>.setWithLogicalExpire(key, r1, time, unit);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.4.返回过期的商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, LOCK_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(flag); <span class="comment">//避免空指针</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">      <span class="comment">//缓存穿透</span></span><br><span class="line">      <span class="comment">//Shop shop = cacheClient.queryWithPassThrough(CACHE_SHOP_KEY,id,Shop.class,this::getById,CACHE_SHOP_TTL,TimeUnit.MINUTES);</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//互斥锁解决缓存击穿</span></span><br><span class="line">      <span class="comment">//Shop shop = queryWithMutex(id);</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//逻辑过期解决缓存击穿</span></span><br><span class="line">      <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span>cacheClient</span><br><span class="line">              .queryWithLogicalExpire(CACHE_SHOP_KEY,id,Shop.class,<span class="built_in">this</span>::getById,CACHE_SHOP_TTL,TimeUnit.MINUTES) ;</span><br><span class="line">      <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h1 id="缓存总结"><a href="#缓存总结" class="headerlink" title="缓存总结"></a>缓存总结</h1><h2 id="认识缓存"><a href="#认识缓存" class="headerlink" title="认识缓存"></a>认识缓存</h2><p><img src='https://pic.imgdb.cn/item/661a025e68eb935713d9aaf7.png'></p><h2 id="缓存更新策略-1"><a href="#缓存更新策略-1" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h2><p><img src='https://pic.imgdb.cn/item/661a028068eb935713d9eb6f.png'></p><p><img src='https://pic.imgdb.cn/item/661a02cf68eb935713da830b.png'></p><h2 id="缓存穿透-1"><a href="#缓存穿透-1" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p><img src='https://pic.imgdb.cn/item/661a02ec68eb935713dab8fd.png'></p><h2 id="缓存雪崩-1"><a href="#缓存雪崩-1" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p><img src='https://pic.imgdb.cn/item/661a030368eb935713dadc3f.png'></p><h2 id="缓存击穿-1"><a href="#缓存击穿-1" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p><img src='https://pic.imgdb.cn/item/661a032c68eb935713dc3453.png'></p><p><img src='https://pic.imgdb.cn/item/661a034268eb935713dd21b1.png'></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis实战项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马点评-bug集合</title>
      <link href="/posts/b1dedc50.html"/>
      <url>/posts/b1dedc50.html</url>
      
        <content type="html"><![CDATA[<h1 id="短信登录bug"><a href="#短信登录bug" class="headerlink" title="短信登录bug"></a>短信登录bug</h1><p>idea连接不到redis<br>启动redis中出现这个警告<br>Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</p><p>描述的是找不到配置文件，我们需要指定相应的配置文件<br>在cmd中redis-server.exe redis.windows-service.conf或者redis-server.exe redis.windows.conf<br>看自己redis配置在哪个文件下就启动哪个配置文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> 黑马点评-bug-redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马点评-短信登录-redis</title>
      <link href="/posts/ac89d550.html"/>
      <url>/posts/ac89d550.html</url>
      
        <content type="html"><![CDATA[<h1 id="导入黑马点评项目"><a href="#导入黑马点评项目" class="headerlink" title="导入黑马点评项目"></a>导入黑马点评项目</h1><p>首先，导入课前资料提供的SQL文件：<br><img src='https://pic.imgdb.cn/item/6617ded968eb935713e063d6.png'></p><p>注意：Mysql的版本采用5.7及以上版本</p><p>其中的表有：<br>tb_user：用户表<br>tb_user_info：用户详情表<br>tb_shop：商户信息表<br>tb_shop_type：商户类型表<br>tb_blog：用户日记表（达人探店日记）<br>tb_follow：用户关注表<br>tb_voucher：优惠券表<br>tb_voucher_order：优惠券的订单表</p><p>结构模式<br><img src='https://pic.imgdb.cn/item/6617df1468eb935713e11c70.png'></p><h2 id="导入后端项目"><a href="#导入后端项目" class="headerlink" title="导入后端项目"></a>导入后端项目</h2><p>1.将hm-dianping导入idea<br>2.将数据资源改为自己的，mysql，redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: hmdp</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/hm_dianping?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    username: root</span><br><span class="line">    password: rongyao1314</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">    password: rongyao1314</span><br><span class="line">    lettuce:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: <span class="number">10</span></span><br><span class="line">        max-idle: <span class="number">10</span></span><br><span class="line">        min-idle: <span class="number">1</span></span><br><span class="line">        time-between-eviction-runs: 10s</span><br><span class="line">  jackson:</span><br><span class="line">    <span class="keyword">default</span>-property-inclusion: non_null # JSON处理时忽略非空字段</span><br></pre></td></tr></table></figure><p>redis-server：启动redis</p><p>启动项目后，在浏览器访问：<a href="http://localhost:8081/shop-type/list">http://localhost:8081/shop-type/list</a> ，如果可以看到数据则证明运行没有问题</p><h2 id="导入前端项目"><a href="#导入前端项目" class="headerlink" title="导入前端项目"></a>导入前端项目</h2><p>将ngix导入没有中文下面的文件夹下，启动ngix  输入命令：start nginx.exe或点图标<br>然后访问: <a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a> ，即可看到页面<br><img src='https://pic.imgdb.cn/item/6617e06668eb935713e3b684.png'></p><h1 id="基于Session实现登录"><a href="#基于Session实现登录" class="headerlink" title="基于Session实现登录"></a>基于Session实现登录</h1><p><img src='https://pic.imgdb.cn/item/6617fb7168eb93571305f922.png'></p><h2 id="发送短信验证码"><a href="#发送短信验证码" class="headerlink" title="发送短信验证码"></a>发送短信验证码</h2><p><img src='https://pic.imgdb.cn/item/661800ac68eb9357130cacd9.png'></p><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送手机验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//发送短信验证码并保存验证码</span></span><br><span class="line">    <span class="keyword">return</span>  userService.sendCode(phone,session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 发送短信验证码并保存验证码</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span>;</span><br></pre></td></tr></table></figure><p>实现service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 发送短信验证码并保存验证码</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">      <span class="comment">//1.校验手机号</span></span><br><span class="line">      <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">          <span class="comment">//2.如果不符合，返回错误信息</span></span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//3.符合，生成验证码</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);  <span class="comment">//第三方类生成</span></span><br><span class="line">      <span class="comment">//4.保存验证码到session</span></span><br><span class="line">      session.setAttribute(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line">      <span class="comment">//5.发送验证码</span></span><br><span class="line">      log.debug(<span class="string">&quot;发送短信验证码成功，验证码&#123;&#125;&quot;</span>,code);</span><br><span class="line">      <span class="comment">//返回ok</span></span><br><span class="line">      <span class="keyword">return</span> Result.ok();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="短信验证码登录，注册"><a href="#短信验证码登录，注册" class="headerlink" title="短信验证码登录，注册"></a>短信验证码登录，注册</h2><p><img src='https://pic.imgdb.cn/item/661807f968eb935713184e87.png'></p><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 登录功能</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> loginForm 登录参数，包含手机号、验证码；或者手机号、密码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginFormDTO loginForm, HttpSession session)</span>&#123;</span><br><span class="line">       <span class="comment">//实现登录功能</span></span><br><span class="line">       <span class="keyword">return</span> userService.login(loginForm,session);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>servicer接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 短信验证码登录</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> loginForm</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span>;</span><br></pre></td></tr></table></figure><p>实现service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 短信验证码登录</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> loginForm</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">       <span class="comment">//1.校验手机号</span></span><br><span class="line">       <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">           <span class="comment">//2.如果不符合，返回错误信息</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//2.校验验证码</span></span><br><span class="line">       <span class="type">Object</span> <span class="variable">Cachecode</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">       <span class="keyword">if</span> (Cachecode == <span class="literal">null</span> || !Cachecode.toString().equals(code)) &#123;</span><br><span class="line">           <span class="comment">//3.不一致，报错</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.一致，根据手机号查询用户 select * from tb_user wher phone=?</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line">       <span class="comment">//5.判断用户是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//6.不存在，创建新用户并保存</span></span><br><span class="line">           user = createUserWithPhone(phone);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//7.保存用户信息到session中</span></span><br><span class="line">       session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">       <span class="keyword">return</span> Result.ok();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建新用户</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> User <span class="title function_">createUserWithPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">       <span class="comment">//1.创建用户</span></span><br><span class="line">       User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setPhone(phone);</span><br><span class="line">       user.setNickName(USER_NICK_NAME_PREFIX+RandomUtil.randomString(<span class="number">10</span>));</span><br><span class="line">       <span class="comment">//2.保存用户</span></span><br><span class="line">       save(user);</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="登录验证功能"><a href="#登录验证功能" class="headerlink" title="登录验证功能"></a>登录验证功能</h2><p>请求并携带cookie 画圈的就是登录凭证<br><img src='https://pic.imgdb.cn/item/6618115a68eb93571324b8d1.png'></p><p>拦截器：减少登录校验，只有登录才能访问其他的，在拦截器中写登录校验的方法<br><img src='https://pic.imgdb.cn/item/6618119068eb935713250b52.png'></p><p>拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">//调用时间：Controller方法处理之前</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//2.获取session中的用户</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">//3.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//4.不存在，拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.存在，保存用户信息到ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser((User) user);</span><br><span class="line">        <span class="comment">//6.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">//调用时间：DispatcherServlet进行视图的渲染之后</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//移除用户</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将拦截器注册到配置中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">       registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">               .excludePathPatterns(</span><br><span class="line">                       <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">               );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ThreadLocal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;User&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        tl.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细用户界面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/me&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">me</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//获取当前登录的用户并返回</span></span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">      <span class="keyword">return</span> Result.ok(user);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="隐藏用户敏感信息"><a href="#隐藏用户敏感信息" class="headerlink" title="隐藏用户敏感信息"></a>隐藏用户敏感信息</h1><p>由于后端传入的数据直接是Uer数据,我们创建了UserDto类只传入用户的部分数据上去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将session中的存入的数据类型修改为UserDto和ThreadLocal中的方法数据类型也修改为UserDto类型</p><h1 id="集群的session共享问题"><a href="#集群的session共享问题" class="headerlink" title="集群的session共享问题"></a>集群的session共享问题</h1><p>session共享问题：多台Tomcat并不共享session存储空间，当请求切换到不同tomcat服务时导致数据丢失的问题。</p><p><img src='https://pic.imgdb.cn/item/6618911c68eb935713bba321.png'><br>session的替代方案应该满足：<br>数据共享<br>内存存储<br>key、value结构</p><h1 id="基于Redis实现共享session登录"><a href="#基于Redis实现共享session登录" class="headerlink" title="基于Redis实现共享session登录"></a>基于Redis实现共享session登录</h1><p>保存登录的用户信息，可以使用String结构，以JSON字符串来保存，比较直观：<br><img src='https://pic.imgdb.cn/item/6618949268eb935713c0ce1b.png'></p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD，并且内存占用更少：<br><img src='https://pic.imgdb.cn/item/661894a368eb935713c0e514.png'></p><p>各个阶段修改的地方<br><img src='https://pic.imgdb.cn/item/661894d568eb935713c12e44.png'></p><p><img src='https://pic.imgdb.cn/item/661894e568eb935713c145b7.png'></p><p>redis数据要保证：唯一性，方便提取</p><h2 id="发送短信验证码-1"><a href="#发送短信验证码-1" class="headerlink" title="发送短信验证码"></a>发送短信验证码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">      ......</span><br><span class="line">       <span class="comment">//4.保存验证码到redis //set key value ex 120  设置超时时间防止redis挂掉</span></span><br><span class="line">      stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY+phone,code,LOGIN_CODE_TTL, TimeUnit.MINUTES); <span class="comment">//跟其他业务可以区分开</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="短信验证码登录、注册"><a href="#短信验证码登录、注册" class="headerlink" title="短信验证码登录、注册"></a>短信验证码登录、注册</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">       <span class="comment">//1.校验手机号</span></span><br><span class="line">       <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">           <span class="comment">//2.如果不符合，返回错误信息</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//3.从redis获取校验验并校验</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">Cachecode</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);</span><br><span class="line">       <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">       <span class="keyword">if</span> (Cachecode == <span class="literal">null</span> || !Cachecode.equals(code)) &#123;</span><br><span class="line">           <span class="comment">//不一致，报错</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.一致，根据手机号查询用户 select * from tb_user wher phone=?</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line">       <span class="comment">//5.判断用户是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//6.不存在，创建新用户并保存</span></span><br><span class="line">           user = createUserWithPhone(phone);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//7.保存用户信息到redis中</span></span><br><span class="line">       <span class="comment">//7.1 随机生成token，作为登录令牌</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line">       <span class="comment">//7.2将User对象转为HashMap存储</span></span><br><span class="line">       <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">       Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(),</span><br><span class="line">               CopyOptions.create()</span><br><span class="line">                       .setIgnoreNullValue(<span class="literal">true</span>)</span><br><span class="line">                       .setFieldValueEditor((fieldName, fieldValue) -&gt; fieldValue.toString()));  <span class="comment">//因为有字段是Long类型而stringRedisTemplate要求的字段都是string类型的</span></span><br><span class="line">       <span class="comment">//7.3 存储</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">       stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);</span><br><span class="line">       <span class="comment">//7.4 设置token有效期</span></span><br><span class="line">       stringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">       <span class="comment">//8. 返回token</span></span><br><span class="line">       <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>登录拦截器修改  由Spring构建的类才能够依赖注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">LoginInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//1.获取请求头中的token</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (StrUtil.isBlank(token))&#123;</span><br><span class="line">           <span class="comment">//不存在，拦截,返回401状态码</span></span><br><span class="line">           response.setStatus(<span class="number">401</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       String key=LOGIN_USER_KEY+ token;</span><br><span class="line">       <span class="comment">//2.基于TOKEN获取redis中的用户</span></span><br><span class="line">       Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (userMap.isEmpty())&#123;</span><br><span class="line">           <span class="comment">//4.不存在，拦截</span></span><br><span class="line">           response.setStatus(<span class="number">401</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//5.将查询到的Hash数据转为UserDto对象</span></span><br><span class="line">       <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">       <span class="comment">//6.存在，保存用户信息到ThreadLocal</span></span><br><span class="line">       UserHolder.saveUser(userDTO);</span><br><span class="line">       <span class="comment">//7.刷新token有效期</span></span><br><span class="line">       stringRedisTemplate.expire(key,LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">       <span class="comment">//8..放行</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">       registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>(stringRedisTemplate))</span><br><span class="line">               .excludePathPatterns(</span><br><span class="line">                       <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">               );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登录拦截器优化"><a href="#登录拦截器优化" class="headerlink" title="登录拦截器优化"></a>登录拦截器优化</h2><p>因为token有效期有限，如果用户一直在首页的话（没有经过拦截器）就不会刷新token有效期，会导致token过期，让用户体验不好<br><img src='https://pic.imgdb.cn/item/6618b7fe68eb935713033a83.png'></p><p>刷新token的拦截器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefreshTokenInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String key=LOGIN_USER_KEY+ token;</span><br><span class="line">        <span class="comment">//2.基于TOKEN获取redis中的用户</span></span><br><span class="line">        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.判断用户是否存在</span></span><br><span class="line">         <span class="keyword">if</span> (userMap.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//4.不存在，拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.将查询到的Hash数据转为UserDto对象</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//6.存在，保存用户信息到ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line">        <span class="comment">//7.刷新token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(key,LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//8..放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//移除用户</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>登录拦截器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.判断是否需要拦截(ThreadLocal中是否有用户)</span></span><br><span class="line">        <span class="keyword">if</span> (UserHolder.getUser()==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//没有，需要拦截，设置状态码</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="comment">//拦截</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>配置器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">       <span class="comment">//登录拦截器  order值越小越先执行</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">               .excludePathPatterns(</span><br><span class="line">                       <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">               ).order(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//token刷新的拦截器</span></span><br><span class="line">       registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">RefreshTokenInterceptor</span>(stringRedisTemplate)).addPathPatterns(<span class="string">&quot;/**&quot;</span>).order(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis实战项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis面试</title>
      <link href="/posts/18180af4.html"/>
      <url>/posts/18180af4.html</url>
      
        <content type="html"><![CDATA[<h1 id="总概括"><a href="#总概括" class="headerlink" title="总概括"></a>总概括</h1><p><img src='https://s21.ax1x.com/2024/04/11/pFXtlND.png'></p><p><img src='https://s21.ax1x.com/2024/04/11/pFXt89H.png'></p><h1 id="redis使用场景"><a href="#redis使用场景" class="headerlink" title="redis使用场景"></a>redis使用场景</h1><u>我看你做的项目中，都用到了redis，你在最近的项目中哪些场景使用了redis呢？</u><p>一是验证你的项目场景的真实性，二是为了作为深入发问的切入点<br>缓存  缓存三兄弟（穿透、击穿、雪崩）、双写一致、持久化、数据过期策略，数据淘汰策略<br>分布式锁  setnx、redisson<br>消息队列、延迟队列  何种数据类型<br><u>如果发生了缓存穿透、击穿、雪崩，该如何解决？</u></p><h2 id="缓存三兄弟"><a href="#缓存三兄弟" class="headerlink" title="缓存三兄弟"></a>缓存三兄弟</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>例：<br>一个get请求：api/news/getById/1   -1更明显（出错点，恶意攻击DB）<br><img src='https://s21.ax1x.com/2024/04/11/pFXNws1.png'></p><p>缓存穿透：查询一个不存在的数据，mysql查询不到数据也不会直接写入缓存，就会导致每次请求都查数据库<br>解决方案一：缓存空数据，查询返回的数据为空，仍把这个空结果进行缓存   {key:1,value:null}<br>优点：简单<br>缺点：消耗内存，可能会发生不一致的问题(我们将空结果缓存到redis中，如果该请求的时候数据新增了，不再是空数据的时候，这时候就会发送DB和redis数据不一致的问题)</p><p><img src='https://s21.ax1x.com/2024/04/11/pFXN6iD.png'><br>解决方案二：布隆过滤器<br>优点：内存占用较少，没有多余key<br>缺点：实现复杂，存在误判(必定存在误判的)</p><h4 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h4><p>bitmap（位图）：相当于是一个以（bit）位为单位的数组，数组中每个单元只能存储二进制数0或1<br>布隆过滤器作用：布隆过滤器可以用于检索一个元素是否在一个集合中。<br><img src='https://s21.ax1x.com/2024/04/11/pFXNgRH.png'></p><p>误差存在情况<br><img src='https://s21.ax1x.com/2024/04/11/pFXNqzj.png'><br>误判率：数组越小误判率就越大，数组越大误判率就越小，但是同时带来了更多的内存消耗。</p><p>实现布隆过滤器<br><img src='https://s21.ax1x.com/2024/04/11/pFXNXyn.png'></p><p>问答例子：<br><img src='https://s21.ax1x.com/2024/04/11/pFXUMfe.png'></p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿：给某一个key设置了过期时间，当key过期的时候，恰好这时间点对这个key有大量的并发请求过来，这些并发的请求可能会瞬间把DB压垮.如图所示：<br><img src='https://pic.imgdb.cn/item/6617c3ba68eb935713a809ed.png'></p><p>解决方案一：互斥锁<br>解决方案二：逻辑过期</p><p>互斥锁：<img src='https://pic.imgdb.cn/item/6617c42468eb935713a8e62c.png'><br>可以保证强一致性，但性能差</p><p>逻辑过期：<img src='https://pic.imgdb.cn/item/6617c49068eb935713a9d244.png'><br>高可用，性能优，不能保证数据绝对一致</p><p>面试：<img src='https://pic.imgdb.cn/item/6617c54868eb935713aaf65a.png'></p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。<br><img src='https://pic.imgdb.cn/item/6617c78a68eb935713ada779.png'><br>给不同的Key的TTL添加随机值 (设置不同的过期时间)</p><p>当redis宕机时候的解决方案：<br>利用Redis集群提高服务的可用性   哨兵模式、集群模式<br>给缓存业务添加降级限流策略    ngxin或spring cloud gateway   （保底策略，穿透，击穿都可以用）<br>给业务添加多级缓存  Guava或Caffeine</p><p>面试：<br><img src='https://pic.imgdb.cn/item/6617c83868eb935713af483c.png'></p><p>记忆技巧<br><img src='https://pic.imgdb.cn/item/6617c85668eb935713af9c65.png'></p><h2 id="双写一致性"><a href="#双写一致性" class="headerlink" title="双写一致性"></a>双写一致性</h2><p>分为两种情况：1.一致性要求高  2.允许延迟一致</p><p>后续再更新，超标了，等做个项目来，头疼<br><img src='https://pic.imgdb.cn/item/6617d19c68eb935713c5df9b.gif'></p><p>… …</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学成在线项目(八) 课程发布模块</title>
      <link href="/posts/12dbdeec.html"/>
      <url>/posts/12dbdeec.html</url>
      
        <content type="html"><![CDATA[<h2 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h2><h4 id="定义课程预览接口"><a href="#定义课程预览接口" class="headerlink" title="定义课程预览接口"></a>定义课程预览接口</h4><div class="tip info"><p>1、请求参数接口进行分析：传入课程id，表示要预览哪一门课程。<br>2、响应结果输出课程详情页面到浏览器。<br>响应页面到浏览器使用freemarker模板引擎技术实现，首先从课程资料目录下获取课程预览页面course_template.html，拷贝至内容管理的接口工程的resources/templates下，并将其在本目录复制一份命名为course_template.ftl </p></div><p>开始定义接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 课程预览，发布</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/9 16:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoursePublishController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CoursePublishService coursePublishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/coursepreview/&#123;courseId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">preview</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">//查询课程的信息作为模型数据</span></span><br><span class="line">        <span class="type">CoursePreviewDto</span> <span class="variable">coursePreviewDto</span> <span class="operator">=</span>coursePublishService.getCoursePreviewInfo(courseId);</span><br><span class="line">        <span class="comment">//指定模型</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;model&quot;</span>,coursePreviewDto);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;course_template&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>测试：访问<a href="http://localhost:63040/content/coursepreview/74">http://localhost:63040/content/coursepreview/74</a><br>访问页面内容没有样式，稍后做处理</p><h3 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h3><div class="tip cogs"><p>样式静态资源全在门户下，我们需要由Nginx反向代理访问课程预览接口，通过门户的URL去访问课程预览。</p><p>1、在Nginx下配置：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#后台网关</span><br><span class="line"> upstream gatewayserver&#123;</span><br><span class="line">   server 127.0.0.1:63010 weight=10;</span><br><span class="line"> &#125; </span><br><span class="line"> server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  www.51xuecheng.cn localhost;</span><br><span class="line">       ....</span><br><span class="line">       #api</span><br><span class="line">       location /api/ &#123;</span><br><span class="line">               proxy_pass http://gatewayserver/;</span><br><span class="line">       &#125; </span><br></pre></td></tr></table></figure><br>2配置完后重新加载nginx<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s reload</span><br></pre></td></tr></table></figure><br>3、启动微服务网关<br>4、此时访问新地址： <a href="http://www.51xuecheng.cn/api/content/coursepreview/74">http://www.51xuecheng.cn/api/content/coursepreview/74</a> </p></div><p>页面虽然正常，但是里边的内容都是静态内容，稍后接口层调用service方式获取模型数据并进行页面渲染。<br>目前的方式是通过Nginx访问网关，由网关再将请求转发到微服务，Nginx是整个的项目最前方的代理服务器，如下图：<br><img src='https://s21.ax1x.com/2024/04/09/pFOmUN6.png'></p><h2 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h2><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>课程预览就是把课程基本信息、营销信息、课程计划、师资等课程的相关信息进行整合，在预览页面进行展示。如下图：<br><img src='https://s21.ax1x.com/2024/04/09/pFOmw9O.png'><br>在使用freemarker渲染生成视图时需要数据模型，此数据模型包括了基本信息、营销信息、课程计划、师资等信息。<br>所以首先定义一个数据模型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 课程预览数据模型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Data</span></span><br><span class="line"> <span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoursePreviewDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//课程基本信息,课程营销信息</span></span><br><span class="line">    CourseBaseInfoDto courseBase;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//课程计划信息</span></span><br><span class="line">    List&lt;TeachplanDto&gt; teachplans;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//师资信息暂时不加...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h3><p>Service负责从数据库查询基本信息、营销信息、课程计划等课程相关信息，组成CoursePreviewDto 对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 课程预览、发布接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CoursePublishService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span> 获取课程预览信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> courseId 课程id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> com.xuecheng.content.model.dto.CoursePreviewDto</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">   <span class="keyword">public</span> CoursePreviewDto <span class="title function_">getCoursePreviewInfo</span><span class="params">(Long courseId)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接口实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoursePublishServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CoursePublishService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CourseBaseInfoService courseBaseInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TeachplanService teachplanService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CoursePreviewDto <span class="title function_">getCoursePreviewInfo</span><span class="params">(Long courseId)</span> &#123;</span><br><span class="line">        <span class="type">CoursePreviewDto</span> <span class="variable">coursePreviewDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoursePreviewDto</span>();</span><br><span class="line">        <span class="comment">//课程基本信息，营销信息</span></span><br><span class="line">        <span class="type">CourseBaseInfoDto</span> <span class="variable">courseBaseInfo</span> <span class="operator">=</span> courseBaseInfoService.getCourseBaseInfo(courseId);</span><br><span class="line">        coursePreviewDto.setCourseBase(courseBaseInfo);</span><br><span class="line">        <span class="comment">//课程计划信息</span></span><br><span class="line">        List&lt;TeachplanDto&gt; teachplanTree = teachplanService.findTeachplanTree(courseId);</span><br><span class="line">        coursePreviewDto.setTeachplans(teachplanTree);</span><br><span class="line">        <span class="keyword">return</span> coursePreviewDto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="接口层完善"><a href="#接口层完善" class="headerlink" title="接口层完善"></a>接口层完善</h3><p>接口层Controller调用Service方法获取模板引擎需要的模型数据 前面的接口已经是完善的了</p><h3 id="前后端联调"><a href="#前后端联调" class="headerlink" title="前后端联调"></a>前后端联调</h3><p>原来前端直接指向后台网关地址，现在要更改为Nginx的地址，如下：<br><img src='https://s21.ax1x.com/2024/04/09/pFOn9bR.png'><br>重启前端工程，进入课程列表点击”预览”按钮，正常打开课程预览页面</p><h3 id="编写模板"><a href="#编写模板" class="headerlink" title="编写模板"></a>编写模板</h3><p>模型数据准备好后下一步将模型数据填充到course_template.ftl上，填充时注意不要一次填充太多，一边填充一边刷新调试。<br>freemarker提供很多指令用于解析各种类型的数据模型，<br>参考地址：<a href="http://freemarker.foofun.cn/ref_directives.html">http://freemarker.foofun.cn/ref_directives.html</a><br>修改模板后需要编译，如下图：<br><img src='https://s21.ax1x.com/2024/04/09/pFOnMVI.png'></p><h3 id="视频播放页面接口"><a href="#视频播放页面接口" class="headerlink" title="视频播放页面接口"></a>视频播放页面接口</h3><p>从课程详情页面进入视频播放页面，如下图：<br><img src='https://s21.ax1x.com/2024/04/09/pFOn8G8.png'><br>在此页面需要从后台获取课程信息、根据课程计划获取对应的视频地址，下边编写这两个接口：<br>获取课程信息接口：/open/content/course/whole/{courseId} 响应：同课程预览service接口返回数据</p><p>根据课程计划获取视频地址接口：/open/media/preview/{mediaId}<br>响应：{“code”:0,”msg”:”success”,”result”:”视频的url”,”successful”:true}</p><p>在nginx配置如下地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#openapi</span></span><br><span class="line">location /open/content/ &#123;</span><br><span class="line">        proxy_pass http://gatewayserver/content/open/;</span><br><span class="line">&#125; </span><br><span class="line">location /open/media/ &#123;</span><br><span class="line">        proxy_pass http://gatewayserver/media/open/;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>配置运行nginx.exe -s reload加载nginx的配置文件 </p><p>在内容管理接口层定义CourseOpenController类，<br>并定义接口：获取课程信息接口：/open/content/course/whole/{courseId}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(value = &quot;课程公开查询接口&quot;,tags = &quot;课程公开查询接口&quot;)</span></span><br><span class="line"> <span class="meta">@RestController</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/open&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseOpenController</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> CourseBaseInfoService courseBaseInfoService;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> CoursePublishService coursePublishService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/course/whole/&#123;courseId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CoursePreviewDto <span class="title function_">getPreviewInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span> &#123;</span><br><span class="line">    <span class="comment">//获取课程预览信息</span></span><br><span class="line">    <span class="type">CoursePreviewDto</span> <span class="variable">coursePreviewInfo</span> <span class="operator">=</span> coursePublishService.getCoursePreviewInfo(courseId);</span><br><span class="line">    <span class="keyword">return</span> coursePreviewInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在媒资管理服务media-api工程定义MediaOpenController类，并定义接口/open/media/preview/{mediaId}<br>理解：前端界面点击课程计划，会显示出视频。因为前端课程计划绑定了相应的媒资。会传递给后端相应的媒资id<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(value = &quot;媒资文件管理接口&quot;,tags = &quot;媒资文件管理接口&quot;)</span></span><br><span class="line"> <span class="meta">@RestController</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/open&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediaOpenController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  MediaFileService mediaFileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;预览文件&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/preview/&#123;mediaId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestResponse&lt;String&gt; <span class="title function_">getPlayUrlByMediaId</span><span class="params">(<span class="meta">@PathVariable</span> String mediaId)</span>&#123;</span><br><span class="line">        <span class="comment">//查询媒资文件信息</span></span><br><span class="line">        <span class="type">MediaFiles</span> <span class="variable">mediaFiles</span> <span class="operator">=</span> mediaFileService.getFileById(mediaId);</span><br><span class="line">       <span class="keyword">if</span> (mediaFiles==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> RestResponse.validfail(<span class="string">&quot;找不到视频&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//取出视频播放地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> mediaFiles.getUrl();</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isEmpty(url))&#123;</span><br><span class="line">           <span class="keyword">return</span> RestResponse.validfail(<span class="string">&quot;该视频正在处理中&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> RestResponse.success(mediaFiles.getUrl());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据媒资id查询文件信息</span></span><br><span class="line">    MediaFiles <span class="title function_">getFileById</span><span class="params">(String mediaId)</span>;</span><br></pre></td></tr></table></figure><br>实现service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> MediaFiles <span class="title function_">getFileById</span><span class="params">(String mediaId)</span> &#123;</span><br><span class="line">      <span class="type">MediaFiles</span> <span class="variable">mediaFiles</span> <span class="operator">=</span> mediaFilesMapper.selectById(mediaId);</span><br><span class="line">      <span class="keyword">return</span> mediaFiles;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>测试<br>定义好后，启动内容管理、媒资管理、后台服务网关服务，测试视频播放页面是否可以正常获取课程计划，点击具体的课程计划是否正常可以播放视频。</p><h1 id="课程审核"><a href="#课程审核" class="headerlink" title="课程审核"></a>课程审核</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h3><p>根据模块需求分析，课程发布前要先审核，审核通过方可发布。下图是课程审核及发布的流程图：<br><img src='https://s21.ax1x.com/2024/04/10/pFObbge.png'></p><div class="tip info"><p>为什么课程审核通过才可以发布呢？<br>这样做为了防止课程信息有违规情况，课程信息不完善对网站用户体验也不好，课程审核不仅起到监督作用，也是帮助教学机构规范使用平台的手段。<br>如何控制课程审核通过才可以发布课程呢？<br>在课程基本表course_base表设置课程审核状态字段，包括：未提交、已提交(未审核)、审核通过、审核不通过。</p></div><p>下边是课程状态的转化关系：<br><img src='https://s21.ax1x.com/2024/04/10/pFOq8bR.png'></p><div class="tip info"><p>说明如下：<br>1、一门课程新增后它的审核状为”未提交“，发布状态为”未发布“。<br>2、课程信息编辑完成，教学机构人员执行”提交审核“操作。此时课程的审核状态为”已提交“。<br>3、当课程状态为已提交时运营平台人员对课程进行审核。<br>4、运营平台人员审核课程，结果有两个：审核通过、审核不通过。<br>5、课程审核过后不管状态是通过还是不通过，教学机构可以再次修改课程并提交审核，此时课程状态为”已提交“。此时运营平台人员再次审核课程。<br>6、课程审核通过，教学机构人员可以发布课程，发布成功后课程的发布状态为”已发布“。<br>7、课程发布后通过”下架“操作可以更改课程发布状态为”下架“<br>8、课程下架后通过”上架“操作可以再次发布课程，上架后课程发布状态为“发布”。</p></div><h3 id="数据模型-1"><a href="#数据模型-1" class="headerlink" title="数据模型"></a>数据模型</h3><div class="tip key"><p>通过业务流程的分析，现在我们思考：<br>1、 <u>课程提交审核后还允许修改课程吗？</u><br>如果不允许修改是不合理的，因为提交审核后可以继续做下一个阶段的课程内容，比如添加课程计划，上传课程视频等。<br>如果允许修改那么课程审核时看到的课程内容从哪里来？如果也从课程基本信息表、课程营销表、课程计划表查询那么存在什么问题呢？</p></div><p>如下图：<br><img src='https://s21.ax1x.com/2024/04/10/pFOqWRS.png'><br>运营人员审核课程和教学机构编辑课程操作的数据是同一份，此时会导致冲突。比如：运营人员正在审核时教学机构把数据修改了。<br>为了解决这个问题，专门设计<u>课程预发布表</u> 。<br><img src='https://s21.ax1x.com/2024/04/10/pFOqfxg.png'></p><p>提交课程审核，将课程信息汇总后写入课程预发布表，课程预发布表记录了教学机构在某个时间点要发布的课程信息。<br>课程审核人员从预发布表查询信息进行审核。<br>课程审核的同时可以对课程进行修改，修改的内容不会写入课程预发布表。<br>课程审核通过执行课程发布，将课程预发布表的信息写入课程发布表。</p><p>2、<u>提交审核课程后，也修改了课程信息，可以再次提交审核吗？</u><br>这个问题在上边分析课程审核状态时已经有了答案，如下图：<br><img src='https://s21.ax1x.com/2024/04/10/pFOqTZn.png'><br>提交审核课程后，必须等到课程审核完成才可以再次提交课程。</p><p>提交审核将信息写入课程预发布表，课程预发布表结构如下： 具体字段属性见数据库表<br><img src='https://s21.ax1x.com/2024/04/10/pFOqXzF.png'></p><p>更新课程基本信息表的课程审核状态为：已经提交<br>课程审核后更新课程基本信息表的审核状态、课程预发布表的审核状态，并将审核结果写入课程审核记录。<br>审核记录表结构如下：<br><img src='https://s21.ax1x.com/2024/04/10/pFOLAzD.png'></p><h2 id="接口定义-1"><a href="#接口定义-1" class="headerlink" title="接口定义"></a>接口定义</h2><p>下边定义提交课程审核的接口，在课程发布Controller中定义接口如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping</span> (<span class="string">&quot;/courseaudit/commit/&#123;courseId&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commitAudit</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h2 id="接口开发-1"><a href="#接口开发-1" class="headerlink" title="接口开发"></a>接口开发</h2><h3 id="Dao开发"><a href="#Dao开发" class="headerlink" title="Dao开发"></a>Dao开发</h3><div class="tip cogs"><p>1、查询课程基本信息、课程营销信息、课程计划信息等课程相关信息，整合为课程预发布信息。<br>2、向课程预发布表course_publish_pre插入一条记录，如果已经存在则更新，审核状态为：已提交。<br>3、更新课程基本表course_base课程审核状态为：已提交。<br>约束：<br>1、对已提交审核的课程不允许提交审核。<br>2、本机构只允许提交本机构的课程。<br>3、没有上传图片不允许提交审核。<br>4、没有添加课程计划不允许提交审核。</p><p>使用代码生成器生成课程发布表、课程预发布表的PO、Mpper，并拷贝到相应的工程下。</p></div><h3 id="Service开发"><a href="#Service开发" class="headerlink" title="Service开发"></a>Service开发</h3><p>在课程发布Service类中定义接口如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 提交审核</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> courseId  课程id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commitAudit</span><span class="params">(Long companyId,Long courseId)</span>;</span><br></pre></td></tr></table></figure><br>实现service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commitAudit</span><span class="params">(Long companyId, Long courseId)</span> &#123;</span><br><span class="line">        <span class="type">CourseBaseInfoDto</span> <span class="variable">courseBaseInfo</span> <span class="operator">=</span> courseBaseInfoService.getCourseBaseInfo(courseId);</span><br><span class="line">        <span class="keyword">if</span> (courseBaseInfo==<span class="literal">null</span>)&#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;课程找不到&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//审核状态</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auditStatus</span> <span class="operator">=</span> courseBaseInfo.getAuditStatus();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果课程的审核状态为已提交则不允许提交</span></span><br><span class="line">        <span class="keyword">if</span> (auditStatus.equals(<span class="string">&quot;202003&quot;</span>))&#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;课程已提交请等待审核&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//本机构只能提交本机构的课程</span></span><br><span class="line">        <span class="comment">//todo:本机构只能提交本机构的课程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//课程的图片、计划信息没有填写也不允许提交</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pic</span> <span class="operator">=</span> courseBaseInfo.getPic();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(pic))&#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;请上传课程图片&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询课程计划</span></span><br><span class="line">        <span class="comment">//课程计划信息</span></span><br><span class="line">        List&lt;TeachplanDto&gt; teachplanTree = teachplanService.findTeachplanTree(courseId);</span><br><span class="line">        <span class="keyword">if</span> (teachplanTree==<span class="literal">null</span>||teachplanTree.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;请编写课程计划&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查询到课程基本信息、营销信息、计划等信息插入到课程预发布表</span></span><br><span class="line">        <span class="type">CoursePublishPre</span> <span class="variable">coursePublishPre</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoursePublishPre</span>();</span><br><span class="line">        BeanUtils.copyProperties(courseBaseInfo,coursePublishPre);</span><br><span class="line">        <span class="comment">//设置机构id</span></span><br><span class="line">        coursePublishPre.setCompanyId(companyId);</span><br><span class="line">        <span class="comment">//营销信息</span></span><br><span class="line">        <span class="type">CourseMarket</span> <span class="variable">courseMarket</span> <span class="operator">=</span> courseMarketMapper.selectById(courseId);</span><br><span class="line">        <span class="comment">//转json</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">courseMarketJson</span> <span class="operator">=</span> JSON.toJSONString(courseMarket);</span><br><span class="line">        coursePublishPre.setMarket(courseMarketJson);</span><br><span class="line">        <span class="comment">//计划信息</span></span><br><span class="line">        <span class="comment">//转json</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">teachplanTreeJson</span> <span class="operator">=</span> JSON.toJSONString(teachplanTree);</span><br><span class="line">        coursePublishPre.setTeachplan(teachplanTreeJson);</span><br><span class="line">        <span class="comment">//状态为已提交</span></span><br><span class="line">        coursePublishPre.setStatus(<span class="string">&quot;202003&quot;</span>);</span><br><span class="line">        <span class="comment">//提交时间</span></span><br><span class="line">        coursePublishPre.setCreateDate(LocalDateTime.now());</span><br><span class="line">        <span class="comment">//查询预发布表，如果有记录则更新，没有则插入</span></span><br><span class="line">        <span class="type">CoursePublishPre</span> <span class="variable">coursePublishPreObj</span> <span class="operator">=</span> coursePublishPreMapper.selectById(courseId);</span><br><span class="line">        <span class="keyword">if</span> (coursePublishPreObj==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//插入</span></span><br><span class="line">            coursePublishPreMapper.insert(coursePublishPre);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//更新</span></span><br><span class="line">            coursePublishPreMapper.updateById(coursePublishPre);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新课程基本信息表的审核状态为已提交</span></span><br><span class="line">        <span class="type">CourseBase</span> <span class="variable">courseBase</span> <span class="operator">=</span> courseBaseMapper.selectById(courseId);</span><br><span class="line">        courseBase.setAuditStatus(<span class="string">&quot;202003&quot;</span>); <span class="comment">//审核状态为已提交</span></span><br><span class="line"></span><br><span class="line">        courseBaseMapper.updateById(courseBase);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="接口完善"><a href="#接口完善" class="headerlink" title="接口完善"></a>接口完善</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping</span> (<span class="string">&quot;/courseaudit/commit/&#123;courseId&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commitAudit</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span>&#123;</span><br><span class="line">     <span class="type">Long</span> <span class="variable">companyId</span> <span class="operator">=</span> <span class="number">1232141425L</span>;</span><br><span class="line">     coursePublishService.commitAudit(companyId,courseId);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p>使用前端提前课程审核：<br>1、找一门信息不全的课程，测试各各约束条件。<br>2、正常提交后，观察数据库中课程预发布表记录的内容是否完整。<br>3、测试审核过后再次提交，提交后观察数据库中课程预发布表记录的内容是否正确。<br>审核通过需手动修改数据库：<br>1、修改课程预发布表的状态为审核通过202004。<br>2、修改课程基本表的审核状态为审核通过202004。</p><h1 id="课程发布"><a href="#课程发布" class="headerlink" title="课程发布"></a>课程发布</h1><h2 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="数据模型-2"><a href="#数据模型-2" class="headerlink" title="数据模型"></a>数据模型</h3><p>教学机构人员在课程审核通过后即可发布课程，课程发布后会公开展示在网站上供学生查看、选课和学习。<br>在网站上展示课程信息需要解决课程信息显示的性能问题，如果速度慢(排除网速)会影响用户的体验性。</p><u>如何去快速搜索课程？</u><u>打开课程详情页面仍然去查询数据库可行吗？</u><p>为了提高网站的速度需要将课程信息进行缓存，并且要将课程信息加入索引库方便搜索，下图显示了课程发布后课程信息的流转情况：<br><img src='https://s21.ax1x.com/2024/04/10/pFOOWuQ.png'></p><div class="tip bell"><p>1、向内容管理数据库的课程发布表存储课程发布信息，更新课程基本信息表中发布状态为已发布。<br>2、向Redis存储课程缓存信息。<br>3、向Elasticsearch存储课程索引信息。<br>4、请求分布文件系统存储课程静态化页面(即html页面)，实现快速浏览课程详情页面。</p></div><p>课程发布表的数据来源于课程预发布表，它们的结构基本一样，只是课程发布表中的状态是课程发布状态，如下图：<br><img src='https://pic.imgdb.cn/item/66164fc268eb9357134b054c.png'></p><p>redis中的课程缓存信息是将课程发布表中的数据转为json进行存储。<br>elasticsearch中的课程索引信息是根据搜索需要将课程名称、课程介绍等信息进行索引存储。<br>MinIO中存储了课程的静态化页面文件（html网页），查看课程详情是通过文件系统去浏览课程详情页面。</p><h2 id="分布式事务技术方案"><a href="#分布式事务技术方案" class="headerlink" title="分布式事务技术方案"></a>分布式事务技术方案</h2><h3 id="什么是分布式事务"><a href="#什么是分布式事务" class="headerlink" title="什么是分布式事务"></a>什么是分布式事务</h3><p>一次课程发布操作需要向数据库、redis、elasticsearch、MinIO写四份数据，这里存在分布式事务问题。<br><u>什么是分布式事务？</u><br><u>首先理解什么是本地事务？</u></p><div class="tip info"><p>平常我们在程序中通过spring去控制事务是利用数据库本身的事务特性来实现的，因此叫数据库事务，由于应用主要靠关系数据库来控制事务，此数据库只属于该应用，所以基于本应用自己的关系型数据库的事务又被称为本地事务。 </p><p>本地事务具有ACID四大特性，数据库事务在实现时会将一次事务涉及的所有操作全部纳入到一个不可分割的执行单元，该执行单元中的所有操作 要么都成功，要么都失败，只要其中任一操作执行失败，都将导致整个事务的回滚。</p></div><u>理解了本地事务，什么是分布式事务？</u><div class="tip info"><p>现在的需求是课程发布操作后将数据写入数据库、redis、elasticsearch、MinIO四个地方，这四个地方已经不限制在一个数据库内，是由四个分散的服务去提供，与这四个服务去通信需要网络通信，而网络存在不可到达性，这种分布式系统环境下，通过与不同的服务进行网络通信去完成事务称之为分布式事务。</p></div><p>在分布式系统中分布式事务的场景很多：<br>例如用户注册送积分，银行转账，创建订单减库存，这些都是分布式事务。<br>拿转账举例：<br>我们知道本地事务依赖数据库本身提供的事务特性来实现，因此以下逻辑可以控制本地事务：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin transaction； </span><br><span class="line"><span class="comment">//1.本地数据库操作：张三减少金额 </span></span><br><span class="line"><span class="comment">//2.本地数据库操作：李四增加金额 </span></span><br><span class="line">commit transation; </span><br></pre></td></tr></table></figure></p><p>但是在分布式环境下，会变成下边这样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">begin transaction； </span><br><span class="line"><span class="comment">//1.本地数据库操作：张三减少金额 </span></span><br><span class="line"><span class="comment">//2.远程调用：让李四增加金额 </span></span><br><span class="line"></span><br><span class="line">commit transation;</span><br></pre></td></tr></table></figure><br>可以设想，当远程调用让李四增加金额成功了，由于网络问题远程调用并没有返回，此时本地事务提交失败就回滚了张三减少金额的操作，此时张三和李四的数据就不一致了。<br>因此在分布式架构的基础上，传统数据库事务就无法使用了，张三和李四的账户不在一个数据库中甚至不在一个应 用系统里，实现转账事务需要通过远程调用，由于网络问题就会导致分布式事务问题。 </p><p>下边的场景都会产生分布式事务：<br>微服务架构下：<br><img src='https://pic.imgdb.cn/item/6616544b68eb9357135b3699.png'></p><p>单服务多数据库：<br><img src='https://pic.imgdb.cn/item/6616552368eb9357135ee26f.png'></p><p>多服务单数据库:<br><img src='https://pic.imgdb.cn/item/6616557c68eb93571360b826.png'></p><h3 id="什么是CAP理论"><a href="#什么是CAP理论" class="headerlink" title="什么是CAP理论"></a>什么是CAP理论</h3><p>控制分布式事务首先需要理解CAP理论，什么是CAP理论？<br>CAP是 Consistency、Availability、Partition tolerance三个词语的缩写，分别表示一致性、可用性、分区容忍性。<br>使用下边的分布式系统结构 进行说明：</p><p><img src='https://pic.imgdb.cn/item/66165c6268eb9357137823f5.png'></p><div class="tip key"><p>客户端经过网关访问用户服务的两个结点，一致性是指用户不管访问哪一个结点拿到的数据都是最新的，比如查询小明的信息，不能出现在数据没有改变的情况下两次查询结果不一样。<br>可用性是指任何时候查询用户信息都可以查询到结果，但不保证查询到最新的数据。<br>分区容忍性也叫分区容错性，当系统采用分布式架构时由于网络通信异常导致请求中断、消息丢失，但系统依然对外提供服务。<br>CAP理论要强调的是在分布式系统中这三点不可能全部满足，由于是分布式系统就要满足分区容忍性，因为服务之间难免出现网络异常，不能因为局部网络异常导致整个系统不可用。<br>满足P那么C和A不能同时满足：<br>比如我们添加一个用户小明的信息，该信息先添加到结点1中，再同步到结点2中</p></div><p>如下图：<br><img src='https://pic.imgdb.cn/item/66165cf368eb9357137aadbd.png'></p><p>如果要满足C一致性，必须等待小明的信息同步完成系统才可用（否则会出现请求到结点2时查询不到数据，违反了一致性），在信息同步过程中系统是不可用的，所以满足C的同时无法满足A。<br>如果要满足A可用性，要时刻保证系统可用就不用等待信息同步完成，此时系统的一致性无法满足。</p><p>所以在分布式系统中进行分布式事务控制，要么保证CP、要么保证AP。</p><h3 id="分布式事务控制方案"><a href="#分布式事务控制方案" class="headerlink" title="分布式事务控制方案"></a>分布式事务控制方案</h3><div class="tip success"><p><u>学习了CAP理论该如何控制分布式事务呢？</u></p><p>学习了CAP理论我们知道进行分布式事务控制要在C和A中作出取舍，保证一致性就不要保证可用性，保证可用性就不要保证一致，首先你确认是要CP还是AP，具体要根据应用场景进行判断。<br>CP的场景：满足C舍弃A，强调一致性。<br>跨行转账：一次转账请求要等待双方银行系统都完成整个事务才算完成，只要其中一个失败另一方执行回滚操作。<br>开户操作：在业务系统开户同时要在运营商开户，任何一方开户失败该用户都不可使用，所以要满足CP。<br>AP的场景：满足A舍弃C，强调可用性。<br>订单退款，今日退款成功，明日账户到账，只要用户可以接受在一定时间内到账即可。<br>注册送积分，注册成功积分在24分到账。<br>支付短信通信，支付成功发短信，短信发送可以有延迟，甚至没有发送成功。<br>在实际应用中符合AP的场景较多，其实虽然AP舍弃C一致性，实际上最终数据还是达到了一致，也就满足了最终一致性，所以业界定义了BASE理论。</p><p><u>什么是BASE理论？</u><br>BASE 是 Basically Available(基本可用)、Soft state(软状态)和 Eventually consistent (最终一致性)三个短语的缩写。<br>基本可用：当系统无法满足全部可用时保证核心服务可用即可，比如一个外卖系统，每到中午12点左右系统并发量很高，此时要保证下单流程涉及的服务可用，其它服务暂时不可用。<br>软状态：是指可以存在中间状态，比如：打印自己的社保统计情况，该操作不会立即出现结果，而是提示你打印中，请在XXX时间后查收。虽然出现了中间状态，但最终状态是正确的。<br>最终一致性：退款操作后没有及时到账，经过一定的时间后账户到账，舍弃强一致性，满足最终一致性。</p><p><u>分布式事务控制有哪些常用的技术方案？</u><br>实现CP就是要实现强一致性:<br>使用Seata框架基于AT模式实现<br>使用Seata框架基于TCC模式实现。<br>实现AP则要保证最终数据一致性:<br>使用消息队列通知的方式去实现，通知失败自动重试，达到最大失败次数需要人工处理；<br>使用任务调度的方案，启动任务调度将课程信息由数据库同步到elasticsearch、MinIO、redis中。</p></div><h3 id="课程发布的事务控制方案"><a href="#课程发布的事务控制方案" class="headerlink" title="课程发布的事务控制方案"></a>课程发布的事务控制方案</h3><u>学习了这么多的理论，回到课程发布，执行课程发布操作后要向数据库、redis、elasticsearch、MinIO写四份数据，这个场景用哪种方案？</u><p>满足CP？<br>如果要满足CP就表示课程发布操作后向数据库、redis、elasticsearch、MinIO写四份数据，只要有一份写失败其它的全部回滚。<br>满足AP？<br>课程发布操作后，先更新数据库中的课程发布状态，更新后向redis、elasticsearch、MinIO写课程信息，只要在一定时间内最终向redis、elasticsearch、MinIO写数据成功即可。<br>目前我们已经有了任务调度的技术积累，这里选用任务调度的方案去实现分布式事务控制，课程发布满足AP即可。<br>下图是具体的技术方案：<br><img src='https://s21.ax1x.com/2024/04/10/pFOziFA.png'></p><p>1、在内容管理服务的数据库中添加一个消息表，消息表和课程发布表在同一个数据库。<br>2、点击课程发布通过本地事务向课程发布表写入课程发布信息，同时向消息表写课程发布的消息。通过数据库进行控制，只要课程发布表插入成功消息表也插入成功，消息表的数据就记录了某门课程发布的任务。<br>3、启动任务调度系统定时调度内容管理服务去定时扫描消息表的记录。<br>4、当扫描到课程发布的消息时即开始完成向redis、elasticsearch、MinIO同步数据的操作。<br>5、同步数据的任务完成后删除消息表记录。</p><p>时序图如下：<br>下图是课程发布操作的流程：</p><p><img src='https://s21.ax1x.com/2024/04/10/pFOzkWt.png'><br>1、执行发布操作，内容管理服务存储课程发布表的同时向消息表添加一条“课程发布任务”。这里使用本地事务保证课程发布信息保存成功，同时消息表也保存成功。<br>2、任务调度服务定时调度内容管理服务扫描消息表，由于课程发布操作后向消息表插入一条课程发布任务，此时扫描到一条任务。<br>3、拿到任务开始执行任务，分别向redis、elasticsearch及文件系统存储数据。<br>4、任务完成后删除消息表记录。</p><p>假如网络中断，会进行定时调度，重新执行该任务。如果服务器死掉，会有相应的运维人员来处理（他们不是吃干饭的！！！）</p><h2 id="课程发布接口"><a href="#课程发布接口" class="headerlink" title="课程发布接口"></a>课程发布接口</h2><h3 id="接口定义-2"><a href="#接口定义-2" class="headerlink" title="接口定义"></a>接口定义</h3><p>根据课程发布的分布式事务控制方案，课程发布操作首先通过本地事务向课程发布表写入课程发布信息并向消息表插入一条消息，这里定义的课程发布接口要实现该功能。<br>在内容管理接口工程中定义课程发布接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 课程预览，发布</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Api(value = &quot;课程预览发布接口&quot;,tags = &quot;课程预览发布接口&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoursePublishController</span> &#123;</span><br><span class="line">...</span><br><span class="line"> <span class="meta">@ApiOperation(&quot;课程发布&quot;)</span></span><br><span class="line"> <span class="meta">@ResponseBody</span></span><br><span class="line"> <span class="meta">@PostMapping</span> (<span class="string">&quot;/coursepublish/&#123;courseId&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coursepublish</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="接口开发-2"><a href="#接口开发-2" class="headerlink" title="接口开发"></a>接口开发</h3><h4 id="DAO开发"><a href="#DAO开发" class="headerlink" title="DAO开发"></a>DAO开发</h4><p>课程发布操作对数据库操作如下：<br>1、向课程发布表course_publish插入一条记录,记录来源于课程预发布表，如果存在则更新，发布状态为：已发布。<br>2、更新course_base表的课程发布状态为：已发布<br>3、删除课程预发布表的对应记录。<br>4、向mq_message消息表插入一条消息，消息类型为：course_publish<br>约束：<br>1、课程审核通过方可发布。<br>2、本机构只允许发布本机构的课程。</p><p>以上功能使用自动生成的mapper接口即可完成。</p><p>1、在内容管理数据库创建mq_message消息表及消息历史消息表（历史表存储已经完成的消息）。<br>消息表结构如下：<br><img src='https://pic.imgdb.cn/item/66166d0268eb935713a3e1cf.png'><br>2、生成mq_message消息表、course_publish课程发布表的po和mapper接口<br>稍后会开发一个通用的消息处理组件</p><h4 id="Service开发-1"><a href="#Service开发-1" class="headerlink" title="Service开发"></a>Service开发</h4><p>定义Service接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 课程发布接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> companyId 机构id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> courseId 课程id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/20 16:23</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">(Long companyId,Long courseId)</span>;</span><br></pre></td></tr></table></figure><br>编写课程发布的Service方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">(Long companyId, Long courseId)</span> &#123;</span><br><span class="line">       <span class="comment">//查询预发布表</span></span><br><span class="line">       <span class="type">CoursePublishPre</span> <span class="variable">coursePublishPre</span> <span class="operator">=</span> coursePublishPreMapper.selectById(courseId);</span><br><span class="line">       <span class="keyword">if</span> (coursePublishPre==<span class="literal">null</span>)&#123;</span><br><span class="line">           XueChengPlusException.cast(<span class="string">&quot;课程没有审核记录，无法发布&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//状态</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> coursePublishPre.getStatus();</span><br><span class="line">       <span class="comment">//课程如果没有审核通过不允许发布</span></span><br><span class="line">       <span class="keyword">if</span> (!status.equals(<span class="string">&quot;202004&quot;</span>))&#123;</span><br><span class="line">           XueChengPlusException.cast(<span class="string">&quot;课程没有审核通过不允许发布&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//向课程发布表写入数据</span></span><br><span class="line">       <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoursePublish</span>();</span><br><span class="line">       BeanUtils.copyProperties(coursePublishPre,coursePublish);</span><br><span class="line">       <span class="comment">//先查询课程发布，如果有则更新，没有再添加</span></span><br><span class="line">       <span class="type">CoursePublish</span> <span class="variable">coursePublishObj</span> <span class="operator">=</span> coursePublishMapper.selectById(courseId);</span><br><span class="line">       <span class="keyword">if</span> (coursePublishObj==<span class="literal">null</span>)&#123;</span><br><span class="line">           coursePublishMapper.insert(coursePublish);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           coursePublishMapper.updateById(coursePublish);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//向消息表写入数据</span></span><br><span class="line">       <span class="comment">//todo</span></span><br><span class="line">       <span class="comment">//将发布表数据删除</span></span><br><span class="line">       coursePublishPreMapper.deleteById(courseId);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="接口完善-1"><a href="#接口完善-1" class="headerlink" title="接口完善"></a>接口完善</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@ApiOperation(&quot;课程发布&quot;)</span></span><br><span class="line"> <span class="meta">@ResponseBody</span></span><br><span class="line"> <span class="meta">@PostMapping</span> (<span class="string">&quot;/coursepublish/&#123;courseId&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coursepublish</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span>&#123;</span><br><span class="line">     <span class="type">Long</span> <span class="variable">companyId</span> <span class="operator">=</span> <span class="number">1232141425L</span>;</span><br><span class="line">     coursePublishService.publish(companyId,courseId);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="接口测试-1"><a href="#接口测试-1" class="headerlink" title="接口测试"></a>接口测试</h3><div class="tip warning"><p>先测试约束条件：<br>1、在未提交审核时进行课程发布测试。<br>2、在课程未审核通过时进行发布。<br>正常流程测试：<br>1、提交审核课程<br>2、手动修改课程预发布表与课程基本信息的审核状态为审核通过。<br>3、执行课程发布<br>4、观察课程发布表记录是否正常，课程预发布表记录已经删除，课程基本信息表与课程发布表的发布状态为”发布“。<br>使用前后端联调方式测试。</p></div><h2 id="消息处理SDK"><a href="#消息处理SDK" class="headerlink" title="消息处理SDK"></a>消息处理SDK</h2><h3 id="消息模块技术方案"><a href="#消息模块技术方案" class="headerlink" title="消息模块技术方案"></a>消息模块技术方案</h3><p>课程发布操作执行后需要扫描消息表的记录，有关消息表处理的有哪些？<br><img src='https://s21.ax1x.com/2024/04/10/pFXCe9s.png'></p><p>上图中红色框内的都是与消息处理相关的操作：<br>1、新增消息表<br>2、扫描消息表。<br>3、更新消息表。<br>4、删除消息表。</p><p>使用消息表这种方式实现最终事务一致性的地方除了课程发布还有其它业务场景。<br><img src='https://s21.ax1x.com/2024/04/10/pFXCuj0.png'><br>如果在每个地方都实现一套针对消息表定时扫描、处理的逻辑基本上都是重复的，软件的可复用性太低，成本太高。</p><u>如何解决这个问题？</u><p>针对这个问题可以想到将消息处理相关的逻辑做成一个通用的东西。<br>是做成通用的服务，还是做成通用的代码组件呢？<br>通用的服务是完成一个通用的独立功能，并提供独立的网络接口，比如：项目中的文件系统服务，提供文件的分布式存储服务。<br>代码组件也是完成一个通用的独立功能，通常会提供API的方式供外部系统使用，比如：fastjson、Apache commons工具包等。<br>如果将消息处理做成一个通用的服务，该服务需要连接多个数据库，因为它要扫描微服务数据库下的消息表，并且要提供与微服务通信的网络接口，单就针对当前需求而言开发成本有点高。<br>如果将消息处理做一个SDK工具包相比通用服务不仅可以解决将消息处理通用化的需求，还可以降低成本。<br>所以，本项目确定将对消息表相关的处理做成一个SDK组件供各微服务使用,如下图<br><img src='https://s21.ax1x.com/2024/04/10/pFXC3EF.png'><br><div class="tip info"><p>下边对消息SDK的设计内容进行说明：<br><u>sdk需要提供执行任务的逻辑吗？</u><br>拿课程发布任务举例，执行课程发布任务是要向redis、索引库等同步数据，其它任务的执行逻辑是不同的，所以执行任务在sdk中不用实现任务逻辑，只需要提供一个抽象方法由具体的执行任务方去实现。</p><p><u>如何保证任务的幂等性？</u><br>在视频处理章节介绍的视频处理的幂等性方案，这里可以采用类似方案，任务执行完成后会从消息表删除，如果消息的状态是完成或不存在消息表中则不用执行。</p><p><u>如何保证任务不重复执行？</u><br>采用和视频处理章节一致方案，除了保证任务的幂等性外，任务调度采用分片广播，根据分片参数去获取任务，另外阻塞调度策略为丢弃任务。<br>注意：这里是信息同步类任务，即使任务重复执行也没有关系，不再使用抢占任务的方式保证任务不重复执行。</p><p><u>还有一个问题，根据消息表记录是否存在或消息表中的任务状态去保证任务的幂等性，如果一个任务有好几个小任务，比如：课程发布任务需要执行三个同步操作：存储课程到redis、存储课程到索引库，存储课程页面到文件系统。如果其中一个小任务已经完成也不应该去重复执行。这里该如何设计？</u></p></div></p><p>将小任务作为任务的不同的阶段，在消息表中设计阶段状态。<br><img src="https://pic.imgdb.cn/item/66168b2168eb935713dee51c.png"><br>每完成一个阶段在相应的阶段状态字段打上完成标记，即使这个大任务没有完成再重新执行时，如果小阶段任务完成了也不会重复执行某个小阶段的任务。</p><p>完善service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//保存消息表</span></span><br><span class="line"> saveCoursePublishMessage(courseId);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span> 保存消息表记录</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> courseId  课程id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@date</span> 2022/9/20 16:32</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveCoursePublishMessage</span><span class="params">(Long courseId)</span>&#123;</span><br><span class="line"> <span class="type">MqMessage</span> <span class="variable">mqMessage</span> <span class="operator">=</span> mqMessageService.addMessage(<span class="string">&quot;course_publish&quot;</span>, String.valueOf(courseId), <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"> <span class="keyword">if</span>(mqMessage==<span class="literal">null</span>)&#123;</span><br><span class="line">  XueChengPlusException.cast(CommonError.UNKOWN_ERROR);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学成在线项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学成在线项目(七)</title>
      <link href="/posts/d1cf35.html"/>
      <url>/posts/d1cf35.html</url>
      
        <content type="html"><![CDATA[<h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><div class="tip info"><p>二.如何保证任务不重复执行？<br>1.调度中心按分片广播的方式去下发任务<br>2.执行器收到作业分片广播的参数：分片总数(shardTotal)和分片序号(shardIndex)，计算任务id % 分片总数(taskId % shardTotal)，如果结果等于分片序号，就去执行这个任务(taskId % shardTotal = shardIndex)。这样就可以保证不同的执行器执行不同的任务<br>3.配置调度过期策略为忽略，避免同一个执行器多次重复执行同一个任务<br>4.配置任务阻塞处理策略为丢弃后续调度，注意：丢弃也没事，下一次调度还可以执行<br>5.另外还要保证任务处理的幂等性，执行过的任务可以打一个状态标记已完成（上面的代码设置status=2即为完成），下次再次调度该任务时，判断该任务已完成，就不再执行</p><p>三.任务幂等性如何保证？<br>幂等性描述的是一次和多次请求某一个资源，对于资源本身，应该返回同样的结果<br>幂等性是为了解决重复提交问题，例如：恶意刷单，重复支付等<br>解决幂等性的常用方案:<br>1.数据库约束，例如：唯一索引、主键<br>2.乐观锁：常用于数据库，更新数据时，根据乐观锁的状态去更新<br>3.唯一序列号，请求前生成的唯一序列号，携带序列号去请求，执行时在redis记录该序列号，用于表示该序列号请求已经执行过了，如果相同的序列号再次来执行，则说明是重复执行。这里的解决方式是在数据库中添加状态处理字段，视频处理完成，则更新该字段为已完成，执行视频处理之前判断状态是否为已完成，若已完成则不处理</p></div><h1 id="绑定媒资"><a href="#绑定媒资" class="headerlink" title="绑定媒资"></a>绑定媒资</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="业务流程（省略）"><a href="#业务流程（省略）" class="headerlink" title="业务流程（省略）"></a>业务流程（省略）</h3><p>教育机构用户进入课程管理页面并编辑某一个课程，在”课程大纲”标签页的某一小节后可点击”添加视频“。然后进行相应的视频选择绑定上去，已有视频的要先删除掉才能上传<br><img src='https://s21.ax1x.com/2024/04/08/pFLWTjf.png'></p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>课程计划绑定媒资文件后存储至课程计划绑定媒资表。即是<wavy>teachplan_media</wavy>表<br><img src='https://s21.ax1x.com/2024/04/08/pFL4cuV.png'></p><h2 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h2><p>根据业务流程，用户进入课程计划列表，首先确定向哪个课程计划添加视频，点击”添加视频“后用户选择视频，选择视频，点击提交，前端以json格式请求以下参数：提交媒资文件id、文件名称、教学计划id</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mediaId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;70a98b4a2fffc89e50b101f959cc33ca&quot;</span><span class="punctuation">,</span>  <span class="comment">//md5值</span></span><br><span class="line">  <span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;22-Hmily实现TCC事务-开发bank2的confirm方法.avi&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;teachplanId&quot;</span><span class="punctuation">:</span> <span class="number">257</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在内容管理模块定义请求参数模型类型： com.xuecheng.content.model.dto.BindTeachplanMediaDto //路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value=&quot;BindTeachplanMediaDto&quot;, description=&quot;教学计划-媒资绑定提交数据&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BindTeachplanMediaDto</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;媒资文件id&quot;, required = true)</span></span><br><span class="line"><span class="keyword">private</span> String mediaId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;媒资文件名称&quot;, required = true)</span></span><br><span class="line"><span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@ApiModelProperty(value = &quot;课程计划标识&quot;, required = true)</span></span><br><span class="line"> <span class="keyword">private</span> Long teachplanId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在TeachplanController类中定义接口如下：(没完善版)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;课程计划和媒资信息绑定&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/teachplan/association/media&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">associationMedia</span><span class="params">(<span class="meta">@RequestBody</span> BindTeachplanMediaDto bindTeachplanMediaDto)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h2><h3 id="DAO开发"><a href="#DAO开发" class="headerlink" title="DAO开发"></a>DAO开发</h3><p>对teachplanMedia表自动生成Mapper。</p><h3 id="Service开发"><a href="#Service开发" class="headerlink" title="Service开发"></a>Service开发</h3><p>根据需求定义service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> bindTeachplanMediaDto</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> com.xuecheng.content.model.po.TeachplanMedia</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span> 教学计划绑定媒资</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span> 2022/9/14 22:20</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">associationMedia</span><span class="params">(BindTeachplanMediaDto bindTeachplanMediaDto)</span>;</span><br></pre></td></tr></table></figure><p>定义接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">associationMedia</span><span class="params">(BindTeachplanMediaDto bindTeachplanMediaDto)</span> &#123;</span><br><span class="line">    <span class="comment">//课程计划id</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">teachplanId</span> <span class="operator">=</span> bindTeachplanMediaDto.getTeachplanId();</span><br><span class="line">     <span class="type">Teachplan</span> <span class="variable">teachplan</span> <span class="operator">=</span> teachplanMapper.selectById(teachplanId);</span><br><span class="line">     <span class="keyword">if</span> (teachplan==<span class="literal">null</span>)&#123;</span><br><span class="line">         XueChengPlusException.cast(<span class="string">&quot;课程计划不存在&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//删除原有记录，根据课程计划id删除它绑定的媒资</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">delete</span> <span class="operator">=</span> teachplanMediaMapper.delete(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;TeachplanMedia&gt;().eq(TeachplanMedia::getTeachplanId, bindTeachplanMediaDto.getTeachplanId()));</span><br><span class="line"></span><br><span class="line">     <span class="comment">//再添加新记录</span></span><br><span class="line">     <span class="type">TeachplanMedia</span> <span class="variable">teachplanMedia</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TeachplanMedia</span>();</span><br><span class="line">     BeanUtils.copyProperties(bindTeachplanMediaDto,teachplanMedia);</span><br><span class="line">     teachplanMedia.setCourseId(teachplan.getCourseId());</span><br><span class="line">     teachplanMedia.setMediaFilename(bindTeachplanMediaDto.getFileName());</span><br><span class="line">     teachplanMediaMapper.insert(teachplanMedia);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="接口完善"><a href="#接口完善" class="headerlink" title="接口完善"></a>接口完善</h3><p>完善接口层调用Service层的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;课程计划和媒资信息绑定&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/teachplan/association/media&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">associationMedia</span><span class="params">(<span class="meta">@RequestBody</span> BindTeachplanMediaDto bindTeachplanMediaDto)</span>&#123;</span><br><span class="line">    teachplanService.associationMedia(bindTeachplanMediaDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h3><p>测试结果<br><img src='https://s21.ax1x.com/2024/04/08/pFL5AUg.png'></p><p><img src='https://s21.ax1x.com/2024/04/08/pFL5QbT.png'></p><h1 id="课程发布模块需求"><a href="#课程发布模块需求" class="headerlink" title="课程发布模块需求"></a>课程发布模块需求</h1><p>课程发布模块共包括三块功能：<br>1、课程预览<br>2、课程审核<br>3、课程发布</p><h1 id="课程预览"><a href="#课程预览" class="headerlink" title="课程预览"></a>课程预览</h1><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><h3 id="什么是模板引擎"><a href="#什么是模板引擎" class="headerlink" title="什么是模板引擎"></a>什么是模板引擎</h3><p>早期我们采用的jsp技术就是一种模板引擎技术，如下图：<br><img src='https://s21.ax1x.com/2024/04/08/pFLomn0.png'></p><div class="tip info"><p>1、浏览器请求web服务器<br>2、服务器渲染页面，渲染的过程就是向jsp页面(模板)内填充数据(模型)。<br>3、服务器将渲染生成的页面返回给浏览器。<br>所以模板引擎就是：模板+数据=输出，Jsp页面就是模板，页面中嵌入的jsp标签就是数据，两者相结合输出html网页。</p><p>常用的java模板引擎还有哪些？<br>Jsp、Freemarker、Thymeleaf 、Velocity 等。<br>本项目采用Freemarker作为模板引擎技术。<br>Freemarker官方地址：<a href="http://freemarker.foofun.cn/">http://freemarker.foofun.cn/</a><br>FreeMarker 是一款 模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。FreeMarker 是 免费的， 基于Apache许可证2.0版本发布。</p></div><h3 id="Freemarker快速入门-转移到Freemarker快速入门文章中"><a href="#Freemarker快速入门-转移到Freemarker快速入门文章中" class="headerlink" title="Freemarker快速入门(转移到Freemarker快速入门文章中)"></a>Freemarker快速入门(转移到Freemarker快速入门文章中)</h3><h2 id="测试静态页面"><a href="#测试静态页面" class="headerlink" title="测试静态页面"></a>测试静态页面</h2><h3 id="部署网站门户"><a href="#部署网站门户" class="headerlink" title="部署网站门户"></a>部署网站门户</h3><p>在课程预览界面上要加载css、js、图片等内容，这里部署nginx来访问这些静态资源，对于SpringBoot服务的动态资源由Nginx去代理请求，如下图：<br><img src='https://s21.ax1x.com/2024/04/09/pFL7YTK.png'></p><div class="tip info"><p>1、在本机安装 Nginx ，从课程资料目录获取nginx-1.23.1.zip并解压。<br>2、运行nginx-1.23.1目录下的nginx.exe。<br>默认端口为80，如果本机80端口被占用，则需要杀掉占用进程后再启动nginx。<br>如果无法杀掉80端口占用进程则需要修改nginx-1.23.1目录下conf/nginx.conf配置文件</p></div><p><img src='https://s21.ax1x.com/2024/04/09/pFL7NFO.png'></p><p>将80端口修改为空闲端口。<br>启动nginx，访问<a href="http://localhost">http://localhost</a> 出现下边的网页表示启动成功</p><p><img src='https://s21.ax1x.com/2024/04/09/pFL7UYD.png'></p><div class="tip info"><p>下边开始部署前端工程：<br>1、从课程资料目录获取xc-ui-pc-static-portal.zip 并解压。<br>2、修改本机hosts文件，加入127.0.0.1 www.51xuecheng.cn 51xuecheng.cn ucenter.51xuecheng.cn teacher.51xuecheng.cn file.51xuecheng.cn。<br>window10操作系统hosts文件在C:\Windows\System32\drivers\etc下<br>Centos7操作系统的hosts文件在/etc目录下。<br>在hosts文件加入如下配置</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.51xuecheng.cn 51xuecheng.cn ucenter.51xuecheng.cn teacher.51xuecheng.cn file.51xuecheng.cn</span><br></pre></td></tr></table></figure><p>3、在nginx-1.23.1目录中找到conf目录，配置目录下的nginx.conf文件。<br>配置内容如下，注意更改xc-ui-pc-static-portal目录的路径：  都修改为本地的路径 后面的视频也顺带修改了<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.51xuecheng.cn localhost;</span><br><span class="line">        #rewrite ^(.*) https://$server_name$1 permanent;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        ssi on;</span><br><span class="line">        ssi_silent_errors on;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            alias   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        #静态资源</span><br><span class="line">        location /static/img/ &#123;  </span><br><span class="line">                alias  D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/img/;</span><br><span class="line">        &#125; </span><br><span class="line">        location /static/css/ &#123;  </span><br><span class="line">                alias   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/css/;</span><br><span class="line">        &#125; </span><br><span class="line">        location /static/js/ &#123;  </span><br><span class="line">                alias   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/js/;</span><br><span class="line">        &#125; </span><br><span class="line">        location /static/plugins/ &#123;  </span><br><span class="line">                alias   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/plugins/;</span><br><span class="line">                add_header Access-Control-Allow-Origin http://ucenter.51xuecheng.cn;  </span><br><span class="line">                add_header Access-Control-Allow-Credentials true;  </span><br><span class="line">                add_header Access-Control-Allow-Methods GET;</span><br><span class="line">        &#125; </span><br><span class="line">        location /plugins/ &#123;  </span><br><span class="line">                alias   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/plugins/;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        location /course/preview/learning.html &#123;</span><br><span class="line">                alias D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/course/learning.html;</span><br><span class="line">        &#125; </span><br><span class="line">        location /course/search.html &#123;  </span><br><span class="line">                root   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal;</span><br><span class="line">        &#125; </span><br><span class="line">        location /course/learning.html &#123;  </span><br><span class="line">                root   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>启动成功访问<a href="http://www.51xuecheng.cn">http://www.51xuecheng.cn</a><br>课程详情页：<a href="http://www.51xuecheng.cn/course/course_template.html">http://www.51xuecheng.cn/course/course_template.html</a><br>有相应的画面表示配置成功</p><h3 id="文件服务器"><a href="#文件服务器" class="headerlink" title="文件服务器"></a>文件服务器</h3><p>在进行课程预览时需要展示课程的图片，在线插放课程视频，课程图片、视频这些都在MinIO文件系统存储，下边统一由Nginx代理，通过文件服务域名统一访问。如下图：<img src='https://s21.ax1x.com/2024/04/09/pFL7afe.png'><br>在hosts文件配置如下内容，如果已存在不要重复配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.51xuecheng.cn file.51xuecheng.cn</span><br></pre></td></tr></table></figure><p>在nginx.conf中配置文件服务器的代理地址<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#文件服务</span><br><span class="line"> upstream fileserver&#123;</span><br><span class="line">   server 192.168.101.65:9000 weight=10;</span><br><span class="line"> &#125; </span><br><span class="line">  server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  file.51xuecheng.cn;</span><br><span class="line">       #charset koi8-r;</span><br><span class="line">       ssi on;</span><br><span class="line">       ssi_silent_errors on;</span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line">       location /video &#123;</span><br><span class="line">           proxy_pass   http://fileserver;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       location /mediafiles &#123;</span><br><span class="line">           proxy_pass   http://fileserver;</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>配置完毕，重新加载nginx配置文件。<br>通过<a href="http://file.51xuecheng.cn/mediafiles/图片文件地址">http://file.51xuecheng.cn/mediafiles/图片文件地址</a>  访问图片<br>在媒资数据库的文件表中找一个图片的地址进行测试。 通过minio中图片路径来访问-&gt;这个就是图片文件地址  mediafiles-&gt;bucket库名</p><h3 id="视频播放页面"><a href="#视频播放页面" class="headerlink" title="视频播放页面"></a>视频播放页面</h3><p>首先在nginx.conf中配置视频播放页面的地址。前面server地址已经配过，在部署网站门户下</p><p>下边需要配置learning.html页面的视频播放路径来测试视频播放页面，找到learning.html页面中videoObject对象的定义处，配置视频的播放地址。<br><img src='https://s21.ax1x.com/2024/04/09/pFL7B6A.png'><br>videoObject下面的video修改成自己的视频路径即可</p><p>后续会再更新<br><img src='\img\siteicon\5371.jpg'></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学成在线项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/posts/f1601c3e.html"/>
      <url>/posts/f1601c3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式的定义"><a href="#单例模式的定义" class="headerlink" title="单例模式的定义"></a>单例模式的定义</h1><div class="tip info"><p>单例模式：确保一个类只有一个<span class='p red'>实例</span>（对象）（私有构造函数）,并提供一个<span class='p red'>全局访问点</span>（公有静态的工厂方法）来访问这个唯一实例（私有静态自身类型的成员变量）。</p></div><h1 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h1><div class="tip info"><p>1.私有构造函数<br>2.私有静态自身类型的成员变量<br>3.公有静态的工厂方法</p></div><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="查找bug"><a href="#查找bug" class="headerlink" title="查找bug"></a>查找bug</h2><div class="tip warning"><p>1.语法类<br>2.编译类<br>3.运行/逻辑<br>4.业务类</p></div><p>后续再更新<br><img src='https://s21.ax1x.com/2024/04/08/pFLm9IK.jpg'></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf初步认识与快速开始</title>
      <link href="/posts/b12a1160.html"/>
      <url>/posts/b12a1160.html</url>
      
        <content type="html"><![CDATA[<h1 id="初步认识Thymeleaf"><a href="#初步认识Thymeleaf" class="headerlink" title="初步认识Thymeleaf"></a>初步认识Thymeleaf</h1><div class="tip info"><p><span class='p red'>Thymeleaf</span>是一种用于Web和和独立环境的现代服务器端的<span class='p red'>Java模板引擎</span>，其主要目标是将优雅的Java模板带到开发工作流程中，并且可以作为<span class='p red'>Java静态原型</span>，让开发团队能更容易的协作。Thymeleaf能够处理HTML、XML、JavaScript、CSS甚至纯文本。</p></div><h1 id="Thymeleaf的页面"><a href="#Thymeleaf的页面" class="headerlink" title="Thymeleaf的页面"></a>Thymeleaf的页面</h1><p><img src='https://s21.ax1x.com/2024/04/07/pFLF75Q.png'></p><h1 id="Thymeleaf的标签属性与内置对象"><a href="#Thymeleaf的标签属性与内置对象" class="headerlink" title="Thymeleaf的标签属性与内置对象"></a>Thymeleaf的标签属性与内置对象</h1><p><img src='https://s21.ax1x.com/2024/04/07/pFLFOvq.png'></p><p><img src='https://s21.ax1x.com/2024/04/07/pFLkfJJ.png'></p><p><img src='https://s21.ax1x.com/2024/04/07/pFLkhW9.png'></p><h1 id="在springboot中集成Thymeleaf"><a href="#在springboot中集成Thymeleaf" class="headerlink" title="在springboot中集成Thymeleaf"></a>在springboot中集成Thymeleaf</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置yml"><a href="#配置yml" class="headerlink" title="配置yml"></a>配置yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">      <span class="attr">thymeleaf:</span></span><br><span class="line">        <span class="attr">cache:</span> <span class="literal">false</span>  <span class="comment">#模板缓存</span></span><br><span class="line">        <span class="attr">encoding:</span> <span class="string">UTF-8</span> <span class="comment">#模板编码</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">HTML5</span>  <span class="comment">#模板样式</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span> <span class="comment">#指定模板页面存放路径</span></span><br><span class="line">        <span class="attr">suffix:</span> <span class="string">.html</span> <span class="comment">#指定模板页面名称的后缀</span></span><br></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><img src='https://s21.ax1x.com/2024/04/07/pFLk1xI.png'></p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">userList</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        List&lt;User&gt; list =userService.list();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;userList&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Thymeleaf页面userList-html"><a href="#Thymeleaf页面userList-html" class="headerlink" title="Thymeleaf页面userList.html"></a>Thymeleaf页面userList.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Table goes in the document BODY --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;hovertable&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;8&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>出生日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">&quot;background-color: rgb(212, 227, 229);&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;user,status:$&#123;list&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status.count&#125;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.username&#125;&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user.sex eq 1&#125;&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user.sex eq 0&#125;&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span>25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(user.birthDate,&#x27;yyyy-MM-dd&#x27;)&#125;&quot;</span>&gt;</span>2015-07-12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src='https://s21.ax1x.com/2024/04/07/pFLkQGd.png'></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印图形</title>
      <link href="/posts/b9cfe67b.html"/>
      <url>/posts/b9cfe67b.html</url>
      
        <content type="html"><![CDATA[<h1 id="打印三角形"><a href="#打印三角形" class="headerlink" title="打印三角形"></a>打印三角形</h1><p>代码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (a=<span class="number">1</span>;a&lt;=<span class="number">5</span>;a++)&#123; <span class="comment">//列数</span></span><br><span class="line">           <span class="keyword">for</span> (b=<span class="number">1</span>;b&lt;<span class="number">7</span>-a;b++)&#123;<span class="comment">//每一行的空格</span></span><br><span class="line">               <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&amp;emsp;&quot;</span>) ;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span> (c=<span class="number">1</span>;c&lt;=a;c++)&#123;</span><br><span class="line">               <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;* &amp;emsp;&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><br>效果如下：<br><img src='https://s21.ax1x.com/2024/04/06/pFqBPpQ.png'></p><h1 id="打印平行四边形"><a href="#打印平行四边形" class="headerlink" title="打印平行四边形"></a>打印平行四边形</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;=<span class="number">5</span>;a++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (b=<span class="number">1</span>;b&lt;<span class="number">7</span>-a;b++)&#123;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&amp;emsp;&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (c=<span class="number">1</span>;c&lt;=<span class="number">5</span>;c++)&#123;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;* &amp;emsp;&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src='https://s21.ax1x.com/2024/04/06/pFqBlc9.png'></p><h1 id="打印菱形"><a href="#打印菱形" class="headerlink" title="打印菱形"></a>打印菱形</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;=<span class="number">3</span>;a++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (b=<span class="number">1</span>;b&lt;<span class="number">7</span>-a;b++)&#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&amp;emsp;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(c=<span class="number">1</span>;c&lt;=a*<span class="number">2</span>-<span class="number">1</span>;c++)&#123;</span><br><span class="line">           <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;* &quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;=<span class="number">2</span>;a++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (b=<span class="number">1</span>;b&lt;=a+<span class="number">3</span>;b++)&#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&amp;emsp;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(c=<span class="number">1</span>;c&lt;=<span class="number">5</span>-a*<span class="number">2</span>;c++)&#123;</span><br><span class="line">           <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;* &quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src='https://s21.ax1x.com/2024/04/06/pFqB1XR.png'></p>]]></content>
      
      
      <categories>
          
          <category> 前端js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阳光不燥，微风正好</title>
      <link href="/posts/9520.html"/>
      <url>/posts/9520.html</url>
      
        <content type="html"><![CDATA[<h1 id="夏至"><a href="#夏至" class="headerlink" title="夏至"></a>夏至</h1><blockquote><p>一生的时间很短<br>  短到不过是两颗心之间的距离<br>  一生的时间也很长<br>  不如我们试着走走看<br>  所念皆星河<br>  满眼皆是你</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"繁星","short_name":"繁星","theme_color":"&#xe6fb","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/1.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/2.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/3.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/4.png","sizes":"19x16","type":"image/png"},{"src":"/img/siteicon/8.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/6.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/9.png","sizes":"256x256","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>只想挣点钱去吃好吃得！！！</p></div><p><img src='\img\siteicon\5371.jpg'></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>闲言碎语</title>
      <link href="/artitalk/index.html"/>
      <url>/artitalk/index.html</url>
      
        <content type="html"><![CDATA[<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>小小日记</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-04-10</p></div></div><div class='timeline-item-content'><p>我真的fuck！什么烂bug啊？？！！！ 天杀得，我真踏马想代码大卸八块！！！找丫的几个小时了！！！晚上10点30找到1点34！ 还没解决，你真丫的该死！！！<br>能不能死啊！！！天杀的没有注入bean！我踏马分模块开发，给你传递了依赖，你还卡bug，卡锤子！gun！</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-04-09</p></div></div><div class='timeline-item-content'><p>晚7痛苦面具得在课上摸鱼</p></div></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>fcircle</title>
      <link href="/fcircle/index.html"/>
      <url>/fcircle/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐馆</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<p>音乐太多，请稍等会，正在全力加载小界面</p>    <div id="aplayer-kAUtaBum" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="440215021" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/coin/coin.css"/>
      <url>/css/coin/coin.css</url>
      
        <content type="html"><![CDATA[.tip-button {    border: 0;    border-radius: 0.25rem;    cursor: pointer;    font-size: 20px;    font-weight: 600;    height: 2.6rem;    margin-bottom: -4rem;    outline: 0;    position: relative;    top: 0;    transform-origin: 0% 100%;    transition: transform 50ms ease-in-out;    width: auto;    -webkit-tap-highlight-color: transparent;  }  .tip-button:active {    transform: rotate(4deg);  }  .tip-button.clicked {    animation: 150ms ease-in-out 1 shake;    pointer-events: none;  }  .tip-button.clicked .tip-button__text {    opacity: 0;    transition: opacity 100ms linear 200ms;  }  .tip-button.clicked::before {    height: 0.5rem;    width: 60%;    background: button-hover-color;  }  .tip-button.clicked .coin {    transition: margin-bottom 1s linear 200ms;    margin-bottom: 0;  }  .tip-button.shrink-landing::before {    transition: width 200ms ease-in;    width: 0;  }  .tip-button.coin-landed::after {    opacity: 1;    transform: scale(1);    transform-origin: 50% 100%;  }  .tip-button.coin-landed .coin-wrapper {    background: radial-gradient(circle at 35% 97%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(        circle at 45% 92%,        rgba(3, 16, 50, 0.4) 0.04rem,        transparent 0.02rem      ), radial-gradient(circle at 55% 98%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at          65% 96%, rgba(3, 16, 50, 0.4) 0.06rem, transparent 0.06rem);    background-position: center bottom;    background-size: 100%;    bottom: -1rem;    opacity: 0;    transform: scale(2) translateY(-10px);  }  .tip-button__text {    color: #fff;    margin-right: 1.8rem;    opacity: 1;    position: relative;    transition: opacity 100ms linear 500ms;    z-index: 3;  }  .tip-button::before {    border-radius: 0.25rem;    bottom: 0;    content: "";    display: block;    height: 100%;    left: 50%;    position: absolute;    transform: translateX(-50%);    transition: height 250ms ease-in-out 400ms, width 250ms ease-in-out 300ms;    width: 100%;    z-index: 2;  }  .tip-button::after {    bottom: -1rem;    color: white;    content: "ヾ(≧O≦)〃嗷~"; /*点击后显示的内容*/    height: 110%;    left: 0;    opacity: 0;    position: absolute;    pointer-events: none;    text-align: center;    transform: scale(0);    transform-origin: 50% 20%;    transition: transform 200ms cubic-bezier(0, 0, 0.35, 1.43);    width: 100%;    z-index: 1;  }    .coin-wrapper {    background: none;    bottom: 0;    height: 18rem;    left: 0;    opacity: 1;    overflow: hidden;    pointer-events: none;    position: absolute;    transform: none;    transform-origin: 50% 100%;    transition: opacity 200ms linear 100ms, transform 300ms ease-out;    width: 100%;  }    .coin {    --front-y-multiplier: 0;    --back-y-multiplier: 0;    --coin-y-multiplier: 0;    --coin-x-multiplier: 0;    --coin-scale-multiplier: 0;    --coin-rotation-multiplier: 0;    --shine-opacity-multiplier: 0.4;    --shine-bg-multiplier: 50%;    bottom: calc(var(--coin-y-multiplier) * 1rem - 3.5rem);    height: 3.5rem;    margin-bottom: 3.05rem;    position: absolute;    right: calc(var(--coin-x-multiplier) * 34% + 16%);    transform: translateX(50%) scale(calc(0.4 + var(--coin-scale-multiplier))) rotate(calc(var(              --coin-rotation-multiplier            ) * -1deg));    transition: opacity 100ms linear 200ms;    width: 3.5rem;    z-index: 3;  }  .coin__front,  .coin__middle,  .coin__back,  .coin::before,  .coin__front::after,  .coin__back::after {    border-radius: 50%;    box-sizing: border-box;    height: 100%;    left: 0;    position: absolute;    width: 100%;    z-index: 3;  }  .coin__front {    background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),      linear-gradient(210deg, #8590b3 32%, transparent 32%), linear-gradient(150deg, #8590b3 32%, transparent 32%),      linear-gradient(to right, #8590b3 22%, transparent 22%, transparent 78%, #8590b3 78%), linear-gradient(        to bottom,        #fcfaf9 44%,        transparent 44%,        transparent 65%,        #fcfaf9 65%,        #fcfaf9 71%,        #8590b3 71%      ), linear-gradient(to right, transparent 28%, #fcfaf9 28%, #fcfaf9 34%, #8590b3 34%, #8590b3 40%, #fcfaf9 40%, #fcfaf9          47%, #8590b3 47%, #8590b3 53%, #fcfaf9 53%, #fcfaf9 60%, #8590b3 60%, #8590b3 66%, #fcfaf9 66%, #fcfaf9 72%, transparent          72%);    background-color: #8590b3;    background-size: 100% 100%;    transform: translateY(calc(var(--front-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--front-scale-multiplier));  }  .coin__front::after {    background: rgba(0, 0, 0, 0.2);    content: "";    opacity: var(--front-y-multiplier);  }  .coin__middle {    background: #737c99;    transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--middle-scale-multiplier));  }  .coin__back {    background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),      radial-gradient(circle at 50% 40%, #fcfaf9 23%, transparent 23%), radial-gradient(circle at 50% 100%, #fcfaf9 35%, transparent          35%);    background-color: #8590b3;    background-size: 100% 100%;    transform: translateY(calc(var(--back-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--back-scale-multiplier));  }  .coin__back::after {    background: rgba(0, 0, 0, 0.2);    content: "";    opacity: var(--back-y-multiplier);  }  .coin::before {    background: radial-gradient(circle at 25% 65%, transparent 50%, rgba(255, 255, 255, 0.9) 90%), linear-gradient(55deg, transparent          calc(var(--shine-bg-multiplier) + 0%), #e9f4ff calc(var(--shine-bg-multiplier) + 0%), transparent calc(var(                --shine-bg-multiplier              ) + 50%));    content: "";    opacity: var(--shine-opacity-multiplier);    transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / -2)) scaleY(var(--middle-scale-multiplier))      rotate(calc(var(--coin-rotation-multiplier) * 1deg));    z-index: 10;  }  .coin::after {    background: #737c99;    content: "";    height: 0.3181818182rem;    left: 0;    position: absolute;    top: 50%;    transform: translateY(-50%);    width: 100%;    z-index: 2;  }    @keyframes shake {    0% {      transform: rotate(4deg);    }    66% {      transform: rotate(-4deg);    }    100% {      transform: rotate();    }  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/coin/coin.js"/>
      <url>/js/coin/coin.js</url>
      
        <content type="html"><![CDATA[var tipButtons = document.querySelectorAll(".tip-button");function coinAudio() {  var coinAudio = document.getElementById("coinAudio");  if (coinAudio) {    coinAudio.play(); //有音频时播放  }}// Loop through all buttons (allows for multiple buttons on page)tipButtons.forEach(button => {  var coin = button.querySelector(".coin");  // The larger the number, the slower the animation  coin.maxMoveLoopCount = 90;  button.addEventListener("click", () => {    if (/Android|webOS|BlackBerry/i.test(navigator.userAgent)) return true; //媒体选择    if (button.clicked) return;    button.classList.add("clicked");    // Wait to start flipping th coin because of the button tilt animation    setTimeout(() => {      // Randomize the flipping speeds just for fun      coin.sideRotationCount = Math.floor(Math.random() * 5) * 90;      coin.maxFlipAngle = (Math.floor(Math.random() * 4) + 3) * Math.PI;      button.clicked = true;      flipCoin();      coinAudio();    }, 50);  });  var flipCoin = () => {    coin.moveLoopCount = 0;    flipCoinLoop();  };  var resetCoin = () => {    coin.style.setProperty("--coin-x-multiplier", 0);    coin.style.setProperty("--coin-scale-multiplier", 0);    coin.style.setProperty("--coin-rotation-multiplier", 0);    coin.style.setProperty("--shine-opacity-multiplier", 0.4);    coin.style.setProperty("--shine-bg-multiplier", "50%");    coin.style.setProperty("opacity", 1);    // Delay to give the reset animation some time before you can click again    setTimeout(() => {      button.clicked = false;    }, 300);  };  var flipCoinLoop = () => {    coin.moveLoopCount++;    var percentageCompleted = coin.moveLoopCount / coin.maxMoveLoopCount;    coin.angle = -coin.maxFlipAngle * Math.pow(percentageCompleted - 1, 2) + coin.maxFlipAngle;    // Calculate the scale and position of the coin moving through the air    coin.style.setProperty("--coin-y-multiplier", -11 * Math.pow(percentageCompleted * 2 - 1, 4) + 11);    coin.style.setProperty("--coin-x-multiplier", percentageCompleted);    coin.style.setProperty("--coin-scale-multiplier", percentageCompleted * 0.6);    coin.style.setProperty("--coin-rotation-multiplier", percentageCompleted * coin.sideRotationCount);    // Calculate the scale and position values for the different coin faces    // The math uses sin/cos wave functions to similate the circular motion of 3D spin    coin.style.setProperty("--front-scale-multiplier", Math.max(Math.cos(coin.angle), 0));    coin.style.setProperty("--front-y-multiplier", Math.sin(coin.angle));    coin.style.setProperty("--middle-scale-multiplier", Math.abs(Math.cos(coin.angle), 0));    coin.style.setProperty("--middle-y-multiplier", Math.cos((coin.angle + Math.PI / 2) % Math.PI));    coin.style.setProperty("--back-scale-multiplier", Math.max(Math.cos(coin.angle - Math.PI), 0));    coin.style.setProperty("--back-y-multiplier", Math.sin(coin.angle - Math.PI));    coin.style.setProperty("--shine-opacity-multiplier", 4 * Math.sin((coin.angle + Math.PI / 2) % Math.PI) - 3.2);    coin.style.setProperty("--shine-bg-multiplier", -40 * (Math.cos((coin.angle + Math.PI / 2) % Math.PI) - 0.5) + "%");    // Repeat animation loop    if (coin.moveLoopCount < coin.maxMoveLoopCount) {      if (coin.moveLoopCount === coin.maxMoveLoopCount - 6) button.classList.add("shrink-landing");      window.requestAnimationFrame(flipCoinLoop);    } else {      button.classList.add("coin-landed");      coin.style.setProperty("opacity", 0);      setTimeout(() => {        button.classList.remove("clicked", "shrink-landing", "coin-landed");        setTimeout(() => {          resetCoin();        }, 300);      }, 1500);    }  };});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date;function createtime() {    var t = new Date("04/01/2024 00:00:00");    now.setTime(now.getTime() + 250);    var e = (now - t) / 1e3 / 60 / 60 / 24,        a = Math.floor(e),        n = (now - t) / 1e3 / 60 / 60 - 24 * a,        r = Math.floor(n);    1 == String(r).length && (r = "0" + r);    var s = (now - t) / 1e3 / 60 - 1440 * a - 60 * r,        i = Math.floor(s);    1 == String(i).length && (i = "0" + i);    var o = (now - t) / 1e3 - 86400 * a - 3600 * r - 60 * i,        l = Math.round(o);    1 == String(l).length && (l = "0" + l);    let g = "";    g = r < 18 && r >= 9 ? `当社畜，苦逼上班<span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>` : `下班啦！！准时干饭！<span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = g)}// <img class='boardsign' title='距离月入25k也就还差一个大佬带我~'>//<img class='boardsign' src='' title='下班了就该开开心心的玩耍，嘿嘿~'>setInterval((() => {    createtime()}), 250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[window._iconfont_svg_string_4495027='<svg><symbol id="icon-qq" viewBox="0 0 1024 1024"><path d="M512 0C229.224296 0 0 229.224296 0 512s229.224296 512 512 512 512-229.224296 512-512S794.775704 0 512 0zM801.261037 668.86163c-21.731556 18.640593-49.948444-61.345185-54.006519-49.038222-9.879704 29.923556-14.506667 49.929481-43.633778 82.507852-1.554963 1.744593 33.659259 14.468741 43.633778 41.642667 9.557333 26.017185 28.141037 67.26163-93.487407 80.213333-71.35763 7.585185-122.936889-38.020741-128.075852-37.584593-9.53837 0.83437-5.290667 0-15.530667 0-8.38163 0-8.931556 0.606815-16.820148 0-2.161778-0.170667-25.884444 37.584593-131.963259 37.584593-82.223407 0-103.518815-51.749926-86.983111-80.213333 16.535704-28.463407 44.126815-36.750222 40.239407-41.263407-19.152593-22.186667-32.350815-45.909333-40.239407-67.356444-1.953185-5.347556-3.584-10.543407-4.873481-15.530667-2.996148-11.45363-25.884444 67.204741-50.460444 49.038222-24.576-18.166519-22.376296-64.417185-6.46637-108.676741 16.042667-44.619852 56.471704-87.589926 56.926815-97.071407 1.611852-35.290074-3.489185-41.14963 0-50.422519 7.755852-20.764444 17.199407-12.8 17.199407-23.570963 0-135.736889 100.864-245.76 225.28-245.76s225.28 110.042074 225.28 245.76c0 5.195852 13.520593 0 19.986963 23.570963 1.327407 4.873481 2.23763 23.665778 0.663704 50.422519-0.739556 12.856889 34.266074 28.501333 52.375704 97.071407C828.434963 628.754963 810.30637 661.105778 801.261037 668.86163z" fill="#68A5E1" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1024 1024"><path d="M1014.543678 9.459202a32.239736 32.239736 0 0 0-34.383718-7.30394L20.66383 371.592232a32.295735 32.295735 0 0 0-20.367832 25.783788 32.303735 32.303735 0 0 0 12.799895 30.255752L348.557141 675.493739l247.813967 335.437248a32.327735 32.327735 0 0 0 30.247752 12.783895 32.255735 32.255735 0 0 0 25.791788-20.367833L1021.847618 43.84292a32.279735 32.279735 0 0 0-7.30394-34.383718zM98.639191 410.663911l762.833742-293.70959-493.019955 493.051955L98.639191 410.663911z m514.699778 514.699778L414.036604 655.589902l493.003955-493.035955-293.70159 762.809742z" fill="#838384" ></path></symbol><symbol id="icon-ATG-youxiang" viewBox="0 0 1024 1024"><path d="M831.3 192.5h-14.1c-17.6 0-31.9 14.3-31.9 31.9v0.1c0 17.5 14.2 31.7 31.7 31.7 8.6 0 16.8 1.4 24.6 3.9L510.8 591 180.9 261.2c8.6-3.2 18-5 27.8-5h432.8c17.6 0 31.9-14.3 31.9-31.9 0-17.6-14.3-31.9-31.9-31.9H191.3c-70.7 0-128 57.3-128 128V704c0 70.7 57.3 128 128 128h640c70.7 0 128-57.3 128-128V320.5c0-70.7-57.3-128-128-128z m65.8 495.7c0 44.2-35.8 80-80 80H208.7c-44.2 0-80-35.8-80-80v-352c0-10.7 2.1-20.9 5.9-30.3l330.6 330.6c25.2 25.2 65.9 25.2 91.1 0L889.9 303c4.6 10.1 7.2 21.4 7.2 33.2v352z" fill="#4A90E2" ></path></symbol><symbol id="icon-RSS" viewBox="0 0 1024 1024"><path d="M245.324385 913.116229a110.883771 110.883771 0 1 1-110.883771-110.883771A110.883771 110.883771 0 0 1 245.324385 913.116229zM155.901989 1.00779A118.484675 118.484675 0 0 0 61.114249 30.517181 115.802003 115.802003 0 0 0 21.768395 117.256905a117.590451 117.590451 0 0 0 104.177092 114.907779c327.733081 41.581414 603.601173 337.569545 641.158578 688.552449a114.460667 114.460667 0 0 0 114.907779 102.835755 118.037563 118.037563 0 0 0 89.422396-38.898742 113.119331 113.119331 0 0 0 28.615167-89.422396C949.525753 440.965978 586.470826 56.449676 155.901989 1.00779z m7.600904 381.833631A110.883771 110.883771 0 0 0 66.479593 403.408572a117.143339 117.143339 0 0 0-44.711198 92.55218 114.460667 114.460667 0 0 0 89.422396 112.225107c134.133594 32.192063 250.382709 163.642985 279.8921 318.790841a116.249115 116.249115 0 0 0 112.225106 93.446404 116.696227 116.696227 0 0 0 89.422396-42.028526 112.672219 112.672219 0 0 0 24.591159-93.446404C571.71613 643.060593 383.929099 436.494859 161.267333 383.735645z" fill="#3E2AD1" ></path></symbol><symbol id="icon-github" viewBox="0 0 1024 1024"><path d="M512 0C229.283787 0 0.142041 234.942803 0.142041 524.867683c0 231.829001 146.647305 428.553077 350.068189 497.952484 25.592898 4.819996 34.976961-11.38884 34.976961-25.294314 0-12.45521-0.469203-45.470049-0.725133-89.276559-142.381822 31.735193-172.453477-70.380469-172.453477-70.380469-23.246882-60.569859-56.816233-76.693384-56.816234-76.693385-46.493765-32.58829 3.540351-31.948468 3.540351-31.948467 51.356415 3.71097 78.356923 54.086324 78.356923 54.086324 45.683323 80.19108 119.817417 57.072162 148.993321 43.593236 4.649376-33.91059 17.915029-57.029508 32.50298-70.167195-113.675122-13.222997-233.151301-58.223843-233.1513-259.341366 0-57.285437 19.919806-104.163095 52.678715-140.846248-5.246544-13.265652-22.820334-66.626844 4.990615-138.884127 0 0 42.996069-14.076094 140.760939 53.787741 40.863327-11.644769 84.627183-17.445825 128.177764-17.6591 43.465272 0.213274 87.271782 6.014331 128.135109 17.6591 97.679561-67.906489 140.59032-53.787741 140.59032-53.787741 27.938914 72.257282 10.407779 125.618474 5.118579 138.884127 32.844219 36.683154 52.593405 83.560812 52.593405 140.846248 0 201.586726-119.646798 245.990404-233.663158 258.957473 18.341577 16.208835 34.721032 48.199958 34.721032 97.210357 0 70.167195-0.639822 126.7275-0.639823 143.960051 0 14.033439 9.213443 30.370239 35.190235 25.209005 203.250265-69.527373 349.769606-266.123484 349.769605-497.867175C1023.857959 234.942803 794.673558 0 512 0" fill="#3E75C3" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75h-738.7a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-shengdanbingqilin" viewBox="0 0 1024 1024"><path d="M664.522464 954.0928l72.896 1.024a11.808 11.808 0 0 0 11.84-9.984l29.056-190.592c0.64-4.1856-0.7872-8.448-3.84-11.456l-74.496-73.792-155.328-190.272c-2.2592-2.7264-3.3472-2.3232-3.264 1.216l2.048 153.92a4.672 4.672 0 0 0 2.688 4.352c117.312 61.12 51.328 224-75.328 183.232-72.448-23.36-85.568-110.976-29.888-161.152a174.528 174.528 0 0 1 31.36-22.528c2.56-1.4144 4.16-4.1088 4.16-7.04l0.384-137.664c0-8.576-2.752-9.6-8.256-3.072a32646.2272 32646.2272 0 0 1-146.88 172.736c-27.0912 31.6608-49.5552 56.1088-67.392 73.344-13.12 12.736-49.664 8.96-62.464 5.12-17.152-5.184-19.2-38.976-22.464-60.352-15.0144-99.7504-30.272-200-45.76-300.736a6.432 6.432 0 0 0-3.584-4.8c-100.544-45.952-103.68-173.12-13.504-231.424 1.92-1.2352 3.072-2.9824 3.456-5.248 1.152-6.528 1.8176-13.0304 1.984-19.52 1.536-63.936 71.616-122.112 134.336-117.568 12.2496 0.8576 29.8688 6.1888 52.864 16a2041.3056 2041.3056 0 0 1 206.656 102.08c3.4176 1.92 7.0016 3.3088 10.752 4.16 2.1376 0.4736 4.1408 0.128 6.016-1.024a1714.5792 1714.5792 0 0 1 161.216-85.184c43.52-20.096 70.0608-31.2704 79.616-33.536 80.896-19.456 151.936 51.776 150.08 131.072a10.048 10.048 0 0 0 4.352 8.512c44.16 30.72 64.6208 71.5776 61.376 122.56-3.584 56.32-32 85.696-81.344 106.432a5.6448 5.6448 0 0 0-3.584 4.736c-20.9472 153.6-50.8544 356.928-89.728 609.984-2.6432 17.2416-12.1152 27.008-28.416 29.312-27.328 3.968-58.624 1.216-80.064 1.152-146.304-0.2112-292.608-0.192-438.912 0.064-24.512 0.064-39.424-4.864-43.712-30.208a3795.648 3795.648 0 0 1-27.392-190.784c-2.0864-17.7472 5.76-27.6224 23.552-29.632l6.144-0.704c16.8128-1.8752 26.496 5.5488 29.056 22.272l24.256 159.744c0.544 3.7824 3.8336 6.5728 7.68 6.528l387.776-1.28z m104.32-881.6c-59.776 25.28-118.912 51.328-177.984 78.208-1.024 0.4736-1.1712 1.1136-0.448 1.92l36.8 44.352c0.7488 0.896 1.9328 1.28 3.008 0.96 54.0608-14.976 107.8656-29.3952 161.408-43.264 30.784-8 74.56-20.544 50.112-59.968-17.3632-28.032-41.664-35.4304-72.896-22.208z m-446.848 174.848l9.28-71.296a2.8544 2.8544 0 0 1 1.2352-2.0096 2.7136 2.7136 0 0 1 2.2848-0.3584l57.344 17.024a2.144 2.144 0 0 0 2.304-0.832l30.144-43.52c0.6016-0.896 0.4096-1.536-0.576-1.92a2230.3936 2230.3936 0 0 1-117.248-52.096c-28.032-13.44-53.824-29.504-76.032-23.872-32.384 8.256-91.008 62.848-33.088 85.952 19.1616 7.6416 33.0496 12.416 41.664 14.336 4.736 1.0688 6.9568 4.0128 6.656 8.832l-2.688 43.392a4.9024 4.9024 0 0 1-1.8752 3.5712 4.7616 4.7616 0 0 1-3.8848 0.9088 1329.536 1329.536 0 0 1-70.144-15.936c-26.496-6.784-46.656-8.96-57.472 19.264-15.872 41.408 7.936 87.872 54.784 89.088 74.9248 1.8816 149.7856 5.1456 224.576 9.792a2.7968 2.7968 0 0 0 2.4576-1.216 2.6432 2.6432 0 0 0 0.1664-2.688 189.504 189.504 0 0 1-18.048-60.864 4.704 4.704 0 0 0-3.84-4.096l-45.888-8.512c-1.6192-0.2944-2.3232-1.28-2.112-2.944z m173.632 73.5424c16.7808 1.7664 33.6384-3.7952 46.8544-15.4496 13.2224-11.6544 21.728-28.4544 23.648-46.7072 3.9936-37.9968-21.0944-71.7824-56.0384-75.456-16.7808-1.76-33.632 3.7952-46.848 15.456-13.2288 11.6544-21.7344 28.4544-23.648 46.7008-3.9936 38.0032 21.0944 71.7824 56.032 75.456z m238.912 182.848c78.4-5.632 32.448 90.112-1.856 81.984-6.0544-1.408-11.84-5.376-17.344-11.904-6.8224-8.064-8.6592-7.0656-5.504 3.008 7.296 23.104 57.664 66.624 77.312 82.752a2.816 2.816 0 0 0 4.608-1.792l38.272-273.536a3.008 3.008 0 0 0-3.136-3.456l-87.616 3.968c-22.208-0.064-54.464 5.248-66.752-15.36-10.944-18.368 1.792-39.552 19.072-47.808 6.3168-3.072 15.8976-4.4608 28.736-4.16 38.784 0.896 77.568 0.256 116.352-1.92 36.864-2.048 72.512-9.984 77.632-52.608 3.456-28.672-18.432-71.936-53.696-62.144-81.088 22.592-162.176 38.08-236.096 76.096a13.504 13.504 0 0 0-7.04 14.72c3.904 19.072 11.456 45.056 6.976 61.824-9.344 34.688-52.224 18.048-75.648 13.952-10.4512-1.8368-12.2432 1.2992-5.376 9.408l150.72 177.344c4.9088 5.76 6.8928 4.9024 5.952-2.56-2.944-23.3856 8.5376-39.3216 34.432-47.808z m-338.176-119.488l-207.552 0.576a0.608 0.608 0 0 0-0.4736 0.224 0.7424 0.7424 0 0 0-0.1664 0.5376 50236.352 50236.352 0 0 1 36.16 222.08c3.0336 18.7776 5.2288 36.928 6.592 54.464 0.5568 6.912 2.9888 7.6416 7.296 2.176l56.96-72.64a2.56 2.56 0 0 0-2.112-4.16c-14.2912 0.6016-27.2192-3.584-38.784-12.544-18.304-14.08-23.68-45.824 1.088-56.768 27.84-12.352 65.216 5.952 55.488 40.128a3.392 3.392 0 0 0 6.144 2.624c3.5008-5.9712 8.5376-12.8384 15.104-20.608 33.664-39.808 67.2256-79.744 100.672-119.808a266.5984 266.5984 0 0 0 23.232-32.512 8.384 8.384 0 0 0-6.016-12.672c-14.208-1.856-33.408-7.424-39.68-22.4-6.9952-16.6784-10.5344-15.744-10.624 2.816-0.0384 7.808 0.3008 15.7056 1.024 23.68 0.3008 3.2-1.152 4.8-4.352 4.8z m150.4 349.8944c2.048-20.544-14.144-38.976-36.16-41.1712-22.016-2.1952-41.5232 12.672-43.5776 33.216-2.048 20.5376 14.144 38.976 36.16 41.1648 22.016 2.2016 41.5232-12.672 43.5712-33.2096z" fill="#343333" ></path><path d="M590.858464 150.7008c59.072-26.88 118.208-52.928 177.984-78.208 31.232-13.2224 55.5328-5.824 72.896 22.208 24.448 39.424-19.328 51.968-50.112 59.968a9913.3632 9913.3632 0 0 0-161.408 43.264 2.88 2.88 0 0 1-3.008-0.96l-36.8-44.352c-0.7232-0.8064-0.576-1.4464 0.448-1.92zM324.106464 250.2848l45.888 8.512c2.0544 0.384 3.616 2.048 3.84 4.096a189.504 189.504 0 0 0 18.048 60.864 2.6432 2.6432 0 0 1-0.1664 2.688 2.7968 2.7968 0 0 1-2.4576 1.216 6067.4304 6067.4304 0 0 0-224.576-9.792c-46.848-1.216-70.656-47.68-54.784-89.088 10.816-28.224 30.976-26.048 57.472-19.264a1329.536 1329.536 0 0 0 70.144 15.936 4.7616 4.7616 0 0 0 3.8848-0.9088 4.9024 4.9024 0 0 0 1.8752-3.5712l2.688-43.392c0.3008-4.8192-1.92-7.7632-6.656-8.832-8.6144-1.92-22.5024-6.6944-41.664-14.336-57.92-23.104 0.704-77.696 33.088-85.952 22.208-5.632 48 10.432 76.032 23.872a2230.3936 2230.3936 0 0 0 117.248 52.096c0.9856 0.384 1.1776 1.024 0.576 1.92l-30.144 43.52a2.144 2.144 0 0 1-2.304 0.832l-57.344-17.024a2.7136 2.7136 0 0 0-2.2848 0.3584 2.8544 2.8544 0 0 0-1.2352 2.0096l-9.28 71.296c-0.2112 1.664 0.4928 2.6496 2.112 2.944z" fill="#FCC556" ></path><path d="M510.090161 183.271797a63.616 69.184 6 1 0-14.463394 137.610006 63.616 69.184 6 1 0 14.463394-137.610006Z" fill="#FCC556" ></path><path d="M739.274464 384.7488c1.5808 39.7696 0 79.424-4.736 118.976-25.8944 8.4928-37.376 24.4288-34.432 47.808 0.9408 7.4688-1.0432 8.32-5.952 2.56l-150.72-177.344c-6.8672-8.1024-5.0752-11.2384 5.376-9.408 23.424 4.096 66.304 20.736 75.648-13.952 4.48-16.768-3.072-42.752-6.976-61.824a13.504 13.504 0 0 1 7.04-14.72c73.92-38.016 155.008-53.504 236.096-76.096 35.264-9.792 57.152 33.472 53.696 62.144-5.12 42.624-40.768 50.56-77.632 52.608-38.784 2.176-77.568 2.816-116.352 1.92-12.8384-0.2944-22.4192 1.088-28.736 4.16-17.28 8.256-30.016 29.44-19.072 47.808 12.288 20.608 44.544 15.296 66.752 15.36zM400.714464 379.4368a246.56 246.56 0 0 1-1.024-23.68c0.0896-18.56 3.6288-19.4944 10.624-2.816 6.272 14.976 25.472 20.544 39.68 22.4a8.384 8.384 0 0 1 6.016 12.672 266.5984 266.5984 0 0 1-23.232 32.512c-33.4464 40.064-67.008 80-100.672 119.808-6.5664 7.7696-11.6032 14.6368-15.104 20.608a3.392 3.392 0 0 1-6.144-2.624c9.728-34.176-27.648-52.48-55.488-40.128-24.768 10.944-19.392 42.688-1.088 56.768 11.5648 8.96 24.4928 13.1456 38.784 12.544a2.56 2.56 0 0 1 2.112 4.16l-56.96 72.64c-4.3072 5.4656-6.7392 4.736-7.296-2.176-1.3632-17.536-3.5584-35.6864-6.592-54.464a50236.352 50236.352 0 0 0-36.16-222.08 0.7424 0.7424 0 0 1 0.1664-0.5376 0.608 0.608 0 0 1 0.4736-0.2304l207.552-0.576c3.2 0 4.6528-1.6 4.352-4.8z" fill="#FCC556" ></path><path d="M734.538464 503.7248c4.736-39.552 6.3168-79.2064 4.736-118.976l87.616-3.968a3.008 3.008 0 0 1 3.136 3.456l-38.272 273.536a2.816 2.816 0 0 1-4.608 1.792c-19.648-16.128-70.016-59.648-77.312-82.752-3.1552-10.0672-1.3184-11.072 5.504-3.008 5.504 6.528 11.2896 10.496 17.344 11.904 34.304 8.128 80.256-87.616 1.856-81.984z" fill="#CA9F54" ></path><path d="M699.978464 669.2928l74.496 73.792c3.0528 3.008 4.48 7.2704 3.84 11.456l-29.056 190.592a11.808 11.808 0 0 1-11.84 9.984l-72.896-1.024 35.456-284.8z" fill="#CBCCCE" ></path><path d="M467.024558 726.177654a40.064 37.376 5.7 1 0 79.731812 7.958292 40.064 37.376 5.7 1 0-79.731812-7.958292Z" fill="#FCC556" ></path></symbol><symbol id="icon-shengdanguaizhang" viewBox="0 0 1024 1024"><path d="M441.072742 11.982834c189.202649-39.400265 406.005828 72.832848 431.097218 280.006358 7.730861 63.657536-11.908238 116.098543-58.930861 157.329801-79.275232 69.509934-215.650331 37.704901-236.401589-72.42596-4.475762-23.938543 8.137748-51.132185-12.884768-69.374305-28.027762-24.453934-54.183841-22.555126-78.461457 5.696424-25.132079 29.343364-35.690808 63.677881-31.669404 103.010331a552.485298 552.485298 0 0 0 15.936424 85.988875c17.292715 64.288212 34.58543 125.456954 57.506755 190.626755 19.08302 54.346596 31.330331 90.308662 36.755496 107.89298 32.076291 104.230993-24.34543 214.361854-140.443973 218.769801-62.389404 2.305695-107.323338-23.958887-134.815364-78.80053-25.905166-51.606887-43.401325-100.229934-64.627285-160.381457-34.449801-97.788609-57.710199-196.662252-69.781192-296.620927-25.701722-212.598675 60.354967-424.519205 286.72-471.718146z m121.25245 211.378014c24.372556 9.54151 45.890119 22.85351 64.55947 39.942781 2.217536 2.034437 4.455417 2.061563 6.713643 0.067815 20.120583-18.079364 34.700715-40.078411 43.740397-65.983576 5.49298-15.665166 7.527417-37.84053 11.189404-56.014835 1.946278-9.717828-0.718834-16.838358-8.002119-21.361589-74.094199-45.883338-153.260927-57.933987-237.486623-36.145166-2.69902 0.678146-4.780927 2.814305-5.411602 5.54045-0.623894 2.719364 0.311947 5.581139 2.427761 7.412133a606.743735 606.743735 0 0 1 101.043709 110.809007c5.628609 8.002119 12.681325 12.342252 21.22596 15.73298z m-271.73298 14.647947c41.638146 13.793483 79.071788 36.802967 112.300927 69.035231 1.274914 1.25457 3.092344 1.763179 4.84196 1.369855a5.404821 5.404821 0 0 0 3.838305-3.336477c11.487788-31.059073 31.018384-55.648636 58.591788-73.782252a4.204503 4.204503 0 0 0 1.152848-5.764238 145.136742 145.136742 0 0 0-25.633908-30.041854c-27.349616-24.277616-53.275126-48.148344-77.783311-71.612186-4.428291-7.188344-10.599417-8.090278-18.513377-2.712583-36.891126 24.955762-67.495841 59.093616-91.820927 102.4-1.308821 2.305695-0.69849 3.86543 1.830993 4.679206l31.194702 9.765298z m383.287947 78.122384c-20.886887 9.270252-30.014728 22.15502-27.397086 38.654304 7.147656 45.076344 35.670464 65.373245 85.581987 60.897484 21.612503-6.822146 38.701775-20.005298 51.267814-39.535894 36.891126-57.167682 8.951523-141.664636-31.194702-190.152053-5.560795-6.733987-8.51751-5.737113-8.883708 2.983841-1.898808 46.886993-21.402278 86.938278-58.523974 120.167417-4.204503 3.756927-7.81902 6.082967-10.850331 6.984901z m-384.644238 290.314172c37.026755-32.34755 65.983576-61.44 106.807947-87.684238 3.567046-2.271788 5.309881-6.56445 4.340132-10.714702a626.999947 626.999947 0 0 1-15.393907-109.249272c-2.102252-41.299073-88.972715-82.191258-123.219073-94.465695l-27.058013-8.951523a4.814834 4.814834 0 0 0-6.171126 3.458543c-27.464901 112.233113-7.188344 231.858013 24.34543 340.903841a3.797616 3.797616 0 0 0 6.578014 1.424106l29.770596-34.72106z m31.737218 65.780132l-43.33351 42.58755c-2.366728 2.319258-3.187285 5.784583-2.102252 8.883709l44.079471 129.051126a2.509139 2.509139 0 0 0 4.340132 0.74596l36.755497-45.232318c26.990199-28.143046 63.270993-58.523974 102.196556-67.204238a5.086093 5.086093 0 0 0 3.729801-6.510199l-43.808211-138.680795c-1.125722-3.661987-3.187285-4.272318-6.171126-1.830993l-95.686358 78.190198z m95.550729 175.639736c-20.276556 19.462781-42.384106 44.486358-48.690861 70.323708a9.290596 9.290596 0 0 0 0.74596 6.510199c5.201377 10.579073 13.250967 18.493033 24.141987 23.735099 0.813775 2.760053 3.234755 4.407947 7.256159 4.950464 58.184901 8.341192 113.250331-38.247417 110.944635-98.466755-0.583205-16.139868-4.109563-32.320424-10.579073-48.555232a11.325033 11.325033 0 0 0-14.783576-6.306755c-29.248424 11.799735-52.257907 27.736159-69.035231 47.809272z" fill="#343333" ></path><path d="M562.325192 223.360848c-8.544636-3.390728-15.597351-7.730861-21.22596-15.73298a606.743735 606.743735 0 0 0-101.043709-110.809007 7.574887 7.574887 0 0 1-2.427761-7.412133c0.630675-2.726146 2.712583-4.855523 5.411602-5.54045 84.225695-21.788821 163.392424-9.738172 237.486623 36.145166 7.283285 4.523232 9.948397 11.643762 8.002119 21.361589-3.661987 18.174305-5.696424 40.349669-11.189404 56.014835-9.039682 25.905166-23.619815 47.904212-43.740397 65.983576-2.258225 1.993748-4.496106 1.966623-6.713643-0.067815-18.669351-17.089272-40.186914-30.401272-64.55947-39.942781z" fill="#FF5646" ></path><path d="M367.900821 123.876874c-30.516556 22.243179-45.639205 44.350728-60.287152 80.021192a242.403179 242.403179 0 0 1-17.021457 34.110729l-31.194702-9.765298c-2.529483-0.813775-3.139815-2.37351-1.830993-4.679206 24.325086-43.306384 54.929801-77.444238 91.820927-102.4 7.91396-5.377695 14.085086-4.475762 18.513377 2.712583z" fill="#FBD2BD" ></path><path d="M367.900821 123.876874c24.508185 23.463841 50.433695 47.33457 77.783311 71.612186a145.136742 145.136742 0 0 1 25.633908 30.041854 4.204503 4.204503 0 0 1-1.152848 5.764238c-27.573404 18.133616-47.104 42.723179-58.591788 73.782252a5.404821 5.404821 0 0 1-3.838305 3.336477 5.242066 5.242066 0 0 1-4.84196-1.369855c-33.229139-32.232265-70.662781-55.241748-112.300927-69.035231a242.403179 242.403179 0 0 0 17.021457-34.110729c14.647947-35.670464 29.770596-57.778013 60.287152-80.021192zM732.06506 415.682967c-31.642278-27.803974-51.037245-60.985642-58.184901-99.551788 3.031311-0.901934 6.645828-3.227974 10.850331-6.984901 37.121695-33.229139 56.625166-73.280424 58.523974-120.167417 0.366199-8.720954 3.322914-9.717828 8.883708-2.983841 40.146225 48.487417 68.085828 132.984371 31.194702 190.152053-12.56604 19.530596-29.655311 32.713748-51.267814 39.535894z" fill="#FF5646" ></path><path d="M261.77102 304.331444c-10.850331 33.547868-15.597351 68.472371-14.24106 104.77351 2.536265 67.773881 16.438252 133.554013 41.705961 197.340397l-29.770596 34.72106a3.797616 3.797616 0 0 1-6.578014-1.424106c-31.533775-109.045828-51.810331-228.670728-24.34543-340.903841a4.814834 4.814834 0 0 1 6.171126-3.458543l27.058013 8.951523z" fill="#FBD2BD" ></path><path d="M261.77102 304.331444c34.246358 12.274437 121.116821 53.166623 123.219073 94.465695a626.999947 626.999947 0 0 0 15.393907 109.249272 10.002649 10.002649 0 0 1-4.340132 10.714702c-40.824371 26.244238-69.781192 55.336689-106.807947 87.684238-25.267709-63.786384-39.169695-129.566517-41.705961-197.340397-1.356291-36.301139 3.390728-71.225642 14.24106-104.77351z" fill="#FF5646" ></path><path d="M673.880159 316.131179c7.147656 38.566146 26.542623 71.747815 58.184901 99.551788-49.911523 4.475762-78.434331-15.821139-85.581987-60.897484-2.617642-16.499285 6.510199-29.384053 27.397086-38.654304z" fill="#FEFEFE" ></path><path d="M360.712477 808.26151a550.111788 550.111788 0 0 1-39.739338-136.036027l95.686358-78.190198c2.983841-2.441325 5.045404-1.830993 6.171126 1.830993l43.808211 138.680795a5.086093 5.086093 0 0 1-3.729801 6.510199c-38.925563 8.680265-75.206358 39.061192-102.196556 67.204238z" fill="#FF5646" ></path><path d="M320.973139 672.225483a550.111788 550.111788 0 0 0 39.739338 136.036027l-36.755497 45.232318a2.509139 2.509139 0 0 1-4.340132-0.74596l-44.079471-129.051126c-1.085033-3.099126-0.264477-6.56445 2.102252-8.883709l43.33351-42.58755z" fill="#FBD2BD" ></path><path d="M392.720954 948.434225c3.797616-1.308821 5.696424-3.661987 5.696423-7.052715-0.311947-31.872848 5.72355-63.040424 18.106491-93.516291 16.777325-20.073113 39.786808-36.009536 69.035231-47.809272a11.325033 11.325033 0 0 1 14.783576 6.306755c6.46951 16.234808 9.995868 32.415364 10.579073 48.555232 2.305695 60.219338-52.759735 106.807947-110.944635 98.466755-4.021404-0.542517-6.442384-2.190411-7.256159-4.950464z" fill="#CD4C3D" ></path><path d="M416.523868 847.865219c-12.38294 30.475868-18.418437 61.643444-18.106491 93.516291 0 3.390728-1.898808 5.743894-5.696423 7.052715-10.89102-5.242066-18.940609-13.156026-24.141987-23.735099a9.290596 9.290596 0 0 1-0.74596-6.510199c6.306755-25.837351 28.414305-50.860927 48.690861-70.323708z" fill="#FBD2BD" ></path></symbol><symbol id="icon-shengdanlihe" viewBox="0 0 1024 1024"><path d="M776.151311 252.860185c9.900927 2.665113 20.344371 4.136689 31.330331 4.407947 80.468768 2.258225 131.736583 3.275444 153.803444 3.051656 34.809219-0.318728 52.461351 16.499285 52.963179 50.45404a1238.212662 1238.212662 0 0 1-4.950464 128.779867c-2.170066 23.735099-37.298013 19.394967-53.641324 18.784636a5.221722 5.221722 0 0 0-5.289537 4.340133 12176.173775 12176.173775 0 0 0-76.766092 493.825695c-2.576954 19.171179-6.672954 36.91147-12.274437 53.234437a14.342781 14.342781 0 0 1-13.562914 9.697483c-218.362914-0.271258-436.705483-0.250914-655.020927 0.067815-23.59947 0-43.33351-5.764238-47.063312-30.652185-26.542623-175.551576-53.397192-350.804768-80.563708-525.766358a4.00106 4.00106 0 0 0-4.068875-3.322914c-17.157086 0.406887-50.793113 5.221722-51.94596-21.090331A4182.002437 4182.002437 0 0 1 5.628609 310.706013c-0.406887-37.298013 21.497219-51.064371 57.303312-50.928741 60.585536 0.135629 120.825219 0.135629 180.725827 0a4.204503 4.204503 0 0 0 3.119471-6.984901 379.551364 379.551364 0 0 1-47.944901-68.357086c-16.004238-29.024636-2.441325-44.282914 16.885828-70.323709 28.848318-38.742464 52.603762-67.387338 71.273112-85.921059 27.261457-27.037669 59.676821-31.126887 97.246093-12.274438 13.067868 6.598358 35.107603 26.447682 66.119205 59.541193a5646.193589 5646.193589 0 0 0 62.050331 65.237615c1.763179 1.851338 3.458543 1.783523 5.086093-0.203443 41.461828-51.084715 81.309669-91.095311 119.557086-120.031788 27.898914-21.110675 54.997616-25.091391 81.309669-11.935365 12.030305 6.015152 27.783629 21.361589 47.266755 46.046093a1771.757351 1771.757351 0 0 0 53.302252 64.356027c15.868609 18.309934 27.736159 34.381987 17.835232 57.099867-13.562914 31.126887-36.687682 51.674702-61.44 73.375364a2.034437 2.034437 0 0 0 0.813774 3.458543z m-325.374304-34.721059l4.340132-1.017219c17.041801-4.157033 19.890013-12.932238 8.544636-26.312053a1202.487947 1202.487947 0 0 0-113.250331-115.962914c-3.980715-3.573828-7.778331-3.390728-11.392848 0.542517l-30.652185 33.364768c-3.797616 4.116344-3.30257 7.663046 1.49192 10.646888 38.383046 23.735099 63.81351 50.182781 100.501192 87.345165 11.297907 11.440318 24.772662 15.237934 40.417484 11.392848z m112.50437-24.616689a14.410596 14.410596 0 0 0 2.034438 17.021457c14.512318 15.258278 32.279735 4.679205 46.45298-7.323973 34.354861-29.248424 67.719629-56.102993 100.094304-80.563709 10.212874-7.730861 11.074119-16.363656 2.576954-25.905166l-14.173245-16.072053c-8.680265-9.812768-18.018331-10.511258-28.007417-2.102251-40.756556 34.246358-84.157881 71.069669-108.978014 114.945695z m184.794702-33.161324l-72.42596 62.050331a1.288477 1.288477 0 0 0-0.135629 1.830993l0.474702 0.542517c2.74649 3.214411 8.815894 3.35004 16.865483 0.386543s17.428344-8.781987 26.06114-16.187338l9.222781-7.934305c8.632795-7.39857 15.827921-15.773669 19.984954-23.280741 4.157033-7.507073 4.950464-13.522225 2.19041-16.729855l-0.406887-0.542516a1.288477 1.288477 0 0 0-1.830994-0.135629z m-400.10596 59.880264l-71.408742-53.980397a1.017219 1.017219 0 0 0-1.424105 0.203444l-0.474702 0.678146c-2.753272 3.628079-1.647894 9.934834 3.072 17.543629 4.713113 7.602013 12.66098 15.882172 22.087205 23.009483l1.966622 1.491921c9.439788 7.140874 19.584848 12.545695 28.197298 15.007364 8.61245 2.46845 14.98702 1.803868 17.713166-1.851338l0.474702-0.678146a1.017219 1.017219 0 0 0-0.203444-1.424106z m202.969007 102.128742a5.560795 5.560795 0 0 0-5.696424-5.628609l-65.169801 1.830993a5.560795 5.560795 0 0 0-5.425166 5.560795l-0.067814 65.101987a5.560795 5.560795 0 0 0 5.560794 5.560794l64.288212-0.135629a5.560795 5.560795 0 0 0 5.560795-5.49298l0.949404-66.797351z m267.189404 73.171921l120.845563 0.74596a5.899868 5.899868 0 0 0 5.967682-5.832053l1.017218-64.084768a1.939497 1.939497 0 0 0-0.576423-1.430888 2.068344 2.068344 0 0 0-1.458014-0.603549l-116.844503 0.203443-197.882914-0.74596a4.068874 4.068874 0 0 0-4.068874 4.00106l-0.678146 64.152583a3.899338 3.899338 0 0 0 1.146066 2.827867c0.74596 0.74596 1.776742 1.173192 2.848212 1.173192l189.677351-0.406887z m-411.620874-65.325775a5.899868 5.899868 0 0 0-5.906649-5.886305l-319.81351 0.55608a5.899868 5.899868 0 0 0-5.893086 5.91343l0.101721 58.727417c0.006781 3.255099 2.65155 5.899868 5.913431 5.886305l319.81351-0.556079a5.899868 5.899868 0 0 0 5.886304-5.913431l-0.101721-58.727417zM230.311841 459.965881l-95.550728 0.203444a2.265007 2.265007 0 0 0-1.763179 0.806993 2.414199 2.414199 0 0 0-0.542517 1.905589l76.020133 484.874172c0.176318 1.308821 0.922278 1.966623 2.23788 1.966623l77.30861 0.610331 117.047947 1.017219a3.187285 3.187285 0 0 0 3.255099-3.187285l0.339073-486.705166a2.848212 2.848212 0 0 0-2.848212-2.848212l-175.504106 1.356292z m318.931921 4.543576a4.475762 4.475762 0 0 0-4.475762-4.475762h-63.881325a4.475762 4.475762 0 0 0-4.475761 4.475762v481.890331c0 2.475232 2.00053 4.475762 4.475761 4.475762h63.881325a4.475762 4.475762 0 0 0 4.475762-4.475762v-481.890331z m156.583841 486.298278l95.957616-0.203444c3.255099-0.04747 5.153907-1.67502 5.696423-4.882649l76.155762-481.754702c0.406887-2.529483-0.657801-3.797616-3.187285-3.797615l-92.499073 0.067814-165.467549-0.610331a3.661987 3.661987 0 0 0-3.661987 3.661987l-3.526358 481.483443a5.086093 5.086093 0 0 0 5.018278 5.153908l85.514173 0.881589z" fill="#343333" ></path><path d="M450.777007 218.139126c-15.644821 3.845086-29.119576 0.04747-40.417484-11.392848-36.687682-37.162384-62.118146-63.610066-100.501192-87.345165-4.79449-2.983841-5.289536-6.530543-1.49192-10.646888l30.652185-33.364768c3.614517-3.933245 7.412132-4.116344 11.392848-0.542517a1202.487947 1202.487947 0 0 1 113.250331 115.962914c11.345377 13.379815 8.497166 22.15502-8.544636 26.312053l-4.340132 1.017219zM563.281377 193.522437c24.820132-43.876026 68.221457-80.699338 108.978014-114.945695 9.989086-8.409007 19.327152-7.710517 28.007417 2.102251l14.173245 16.072053c8.497166 9.54151 7.635921 18.174305-2.576954 25.905166-32.374675 24.460715-65.739444 51.315285-100.094304 80.563709-14.173245 12.003179-31.940662 22.582252-46.45298 7.323973a14.410596 14.410596 0 0 1-2.034438-17.021457zM748.076079 160.361113a1.288477 1.288477 0 0 1 1.830994 0.135629l0.406887 0.542516c2.753272 3.207629 1.966623 9.222781-2.19041 16.729855s-11.352159 15.882172-19.984954 23.280741l-9.222781 7.934305c-8.632795 7.405351-18.01155 13.223841-26.06114 16.187338-8.049589 2.963497-14.118993 2.827868-16.865483-0.386543l-0.474702-0.542517a1.288477 1.288477 0 0 1 0.135629-1.830993l72.42596-62.050331zM347.970119 220.241377a1.017219 1.017219 0 0 1 0.203444 1.424106l-0.474702 0.678146c-2.726146 3.655205-9.100715 4.319788-17.713166 1.851338s-18.75751-7.86649-28.197298-15.007364l-1.966622-1.491921c-9.426225-7.127311-17.374093-15.40747-22.087205-23.009483-4.719894-7.608795-5.832053-13.91555-3.072-17.543629l0.474702-0.678146a1.017219 1.017219 0 0 1 1.424105-0.203444l71.408742 53.980397zM550.939126 322.370119l-0.949404 66.797351a5.560795 5.560795 0 0 1-5.560795 5.49298l-64.288212 0.135629a5.560795 5.560795 0 0 1-5.560794-5.560794l0.067814-65.101987a5.560795 5.560795 0 0 1 5.425166-5.560795l65.169801-1.830993a5.560795 5.560795 0 0 1 5.696424 5.628609z" fill="#FCC556" ></path><path d="M827.080053 324.540185c2.170066 24.596344-0.813775 48.263629-8.951523 71.001855l-189.677351 0.406887a4.034967 4.034967 0 0 1-2.854994-1.173192 3.899338 3.899338 0 0 1-1.152847-2.827867l0.678145-64.152583a4.068874 4.068874 0 0 1 4.068875-4.00106l197.882914 0.74596z" fill="#FF5646" ></path><path d="M74.887368 324.897441m5.899859-0.010297l319.813023-0.55818q5.899859-0.010297 5.910155 5.889561l0.102499 58.727328q0.010297 5.899859-5.889561 5.910156l-319.813023 0.558179q-5.899859 0.010297-5.910156-5.889561l-0.102499-58.727328q-0.010297-5.899859 5.889562-5.910155Z" fill="#FF5646" ></path><path d="M827.080053 324.540185l116.844503-0.203443c0.549298 0 1.078252 0.217007 1.458014 0.603549a1.939497 1.939497 0 0 1 0.576423 1.430888l-1.017218 64.084768a5.899868 5.899868 0 0 1-5.967682 5.832053l-120.845563-0.74596c8.137748-22.738225 11.121589-46.40551 8.951523-71.001855z" fill="#CD4C3D" ></path><path d="M288.02204 950.333033a8990.285987 8990.285987 0 0 1-57.710199-490.367152l175.504106-1.356292a2.848212 2.848212 0 0 1 2.848212 2.848212l-0.339073 486.705166a3.187285 3.187285 0 0 1-3.255099 3.187285l-117.047947-1.017219z" fill="#FF5646" ></path><path d="M230.311841 459.965881a8990.285987 8990.285987 0 0 0 57.710199 490.367152l-77.30861-0.610331c-1.315603 0-2.061563-0.657801-2.23788-1.966623l-76.020133-484.874172a2.414199 2.414199 0 0 1 0.542517-1.905589 2.265007 2.265007 0 0 1 1.763179-0.806993l95.550728-0.203444z" fill="#FBD2BD" ></path><path d="M476.410914 460.033695m4.475761 0l63.881325 0q4.475762 0 4.475762 4.475762l0 481.890331q0 4.475762-4.475762 4.475762l-63.881325 0q-4.475762 0-4.475761-4.475762l0-481.890331q0-4.475762 4.475761-4.475762Z" fill="#FCC556" ></path><path d="M787.951046 460.237139c4.611391 3.390728 5.716768 12.884768 3.322914 28.482119-9.765298 62.748821-20.188397 125.389139-31.262516 187.914172a16493.466278 16493.466278 0 0 0-34.314172 200.052981c-4.340132 26.176424-11.596291 49.57245-19.869669 74.121324l-85.514173-0.881589a5.086093 5.086093 0 0 1-5.018278-5.153908l3.526358-481.483443a3.661987 3.661987 0 0 1 3.661987-3.661987l165.467549 0.610331z" fill="#FF5646" ></path><path d="M787.951046 460.237139l92.499073-0.067814c2.529483 0 3.594172 1.268132 3.187285 3.797615l-76.155762 481.754702c-0.542517 3.207629-2.441325 4.835179-5.696423 4.882649l-95.957616 0.203444c8.273377-24.548874 15.529536-47.944901 19.869669-74.121324 11.026649-66.777007 22.466967-133.459073 34.314172-200.052981 11.074119-62.525033 21.497219-125.165351 31.262516-187.914172 2.393854-15.597351 1.288477-25.091391-3.322914-28.482119z" fill="#CD4C3D" ></path></symbol><symbol id="icon-shengdanxuehua" viewBox="0 0 1024 1024"><path d="M724.416 501.105778c19.157333 5.169778 33.877333 15.388444 44.16 30.648889 16.853333 25.031111 14.435556 68.835556 41.671111 86.115555a105.827556 105.827556 0 0 0 42.595556 15.786667c34.275556 4.835556 76.017778-28.942222 107.164444-11.377778 18.915556 10.737778 16.64 25.031111 7.395556 42.808889-50.915556 97.706667-6.968889 191.715556 30.933333 284.16 25.457778 62.222222-7.182222 84.195556-65.848889 64.568889-68.764444-22.968889-163.555556-48.568889-238.222222-35.768889-28.657778 4.977778-65.493333 29.155556-93.582222 30.364444-41.102222 1.777778-16-68.551111-4.053334-88.248888 1.208889-1.991111 1.777778-4.295111 1.635556-6.613334-2.062222-41.315556-26.168889-124.871111-73.102222-136.391111-16.967111-4.167111-32.448 0.832-46.435556 15.004445-53.518222 54.094222-65.109333 117.312-34.773333 189.653333 6.257778 14.933333-20.693333 31.36-32.782222 31.644444-6.634667 0.142222-15.928889-3.505778-27.875556-10.951111-89.955556-56.248889-222.222222-14.293333-314.524444 13.937778-23.324444 7.111111-41.457778 8.817778-53.831112-13.795556-9.102222-16.711111-7.751111-30.222222 1.137778-48 27.448889-54.897778 56.177778-125.084444 60.444445-186.666666 1.564444-22.421333 0.832-38.257778-2.204445-47.502222-10.168889-31.431111-21.546667-60.871111-17.208889-94.648889a17.813333 17.813333 0 0 1 16.853334-15.573334c15.217778-0.711111 28.16 3.271111 44.302222 10.24 35.697778 15.459556 70.897778 16.312889 105.6 2.56 7.111111-2.844444 21.240889-11.875556 42.382222-27.093333 12.515556-9.002667 28.188444-18.773333 47.004445-29.297778 6.876444-3.84 8.917333-10.759111 6.115555-20.764444-9.102222-32.782222-33.066667-54.328889-60.231111-73.173334a3.555556 3.555556 0 0 0-4.977778 0.995556l-29.226666 43.946667a4.458667 4.458667 0 0 1-3.768889 1.969777 4.288 4.288 0 0 1-3.626667-2.112c-4.309333-7.153778-10.496-8.647111-18.56-4.48a2.631111 2.631111 0 0 1-3.768889-2.915555 254.641778 254.641778 0 0 1 27.235556-70.826667 9.173333 9.173333 0 0 0-2.844445-12.16c-34.176-22.848-70.656-32.519111-109.44-29.013333-18.062222 1.564444-48.497778 7.111111-62.222222-4.835556-9.386667-8.199111-11.207111-18.865778-5.475556-32 13.795556-31.381333 22.613333-57.429333 26.453334-78.151111 10.382222-55.253333-12.088889-128.64-30.72-181.191111-5.902222-16.568889-20.124444-47.644444-15.431111-64.071111 6.897778-24.32 26.026667-36.266667 50.488889-25.102222 74.808889 34.275556 182.684444 65.706667 261.688888 39.751111 30.364444-9.955556 63.715556-29.795556 95.146667-32.995556 2.609778-0.284444 4.529778 0.711111 5.76 2.986667l19.2 35.982222a6.826667 6.826667 0 0 1-1.706667 8.533334c-32.213333 25.813333-25.884444 55.608889-17.28 95.004444 13.297778 61.155556 60.586667 87.324444 72.32 145.564444a3.271111 3.271111 0 0 0 5.902223 1.208889c16.995556-24.533333 22.115556-57.528889 39.68-72.32 13.987556-11.804444 21.688889-20.195556 23.111111-25.173333 7.964444-28.017778 16.476444-55.488 25.528889-82.417778a16 16 0 0 0-2.204445-14.364444c-14.030222-19.150222-19.2-41.763556-15.502222-67.84 6.826667-48.568889 96.284444 3.84 110.364444 8.462222 79.644444 26.453333 186.026667-9.742222 266.951112-47.431111 7.495111-3.505778 16.099556-3.669333 25.813333-0.497778 21.973333 7.253333 29.582222 31.36 23.253333 52.053333-33.066667 109.226667-68.977778 189.937778-25.315555 294.897778 13.44 32.284444-8.177778 43.52-36.48 42.595556-62.151111-2.062222-97.28-9.955556-143.857778 40.746666-24.746667 26.951111-53.404444 41.031111-81.848889 59.662223a2.083556 2.083556 0 0 0-0.952889 2.126222c0.135111 0.846222 0.760889 1.543111 1.592889 1.784889z m-418.275556-175.288889l30.293334-18.488889a198.4 198.4 0 0 1 86.4-8.746667c7.921778 0.952889 9.486222-1.777778 4.693333-8.177777-36.977778-49.635556-63.715556-83.982222-64.568889-147.342223a10.88 10.88 0 0 0-11.591111-10.737777c-48.163556 2.894222-95.331556 1.28-141.511111-4.835556-21.546667-2.844444-45.724444-15.004444-63.36-17.493333-6.016-0.853333-15.288889 1.166222-27.804444 6.044444a5.276444 5.276444 0 0 0-3.555556 4.551111 62.506667 62.506667 0 0 0 2.204444 25.6c13.084444 44.231111 19.271111 87.893333 25.813334 133.404445 1.991111 14.364444 6.897778 26.88 18.417778 34.133333a1711.146667 1711.146667 0 0 0 102.257777 59.875556 5.12 5.12 0 0 0 6.4-1.351112l35.911111-46.435555z m363.306667-153.884445c-2.204444 49.137778-32.426667 88.604444-75.591111 109.084445-7.296 3.463111-6.940444 5.667556 1.066667 6.613333 35.555556 4.337778 55.751111 14.222222 88.32 31.288889 3.982222 15.125333 13.134222 30.272 27.448889 45.44 20.551111 21.831111 45.795556 14.933333 69.902222 2.488889a1385.344 1385.344 0 0 0 98.204444-55.964444c9.671111-6.016 13.632-15.260444 11.875556-27.733334-4.622222-33.706667-3.555556-66.986667 5.12-101.546666 4.977778-19.911111 13.084444-40.888889 8.177778-61.866667-2.417778-2.986667-5.873778-3.484444-10.382223-1.493333-11.52-3.057778-25.386667-3.413333-36.053333 2.56-2.033778 1.187556-4.266667 1.806222-6.684444 1.848888-36.195556 1.066667-71.182222 15.928889-107.875556 14.08-21.404444-1.066667-48-9.813333-69.262222-0.64-2.133333 0.910222-3.797333 2.659556-4.622222 4.835556-3.932444 10.766222-3.811556 21.098667 0.355555 31.004444zM462.065778 379.733333c-7.594667-13.319111-21.539556-22.293333-38.755556-24.96-17.223111-2.652444-36.316444 1.223111-53.077333 10.780445-34.894222 19.911111-50.360889 58.524444-34.545778 86.257778 7.594667 13.326222 21.546667 22.300444 38.762667 24.96 17.223111 2.659556 36.316444-1.216 53.070222-10.780445 34.901333-19.904 50.368-58.524444 34.545778-86.257778z m156.615111-9.614222c-27.491556-10.332444-51.079111-7.132444-70.755556 9.6-72.391111 61.653333 84.764444 168.96 116.337778 75.022222 13.418667-39.914667-1.777778-68.124444-45.582222-84.622222z m-152.177778 153.244445c-65.28 15.36-91.896889 57.344-79.857778 125.937777 16.711111 74.666667 141.155556 83.271111 180.266667 25.031111 54.755556-81.564444-14.008889-158.933333-100.408889-150.968888z m242.986667 98.972444c14.528-10.752 16.810667-32.284444 5.105778-48.099556s-32.967111-19.925333-47.488-9.173333c-14.520889 10.737778-16.803556 32.270222-5.098667 48.092445 11.697778 15.815111 32.96 19.925333 47.480889 9.173333z m-555.733334 180.352l-2.915555 16.64c-11.420444 34.517333-25.905778 66.659556-43.448889 96.426667-3.84 6.542222-2.296889 8.298667 4.622222 5.262222l27.093334-11.662222c42.666667-10.424889 83.960889-16.426667 123.875555-17.991111 24.177778-0.945778 48.241778-0.896 72.177778 0.142222a15.822222 15.822222 0 0 0 16.142222-11.946667c10.951111-43.377778 30.606222-82.296889 58.951111-116.764444a5.973333 5.973333 0 0 0-1.422222-8.817778c-25.528889-16.213333-38.257778-39.964444-62.08-57.315556-6.4-10.709333-15.644444-20.522667-27.733333-29.44-1.564444-3.648-4.664889-6.4-9.315556-8.248889a6.513778 6.513778 0 0 0-6.115555 0.497778c-48.967111 29.489778-102.229333 43.569778-159.786667 42.24a6.257778 6.257778 0 0 0-6.328889 7.324445c3.697778 21.902222 14.222222 41.244444 15.36 62.577777 0.526222 10.289778 0.832 20.650667 0.924444 31.075556z m483.128889-107.022222c-13.411556 8.490667-22.584889 20.864-27.52 37.12-0.718222 2.289778-0.327111 4.814222 1.066667 6.826666 27.448889 39.395556 46.129778 72.746667 56.035556 100.053334 5.077333 13.987556 5.169778 32.760889 0.284444 56.32a2.915556 2.915556 0 0 0 3.911111 3.271111c11.733333-4.764444 23.466667-11.52 34.631111-13.866667 36.835556-7.822222 72.632889-2.887111 107.377778 14.791111 22.044444 11.477333 49.827556 17.095111 83.342222 16.853334 2.702222 0 3.626667-1.301333 2.773334-3.911111-2.133333-6.613333-6.613333-13.084444-8.248889-18.986667a705.208889 705.208889 0 0 1-24.106667-184.248889c0-2.510222-1.251556-3.790222-3.768889-3.84-47.288889-1.137778-98.133333-1.208889-144.213333-12.231111-14.435556-3.413333-82.204444-31.786667-81.564445 1.848889z" fill="#343333" ></path><path d="M336.433778 307.328c-67.911111-56.391111-119.608889-112.142222-178.488889-169.671111-4.878222-4.785778-10.069333-8.128-15.573333-10.026667-3.932444-1.372444-4.949333-0.213333-3.057778 3.484445 39.537778 77.013333 105.884444 133.831111 166.826666 194.702222l-35.911111 46.435555a5.12 5.12 0 0 1-6.4 1.351112 1711.146667 1711.146667 0 0 1-102.257777-59.875556c-11.52-7.253333-16.426667-19.768889-18.417778-34.133333-6.542222-45.511111-12.728889-89.173333-25.813334-133.404445a62.506667 62.506667 0 0 1-2.204444-25.6 5.276444 5.276444 0 0 1 3.555556-4.551111c12.515556-4.878222 21.788444-6.897778 27.804444-6.044444 17.635556 2.488889 41.813333 14.648889 63.36 17.493333 46.179556 6.115556 93.347556 7.729778 141.511111 4.835556a10.88 10.88 0 0 1 11.591111 10.737777c0.853333 63.36 27.591111 97.706667 64.568889 147.342223 4.792889 6.4 3.228444 9.130667-4.693333 8.177777a198.4 198.4 0 0 0-86.4 8.746667zM893.589333 118.243556c-49.92 22.947556-101.020444 37.312-153.315555 43.093333-30.051556 3.320889-53.660444 6.855111-70.826667 10.595555-4.167111-9.905778-4.288-20.238222-0.355555-31.004444 0.824889-2.176 2.488889-3.925333 4.622222-4.835556 21.262222-9.173333 47.857778-0.426667 69.262222 0.64 36.693333 1.848889 71.68-13.013333 107.875556-14.08 2.417778-0.042667 4.650667-0.661333 6.684444-1.848888 10.666667-5.973333 24.533333-5.617778 36.053333-2.56z" fill="#029846" ></path><path d="M893.589333 118.243556c4.508444-1.991111 7.964444-1.493333 10.382223 1.493333-0.092444 5.738667-2.204444 10.147556-6.328889 13.226667-31.004444 23.182222-72.604444 38.613333-100.977778 67.2a4569.692444 4569.692444 0 0 0-113.422222 118.755555c-32.568889-17.066667-52.764444-26.951111-88.32-31.288889-8.007111-0.945778-8.362667-3.150222-1.066667-6.613333 43.164444-20.48 73.386667-59.946667 75.591111-109.084445 17.166222-3.740444 40.775111-7.274667 70.826667-10.595555 52.295111-5.781333 103.395556-20.145778 153.315555-43.093333z" fill="#FEFEFE" ></path><path d="M903.971556 119.736889c4.906667 20.977778-3.2 41.955556-8.177778 61.866667-8.675556 34.56-9.742222 67.84-5.12 101.546666 1.756444 12.472889-2.204444 21.717333-11.875556 27.733334a1385.344 1385.344 0 0 1-98.204444 55.964444c-24.106667 12.444444-49.351111 19.342222-69.902222-2.488889-14.314667-15.168-23.466667-30.314667-27.448889-45.44a4569.692444 4569.692444 0 0 1 113.422222-118.755555c28.373333-28.586667 69.973333-44.017778 100.977778-67.2 4.124444-3.079111 6.236444-7.488 6.328889-13.226667z" fill="#029846" ></path><path d="M336.433778 307.328l-30.293334 18.488889c-60.942222-60.871111-127.288889-117.688889-166.826666-194.702222-1.891556-3.697778-0.874667-4.856889 3.057778-3.484445 5.504 1.898667 10.695111 5.240889 15.573333 10.026667 58.88 57.528889 110.577778 113.28 178.488889 169.671111z" fill="#FEFEFE" ></path><path d="M335.679286 451.815411a57.813333 72.746667 60.3 1 0 126.380095-72.085933 57.813333 72.746667 60.3 1 0-126.380095 72.085933Z" fill="#FF5646" ></path><path d="M618.673778 370.119111c43.804444 16.497778 59.000889 44.707556 45.582222 84.622222-31.573333 93.937778-188.728889-13.368889-116.337778-75.022222 19.676444-16.732444 43.264-19.932444 70.755556-9.6zM386.638222 649.301333l39.182222-95.217777a14.044444 14.044444 0 0 1 11.022223-8.533334c19.818667-2.887111 29.703111-10.282667 29.653333-22.186666 86.4-7.964444 155.164444 69.404444 100.408889 150.968888-39.111111 58.24-163.555556 49.635556-180.266667-25.031111z" fill="#FF5646" ></path><path d="M466.496 523.363556c0.049778 11.904-9.834667 19.299556-29.653333 22.186666a14.044444 14.044444 0 0 0-11.022223 8.533334l-39.182222 95.217777c-12.039111-68.593778 14.577778-110.577778 79.857778-125.937777z" fill="#FBD2BD" ></path><path d="M667.100002 565.053704a35.626667 32.711111 53.5 1 0 42.383107 57.277481 35.626667 32.711111 53.5 1 0-42.383107-57.277481Z" fill="#FF5646" ></path><path d="M319.011556 667.221333c-8.817778 12.330667-18.033778 21.077333-27.662223 26.24-39.537778 21.240889-82.986667 34.965333-130.346666 41.173334-2.602667 0.334222-4.195556 1.208889-4.764445 2.631111-0.711111 1.756444-0.540444 3.982222 0.497778 6.684444l-2.986667 58.737778a748.103111 748.103111 0 0 0-0.924444-31.075556c-1.137778-21.333333-11.662222-40.675556-15.36-62.577777a6.257778 6.257778 0 0 1 6.328889-7.324445c57.557333 1.329778 110.819556-12.750222 159.786666-42.24a6.513778 6.513778 0 0 1 6.115556-0.497778c4.650667 1.848889 7.751111 4.600889 9.315556 8.248889z" fill="#029846" ></path><path d="M319.011556 667.221333c12.088889 8.917333 21.333333 18.730667 27.733333 29.44-6.727111 19.726222-18.631111 34.801778-35.697778 45.226667-72.035556 44.017778-119.111111 101.262222-171.946667 167.466667l-27.093333 11.662222c-6.919111 3.036444-8.462222 1.28-4.622222-5.262222 17.543111-29.767111 32.028444-61.909333 43.448889-96.426667 14.648889-28.060444 16.618667-53.191111 5.902222-75.377778-1.038222-2.702222-1.208889-4.928-0.497778-6.684444 0.568889-1.422222 2.161778-2.296889 4.764445-2.631111 47.36-6.208 90.808889-19.932444 130.346666-41.173334 9.628444-5.162667 18.844444-13.909333 27.662223-26.24z" fill="#FEFEFE" ></path><path d="M812.664889 900.181333c-63.431111-66.744889-122.026667-134.919111-175.786667-204.515555-0.64-33.635556 67.128889-5.262222 81.564445-1.848889 46.08 11.022222 96.924444 11.093333 144.213333 12.231111 2.517333 0.049778 3.768889 1.329778 3.768889 3.84a705.208889 705.208889 0 0 0 24.106667 184.248889c1.635556 5.902222 6.115556 12.373333 8.248888 18.986667 0.853333 2.609778-0.071111 3.911111-2.773333 3.911111-33.514667 0.241778-61.297778-5.376-83.342222-16.853334z" fill="#029846" ></path><path d="M636.878222 695.665778c53.76 69.596444 112.355556 137.770667 175.786667 204.515555-34.744889-17.678222-70.542222-22.613333-107.377778-14.791111-11.164444 2.346667-22.897778 9.102222-34.631111 13.866667a2.915556 2.915556 0 0 1-3.911111-3.271111c4.885333-23.559111 4.792889-42.332444-0.284445-56.32-9.905778-27.306667-28.586667-60.657778-56.035555-100.053334a7.857778 7.857778 0 0 1-1.066667-6.826666c4.935111-16.256 14.108444-28.629333 27.52-37.12z" fill="#FEFEFE" ></path><path d="M346.744889 696.661333c23.822222 17.351111 36.551111 41.102222 62.08 57.315556a5.973333 5.973333 0 0 1 1.422222 8.817778c-28.344889 34.467556-48 73.386667-58.951111 116.764444a15.822222 15.822222 0 0 1-16.142222 11.946667 872.32 872.32 0 0 0-72.177778-0.142222c-39.914667 1.564444-81.208889 7.566222-123.875556 17.991111 52.835556-66.204444 99.911111-123.448889 171.946667-167.466667 17.066667-10.424889 28.970667-25.500444 35.697778-45.226667z" fill="#029846" ></path><path d="M156.736 743.950222c10.716444 22.186667 8.746667 47.317333-5.902222 75.377778l2.915555-16.64 2.986667-58.737778z" fill="#CBCCCE" ></path></symbol><symbol id="icon-shengdanlaorenmao" viewBox="0 0 1024 1024"><path d="M150.165819 602.086957c-29.618166 0-36.488025-1.49063-36.682455-33.182715-0.25924-55.516238 0.32405-110.779718 1.74987-165.783958a3.953409 3.953409 0 0 1 4.212649-3.888599l21.322487 1.296199c2.46278 0.12962 4.037662-0.991593 4.73113-3.370119 28.814522-97.04 72.755696-186.652775 131.823522-268.831844C328.911775 56.646071 393.656956-16.394789 494.047632 3.242638 620.945595 28.000055 727.622841 120.419102 800.404461 223.402178c3.454373 4.970926 10.667725 8.969703 21.646537 11.989849 108.103065 29.877406 108.815975 181.079115 7.064289 220.35397-2.035034 0.77772-3.04607 2.229464-3.04607 4.342269l0.32405 125.536953a12.573138 12.573138 0 0 1-8.425298 11.925039l-36.488026 12.573138c-1.905414 0.6481-2.812754 1.970224-2.722019 3.95341 0.686986 21.218791 1.011036 42.256114 0.97215 63.124931-0.19443 211.475001-180.495826 394.692847-398.062966 328.975515-129.749602-39.210045-219.38182-157.812329-227.22383-293.39483-1.646174-27.997916-1.81468-63.617487-0.518479-106.871675 0.038886-2.547033-1.211947-3.823789-3.75898-3.82379zM445.440139 58.395941c-16.033992 7.044846-27.978473 13.376782-35.839925 18.989327-15.340525 10.978813-30.460696 25.081467-45.366994 42.320925-34.440029 39.663715-63.040678 81.103223-85.808428 124.305563-26.442476 48.698227-48.024203 97.539037-64.745182 146.53539a2.709058 2.709058 0 0 0 0.337012 2.410931c0.492556 0.693467 1.283238 1.10177 2.119287 1.088808l61.245442 0.6481 318.476297 0.6481 72.91124-0.77772a3.11088 3.11088 0 0 0 2.981259-3.823789c-7.712389-32.145756-13.415668-72.58719-29.099686-100.585107-21.08269-37.499061-34.414105-61.867618-39.987764-73.10567-10.304789-20.609577-4.018219-53.144193 28.257156-36.163975 24.284304 12.832378 43.163454 36.682455 56.643932 71.550231 2.119287 5.489406 6.072696 7.647579 11.860229 6.480999l25.923996-5.37923a6.610619 6.610619 0 0 0 4.34227-9.851118c-29.378369-49.644453-72.172406-92.652363-128.388593-129.036693-53.403433-34.608535-105.355122-53.358066-155.868029-56.255072z m391.964346 284.613076c-0.149063-14.063768-6.500442-27.479436-17.667204-37.304631s-26.222122-15.256272-41.867254-15.087766c-15.638651 0.162025-30.577354 5.90419-41.536723 15.962701-10.952889 10.058511-17.025585 23.603799-16.876522 37.667567 0.142582 14.057287 6.500442 27.479436 17.660723 37.304631 11.166761 9.825195 26.228603 15.249791 41.867254 15.087766 15.638651-0.162025 30.583835-5.90419 41.543204-15.962701 10.952889-10.058511 17.019104-23.61028 16.876522-37.667567zM692.489345 546.091125l69.86517-3.56455a4.731129 4.731129 0 0 0 4.536699-4.795939l-0.453669-67.661631c0-2.028553-0.97215-3.259943-2.91645-3.694169-30.804189-7.213352-58.912282-9.870562-84.317799-7.971629l-502.601482-0.58329c-3.927485 0-5.871785 1.9443-5.832899 5.832899l0.45367 80.169959c0 1.471187 1.218428 2.65721 2.72202 2.65721l518.54474-0.38886zM406.943004 948.17231c126.249863 42.904214 256.777185-57.421652 296.24647-171.292807 17.369078-50.162933 16.850598-109.075215 13.480478-163.450797a3.694169 3.694169 0 0 0-3.758979-3.43493l-175.570266 1.23139-317.180097-1.03696c-2.287793 0-3.49974 1.147137-3.62936 3.43493-1.9443 34.478915-1.36101 70.798434 1.74987 108.945595 8.554919 103.695986 86.326908 200.975783 188.661884 225.603579z" fill="#312E2E" ></path><path d="M595.864129 395.343085c-7.952186-32.100389-18.950441-67.227404-32.988286-105.381046-10.155726-27.518322-32.62535-91.252468-67.402391-191.189474-7.433706-21.21231-24.109317-34.673345-50.033313-40.376624 50.506426 2.897007 102.464596 21.646537 155.868029 56.255072 56.209705 36.384329 99.003743 79.392239 128.388593 129.036693a6.610619 6.610619 0 0 1-4.34227 9.851118l-25.923996 5.37923c-5.794013 1.16658-9.747423-0.991593-11.860229-6.480999-13.480478-34.867775-32.36611-58.717852-56.643932-71.550231-32.275376-16.980218-38.561945 15.554398-28.257156 36.163975 5.573659 11.238052 18.898593 35.606609 39.987764 73.10567 15.684018 27.997916 21.387297 68.439351 29.099686 100.585107a3.11088 3.11088 0 0 1-2.981259 3.823789L595.864129 395.343085z" fill="#D24B36" ></path><path d="M445.440139 58.395941c25.923996 5.703279 42.599607 19.164314 50.033313 40.376624 34.777041 99.937006 57.246665 163.671152 67.402391 191.189474 14.037844 38.153642 25.0361 73.280657 32.988286 105.381046l-318.476297-0.6481c-1.55544-39.534095-3.17569-78.031229 0-116.722794 0.861973-10.888079 1.205466-22.203903 1.03696-33.960435 22.76775-43.20234 51.368399-84.641849 85.808428-124.305563 14.906298-17.239458 30.026469-31.342112 45.366994-42.320925 7.861452-5.612545 19.805933-11.944481 35.839925-18.989327z" fill="#FE5A41" ></path><path d="M278.424792 244.011756a362.119345 362.119345 0 0 1-1.03696 33.960435c-3.17569 38.691565-1.55544 77.1887 0 116.722794l-61.245442-0.6481a2.553514 2.553514 0 0 1-2.125768-1.088808 2.696096 2.696096 0 0 1-0.343493-2.410931c16.720978-48.996353 38.302705-97.837163 64.745182-146.53539z" fill="#FCC3B0" ></path><path d="M719.453535 344.242375a53.014573 58.977092 89.4 1 0 117.947717-1.23519 53.014573 58.977092 89.4 1 0-117.947717 1.23519Z" fill="#FEFEFE" ></path><path d="M679.209777 458.403207l13.286049 87.687918-518.54474 0.38886a2.689615 2.689615 0 0 1-2.72202-2.65721l-0.45367-80.169959c-0.045367-3.888599 1.898933-5.832899 5.832899-5.832899l502.601482 0.58329z" fill="#FEFEFE" ></path><path d="M692.495826 546.091125L679.209777 458.403207c25.405517-1.898933 53.507129 0.758277 84.317799 7.971629 1.9443 0.434227 2.91645 1.665617 2.91645 3.694169l0.453669 67.661631a4.731129 4.731129 0 0 1-4.536699 4.795939l-69.86517 3.56455z" fill="#C4C4C4" ></path><path d="M537.340707 611.225166l74.790729 1.23139a8.490109 8.490109 0 0 1 8.360489 7.971629l3.69417 63.124931c-8.425299-9.157652-16.137688-13.869338-23.137167-14.128578-69.217071-2.20354-61.893542 98.251947 2.78683 96.761317-13.221238 46.533574-37.810149 86.715768-73.75377 120.546584-23.072357 21.646537-48.607493 36.727822-76.60541 45.237373-20.914184 6.351379-36.423215 11.756532-46.533574 16.202498-102.334976-24.627797-180.106966-121.907593-188.661884-225.603579-3.11088-38.147161-3.694169-74.46668-1.74987-108.945595 0.12962-2.287793 1.335086-3.43493 3.62936-3.43493l317.180097 1.03696z m-158.98539 80.208845c-7.012441-8.943779-17.544065-14.5304-29.287635-15.534955-11.730608-1.004555-23.720457 2.65721-33.312335 10.175169-19.961477 15.658094-24.32319 43.442137-9.721499 62.062047 7.012441 8.943779 17.544065 14.5304 29.281154 15.534955 11.737089 1.004555 23.720457-2.65721 33.312335-10.175168 19.967958-15.658094 24.32319-43.448618 9.721499-62.062048z" fill="#FEC899" ></path><path d="M406.943004 948.17231c10.110359-4.445965 25.61939-9.851119 46.533574-16.202498 27.997916-8.509552 53.533053-23.590837 76.60541-45.237373 35.943621-33.830815 60.532532-74.01301 73.75377-120.546584 17.712571-9.462259 27.609056-23.461217 29.682976-41.996874 1.55544-14.037844-1.55544-27.583132-9.332639-40.635865l-3.69417-63.124931a8.490109 8.490109 0 0 0-8.360489-7.971629l-74.790729-1.23139 175.570266-1.23139a3.694169 3.694169 0 0 1 3.758979 3.43493c3.37012 54.375583 3.888599 113.287865-13.480478 163.450797-39.469285 113.871155-169.996607 214.197021-296.24647 171.292807z" fill="#E4A276" ></path><path d="M624.186095 683.553116c7.777199 13.052732 10.888079 26.59802 9.332639 40.635865-2.07392 18.535657-11.970405 32.534616-29.682976 41.996874-64.680371 1.49063-72.0039-98.964857-2.78683-96.761317 6.999479 0.25924 14.711868 4.970926 23.137167 14.128578z" fill="#312E2E" ></path><path d="M306.032835 748.138874a42.839404 45.950284 51.9 1 0 72.319775-56.705947 42.839404 45.950284 51.9 1 0-72.319775 56.705947Z" fill="#312E2E" ></path></symbol><symbol id="icon-shengdanwazi" viewBox="0 0 1024 1024"><path d="M338.628335 289.739636c-47.883636-10.007273-60.567273-54.225455-61.323637-97.454545-1.338182-69.992727-4.712727-142.952727 69.061818-178.501818 63.069091-30.429091 140.218182-8.029091 185.949091 43.287272 7.796364 8.727273 12.840727 18.112 15.127273 28.16 0.686545 2.944 3.316364 5.026909 6.341818 5.003637 65.629091-0.546909 131.706182-0.930909 198.225455-1.163637 37.643636-0.116364 73.949091 17.978182 79.534545 59.694546 5.701818 43.013818 5.876364 76.427636 0.523637 100.247273-6.923636 30.545455-26.065455 38.923636-53.992728 45.498181a5.090909 5.090909 0 0 0-3.956363 4.945455c-1.396364 165.12-2.519273 330.123636-3.374546 495.010909-0.349091 76.974545-53.934545 150.865455-116.363636 188.8-38.359273 23.272727-81.454545 35.002182-129.28 35.2-56.279273 0.192-112.541091 0.674909-168.785455 1.454546-44.875636 0.616727-75.613091-1.902545-92.218182-7.563637-70.690909-24.145455-99.432727-108.8-68.421818-177.28 8.261818-18.152727 28.8-41.250909 46.021818-59.694545 34.990545-37.434182 63.243636-69.701818 84.77091-96.814546 5.469091-6.865455 7.970909-18.443636 8.261818-28.276363a22831.069091 22831.069091 0 0 0 6.749091-357.003637c0-1.978182-0.948364-3.165091-2.850909-3.549091z m384.814545-54.865454l48.814545-0.465455a3.985455 3.985455 0 0 0 3.898182-3.549091c1.92-19.549091 6.225455-68.770909-8.378182-83.374545a6.749091 6.749091 0 0 0-4.770909-1.978182l-40.494545-0.058182-317.789091 2.385455a4.392727 4.392727 0 0 1-4.363636-3.607273c-2.443636-13.323636-5.294545-48.581818 15.650909-49.687273 19.863273-1.012364 39.703273-1.844364 59.52-2.501818a2.542545 2.542545 0 0 0 2.199272-1.501091 2.402909 2.402909 0 0 0-0.395636-2.571636c-29.963636-34.618182-77.207273-41.425455-114.618182-16.174546-32.523636 21.992727-31.127273 51.258182-31.010909 92.392728 0.040727 17.256727 0.64 34.478545 1.803637 51.665454 1.28 19.723636 20.887273 18.967273 37.410909 19.083637 117.102545 0.773818 234.612364 0.756364 352.523636-0.058182z m-312.96 58.181818c-3.101091-0.738909-5.952-0.564364-8.552727 0.523636-1.861818 0.814545-2.769455 2.228364-2.734546 4.247273l0.64 32.174546c0 1.978182 0.954182 3.2 2.850909 3.665454 2.676364 0.657455 5.376 0.232727 8.087273-1.28l300.974546-0.756364c3.607273 0 5.352727-1.786182 5.236363-5.352727l-0.698182-27.461818a5.381818 5.381818 0 0 0-5.294545-5.236364c-97.239273-2.210909-194.112-2.909091-290.618182-2.094545-3.607273 0-6.900364 0.523636-9.890909 1.570909z m38.109091 104.145455a7.912727 7.912727 0 0 0-6.690909-11.927273l-41.309091-0.756364a7.912727 7.912727 0 0 0-8.029091 7.912727l-0.116364 40.785455a7.912727 7.912727 0 0 0 10.007273 7.68l21.294546-5.934545c1.978182-0.546909 3.671273-1.838545 4.712727-3.607273l20.130909-34.152727z m-3.781818 345.6c-21.410909-22.632727-65.221818-33.570909-88.494546-8.087273a3987.258182 3987.258182 0 0 1-61.963636 66.094545c-36.421818 37.876364-74.007273 78.545455-45.44 130.676364-1.396364 1.472 0.314182 4.631273 5.12 9.483636 19.723636 23.098182 45.207273 24.378182 73.250909 24.378182 57.757091-0.040727 115.514182 0.093091 173.265455 0.407273 55.621818 0.349091 91.694545-3.898182 133.410909-33.338182 42.513455-29.946182 68.945455-71.604364 79.301818-124.974545 0.622545-3.298909-0.733091-5.026909-4.072727-5.178182-29.789091-1.361455-58.141091-13.323636-85.061819-35.898182-30.138182-30.370909-40.238545-68.037818-30.312727-112.989091 6.946909-31.616 25.216-56.418909 54.807273-74.414545 19.746909-9.582545 40.884364-15.825455 63.418182-18.734546a4.392727 4.392727 0 0 0 3.781818-4.363636l0.058182-168.610909a1.338182 1.338182 0 0 0-1.338182-1.338182l-48.930909-0.174546c-53.678545-0.546909-106.821818-0.837818-159.418182-0.872727-10.821818 0-41.076364-1.803636-44.276364 14.545455a4.392727 4.392727 0 0 0 2.210909 4.654545 149.050182 149.050182 0 0 1 29.847273 21.643636c32.814545 30.72 6.109091 77.323636-23.970909 96.581819a4.090182 4.090182 0 0 0-1.902545 3.566545c0.034909 1.454545 0.826182 2.786909 2.07709 3.531636 57.658182 33.687273 42.996364 84.770909-7.156363 113.163637a2.56 2.56 0 0 0-0.349091 4.189091c23.563636 19.490909 40.029091 29.323636 34.967273 64.872727-4.340364 30.603636-21.952 40.994909-52.829091 31.185455z m-12.567273-245.76a160.535273 160.535273 0 0 0-37.236364-3.549091c-2.402909 0.034909-3.607273 1.239273-3.607272 3.607272l-0.290909 51.258182c0 1.838545 1.070545 3.508364 2.734545 4.247273 15.127273 6.749091 31.883636-5.294545 43.345455-15.301818 11.287273-9.832727 12.509091-36.421818-4.945455-40.261818z m-43.636364 116.421818l-4.305454 45.789091a12.625455 12.625455 0 0 0 11.403636 13.730909l0.64 0.058182c23.720727 2.234182 44.421818-11.485091 46.254546-30.661819l0.116363-1.396363c1.809455-19.188364-15.953455-36.561455-39.68-38.807273l-0.64-0.116364a12.625455 12.625455 0 0 0-13.789091 11.403637z m325.178182 127.301818l1.861818-118.458182a4.247273 4.247273 0 0 0-4.189091-4.305454h-1.454545a64.104727 64.104727 0 0 0-45.300364 17.675636 62.341818 62.341818 0 0 0-19.339636 44.113454v1.396364a62.347636 62.347636 0 0 0 17.949091 44.677818 64.104727 64.104727 0 0 0 44.712727 19.083637h1.454546a4.247273 4.247273 0 0 0 4.305454-4.189091z" fill="#312E2E" ></path><path d="M722.511971 145.448727l0.930909 89.425455c-117.911273 0.814545-235.421091 0.832-352.523636 0.058182-16.523636-0.116364-36.130909 0.64-37.410909-19.083637-1.163636-17.186909-1.762909-34.408727-1.803637-51.665454-0.116364-41.134545-1.512727-70.4 31.010909-92.392728 37.410909-25.250909 84.654545-18.443636 114.618182 16.174546a2.402909 2.402909 0 0 1 0.395636 2.571636 2.542545 2.542545 0 0 1-2.199272 1.501091c-19.816727 0.657455-39.656727 1.489455-59.52 2.501818-20.945455 1.105455-18.094545 36.363636-15.650909 49.687273 0.372364 2.094545 2.210909 3.613091 4.363636 3.607273l317.789091-2.385455z" fill="#FEFEFE" ></path><path d="M723.44288 234.874182l-0.930909-89.425455 40.494545 0.058182c1.792 0 3.508364 0.709818 4.770909 1.978182 14.603636 14.603636 10.298182 63.825455 8.378182 83.374545a3.985455 3.985455 0 0 1-3.898182 3.549091l-48.814545 0.465455z" fill="#C4C4C4" ></path><path d="M410.773789 332.386909l-0.290909-39.330909c2.990545-1.047273 6.283636-1.570909 9.890909-1.570909 96.506182-0.814545 193.378909-0.116364 290.618182 2.094545 2.903273 0.058182 5.236364 2.368 5.294545 5.236364l0.698182 27.461818c0.116364 3.566545-1.629091 5.352727-5.236363 5.352727l-300.974546 0.756364z" fill="#D24B36" ></path><path d="M410.48288 293.056l0.290909 39.330909c-2.711273 1.512727-5.410909 1.937455-8.087273 1.28-1.896727-0.465455-2.850909-1.687273-2.850909-3.665454l-0.64-32.174546c-0.034909-2.018909 0.872727-3.432727 2.734546-4.247273 2.600727-1.088 5.451636-1.262545 8.552727-0.523636zM448.591971 397.201455l-20.130909 34.152727a7.912727 7.912727 0 0 1-4.712727 3.607273l-21.294546 5.934545a7.912727 7.912727 0 0 1-10.007273-7.68l0.116364-40.785455a7.912727 7.912727 0 0 1 8.029091-7.912727l41.309091 0.756364a7.912727 7.912727 0 0 1 6.690909 11.927273z" fill="#FEFEFE" ></path><path d="M665.610153 385.739636c1.320727 38.551273 2.036364 76.858182 2.152727 114.909091 0.040727 26.722909 0.040727 40.279273 0 40.669091-1.704727 16.558545-8.087273 29.108364-19.141818 37.643637-29.591273 17.995636-47.860364 42.798545-54.807273 74.414545-9.925818 44.951273 0.174545 82.618182 30.312727 112.989091 17.262545 22.376727 21.742545 43.246545 13.44 62.603636-8.203636 19.083636-15.301818 37.992727-27.403636 54.050909-43.287273 57.425455-100.770909 72.785455-171.52 72.145455-67.490909-0.64-115.956364 0.349091-164.421818-9.076364-3.025455-0.622545-6.109091-2.018909-9.250909-4.189091-6.167273-4.229818-9.809455-4.538182-10.938182-0.930909-4.805818-4.852364-6.516364-8.011636-5.12-9.483636 10.472727-63.36 43.054545-110.487273 103.563636-133.003636-4.654545 12.718545-6.725818 23.057455-6.225454 31.010909 2.734545 43.578182 57.949091 48.756364 77.381818 18.792727 15.709091-24.128 11.112727-44.625455-13.789091-61.498182 4.619636-12.881455 10.845091-24.128 18.676364-33.745454 1.710545-2.135273 7.138909-5.550545 16.290909-10.24 30.877091 9.809455 48.488727-0.581818 52.829091-31.185455 5.061818-35.549091-11.403636-45.381818-34.967273-64.872727a2.56 2.56 0 0 1 0.349091-4.189091c50.152727-28.392727 64.814545-79.476364 7.156363-113.163637a4.229818 4.229818 0 0 1-2.07709-3.531636 4.090182 4.090182 0 0 1 1.902545-3.566545c30.08-19.258182 56.785455-65.861818 23.970909-96.581819a149.050182 149.050182 0 0 0-29.847273-21.643636 4.392727 4.392727 0 0 1-2.210909-4.654545c3.2-16.349091 33.454545-14.545455 44.276364-14.545455 52.596364 0.034909 105.739636 0.325818 159.418182 0.872727z" fill="#FE5A41" ></path><path d="M665.610153 385.739636l48.930909 0.174546a1.338182 1.338182 0 0 1 1.338182 1.338182l-0.058182 168.610909a4.392727 4.392727 0 0 1-3.781818 4.363636c-22.533818 2.909091-43.671273 9.152-63.418182 18.734546 11.054545-8.535273 17.437091-21.085091 19.141818-37.643637 0.040727-0.389818 0.040727-13.946182 0-40.669091a3691.52 3691.52 0 0 0-2.152727-114.909091z" fill="#D24B36" ></path><path d="M432.24288 497.041455c17.454545 3.84 16.232727 30.429091 4.945455 40.261818-11.461818 10.007273-28.218182 22.050909-43.345455 15.301818a4.625455 4.625455 0 0 1-2.734545-4.247273l0.290909-51.258182c0-2.368 1.204364-3.572364 3.607272-3.607272 12.916364-0.232727 25.332364 0.948364 37.236364 3.549091zM388.606516 613.463273a12.625455 12.625455 0 0 1 13.789091-11.403637l0.64 0.116364c23.726545 2.245818 41.489455 19.618909 39.68 38.807273l-0.116363 1.396363c-1.832727 19.176727-22.533818 32.896-46.254546 30.661819l-0.64-0.058182a12.625455 12.625455 0 0 1-11.403636-13.730909l4.305454-45.789091z" fill="#FEFEFE" ></path><path d="M713.784698 740.765091a4.247273 4.247273 0 0 1-4.305454 4.189091h-1.454546a64.104727 64.104727 0 0 1-44.712727-19.089455 62.347636 62.347636 0 0 1-17.949091-44.683636v-1.396364a62.341818 62.341818 0 0 1 19.339636-44.101818 64.104727 64.104727 0 0 1 45.300364-17.687273h1.454545a4.247273 4.247273 0 0 1 4.189091 4.305455l-1.861818 118.458182z" fill="#C4C4C4" ></path><path d="M444.810153 742.801455c-9.152 4.689455-14.580364 8.104727-16.290909 10.24-7.831273 9.617455-14.056727 20.864-18.676364 33.745454-19.549091-7.214545-38.667636-3.316364-57.367273 11.694546-60.509091 22.516364-93.090909 69.643636-103.563636 133.003636-28.567273-52.130909 9.018182-92.8 45.44-130.676364a3987.258182 3987.258182 0 0 0 61.963636-66.094545c23.272727-25.483636 67.083636-14.545455 88.494546 8.087273z" fill="#FCC3B0" ></path><path d="M624.126516 766.365091c26.920727 22.574545 55.272727 34.536727 85.061819 35.898182 3.339636 0.151273 4.695273 1.879273 4.072727 5.178182-10.356364 53.370182-36.788364 95.028364-79.301818 124.974545-41.716364 29.44-77.789091 33.687273-133.410909 33.338182-57.751273-0.314182-115.508364-0.448-173.265455-0.407273-28.043636 0-53.527273-1.28-73.250909-24.378182 1.128727-3.607273 4.770909-3.298909 10.938182 0.930909 3.141818 2.170182 6.225455 3.566545 9.250909 4.189091 48.465455 9.425455 96.930909 8.436364 164.421818 9.076364 70.749091 0.64 128.232727-14.72 171.52-72.145455 12.101818-16.058182 19.2-34.967273 27.403636-54.050909 8.302545-19.357091 3.822545-40.226909-13.44-62.603636z" fill="#D24B36" ></path><path d="M409.84288 786.786909c24.901818 16.872727 29.498182 37.370182 13.789091 61.498182-19.432727 29.963636-74.647273 24.785455-77.381818-18.792727-0.500364-7.953455 1.570909-18.292364 6.225454-31.010909 18.699636-15.010909 37.818182-18.909091 57.367273-11.694546z" fill="#312E2E" ></path></symbol><symbol id="icon-shengdanmao" viewBox="0 0 1024 1024"><path d="M776.859252 877.118761a5.020903 5.020903 0 0 0-2.576517 4.558452c2.378323 63.157677-39.308387 115.877161-99.228903 132.525419-12.241755 3.435355-33.098323 5.199277-62.563097 5.285162-116.095174 0.356748-232.216774 0.594581-348.358193 0.726709-82.316387 0.09249-133.912774-37.987097-154.789161-114.225548-1.981935-7.201032-2.246194-17.969548-4.294194-26.756129a9.843613 9.843613 0 0 0-3.171097-5.086968c-5.985445-5.060542-11.977497-10.041806-17.969548-14.930581-53.380129-43.800774-46.773677-104.844387-45.584516-178.374193 1.123097-73.463742 2.114065-100.087742 53.578322-146.663226a6.804645 6.804645 0 0 0 2.246194-5.483355c-2.642581-43.602581-8.588387-89.517419 11.164903-130.081032 23.452903-48.227097 65.007484-76.568774 119.444645-80.136258 2.292439-0.132129 3.792103-1.294865 4.492387-3.501419a660.328052 660.328052 0 0 1 24.113549-64.677162c55.097806-126.711742 172.626581-212.397419 304.887742-242.456774 109.733161-24.906323 170.71071 25.633032 256 79.343484 15.459097 9.777548 31.975226 16.714323 48.491355 24.576 44.355716 21.233135 78.663019 49.706942 102.928516 85.421419 42.28129 62.232774 7.333161 135.89471-60.647226 153.864258-86.940903 22.990452-96.123871-71.283613-159.281548-76.766967a15.888516 15.888516 0 0 0-16.251871 10.107871l-13.278968 34.023225a6.507355 6.507355 0 0 0 0.231226 5.080362c0.766348 1.585548 2.133884 2.77471 3.798709 3.309832 80.400516 26.359742 76.040258 133.648516 68.641033 197.004387a7.134968 7.134968 0 0 0 1.915871 5.747613c39.308387 41.356387 58.136774 58.467097 57.013677 121.030193-0.660645 35.985342-1.123097 71.924439-1.387355 107.817291-0.350142 53.690632-23.538787 93.263277-69.565935 118.717935z m-218.937807-802.617806c-118.916129 33.362581-223.364129 118.321548-257.585548 240.93729a7.861677 7.861677 0 0 0 7.399226 9.975742l14.468129 0.462452c15.591226 15.194839 23.016877 33.058684 22.263742 53.578322-19.026581 7.267097-39.969032 9.711484-62.827355 7.333162-14.970219-1.539303-25.566968-2.219768-31.777033-2.048-62.364903 1.915871-87.997935 11.891613-92.093935 79.013161-1.32129 20.968877-1.671432 40.431484-1.057032 58.401032 0.224619 5.377652 3.019148 8.059871 8.390193 8.059871l477.250065 0.264258 84.958968-0.066064c0.964542 0 1.889445-0.396387 2.55009-1.109884a3.600516 3.600516 0 0 0 0.951329-2.655794c-1.407174-27.12609-2.642581-54.503226-3.699613-82.118193-2.312258-59.458065-56.485161-58.401032-103.589161-55.692387l-209.358452 1.717677c-7.174606 0.046245-9.909677-3.408929-8.192-10.372129l2.77471-11.032774c1.453419-13.959432-1.539303-26.313497-8.984774-37.062194a4.162065 4.162065 0 0 1 3.36929-6.540387l237.568-1.387355c2.338684-0.039639 3.659974-1.208981 3.963871-3.501419l2.114064-16.516129c13.477161-61.109677 46.443355-111.186581 117.528775-93.217032 48.359226 12.221935 78.682839 46.707613 109.402838 83.175225 3.726039 4.432929 10.259819 5.238916 14.996645 1.849807 60.647226-43.668645-5.41729-99.162839-44.725677-120.765936a5243.448155 5243.448155 0 0 1-101.739355-57.542193c-59.590194-39.572645-111.649032-66.196645-184.32-43.140129z m130.411355 736.751484c42.545548 1.717677 90.706581 4.492387 92.16-46.905807 0.885265-32.279123 1.037213-64.545032 0.462452-96.784516-0.462452-29.596903 0.72671-43.602581-10.570323-64.21471a16.020645 16.020645 0 0 0-13.212903-8.324129l-60.184774-2.972903c-181.717058-0.568155-361.874994 0.026426-540.473807 1.783742-16.952155 0.178374-29.154271 2.642581-36.599742 7.399226-12.063381 7.795613-18.432 20.063794-19.092645 36.797935-1.057032 26.782555-0.132129 70.755097 2.77471 131.930839 1.783742 37.656774 29.99329 40.893935 59.788387 40.96 175.427716 0.396387 350.406194 0.508697 524.948645 0.330323z m-39.704774 138.603355c35.212387-1.387355 55.428129-35.476645 61.44-67.121549 0.488877-2.332077-0.462452-3.521239-2.840774-3.567484l-71.547871-1.519484-457.232516 0.066065a6.077935 6.077935 0 0 0-5.945807 7.267097c6.540387 32.239484 31.050323 67.319742 66.85729 67.584 124.42591 0.885265 248.845213 1.037213 373.264517 0.462451 6.738581-0.039639 18.742503-1.096671 36.005161-3.171096z" fill="#343333" ></path><path d="M742.241445 117.641084c0.660645 2.028181 0.687071 3.877987 0.066065 5.549419a3.699613 3.699613 0 0 1-4.888775 2.048c-57.145806-24.642065-118.717935 26.293677-137.612387 76.50271-9.711484 25.699097-12.155871 61.109677-13.939613 90.574452a13.873548 13.873548 0 0 0 14.137807 14.666322l31.248516-0.660645c1.32129-0.039639 2.510452-0.462452 3.567484-1.255226l5.285161-4.162064c1.717677-1.32129 3.329652-1.2288 4.82271 0.264258 0.753135 0.70689 1.367535 1.697858 1.849806 2.972903l-2.114064 16.516129c-0.303897 2.292439-1.625187 3.461781-3.963871 3.501419l-237.568 1.387355a4.162065 4.162065 0 0 0-3.36929 6.540387c7.445471 10.748697 10.438194 23.102761 8.984774 37.062194-12.109626 10.266426-33.534348 13.701781-64.280774 10.306064 0.753135-20.519639-6.672516-38.383484-22.263742-53.578322 19.356903-14.732387 40.96-14.666323 63.091613-13.411097a9.348129 9.348129 0 0 0 9.711483-7.795613c14.137806-86.874839 85.619613-182.800516 163.24542-223.496258 1.453419-0.700284 2.510452-1.539303 3.171097-2.510452 2.16031-2.906839 0.990968-4.294194-3.50142-4.162064 72.670968-23.056516 124.729806 3.567484 184.32 43.140129z" fill="#FF5646" ></path><path d="M557.921445 74.500955c4.492387-0.132129 5.661729 1.255226 3.50142 4.162064-0.660645 0.971148-1.717677 1.810168-3.171097 2.510452-77.625806 40.695742-149.107613 136.621419-163.24542 223.496258a9.348129 9.348129 0 0 1-9.711483 7.795613c-22.131613-1.255226-43.73471-1.32129-63.091613 13.411097l-14.468129-0.462452a7.861677 7.861677 0 0 1-7.399226-9.975742c34.221419-122.615742 138.669419-207.57471 257.585548-240.93729z" fill="#FBD2BD" ></path><path d="M742.241445 117.641084c33.692903 19.555097 67.610426 38.740232 101.739355 57.542193 39.308387 21.603097 105.372903 77.09729 44.725677 120.765936a11.131871 11.131871 0 0 1-14.996645-1.849807c-30.72-36.467613-61.043613-70.95329-109.402838-83.175225-71.085419-17.969548-104.051613 32.107355-117.528775 93.217032a7.815432 7.815432 0 0 0-1.849806-2.972903c-1.493058-1.493058-3.105032-1.585548-4.82271-0.264258l-5.285161 4.162064a6.150606 6.150606 0 0 1-3.567484 1.255226l-31.248516 0.660645a13.873548 13.873548 0 0 1-14.137807-14.666322c1.783742-29.464774 4.228129-64.875355 13.939613-90.574452 18.894452-50.209032 80.466581-101.144774 137.612387-76.50271a3.699613 3.699613 0 0 0 4.888775-2.048c0.621006-1.671432 0.594581-3.521239-0.066065-5.549419z" fill="#CD4C3D" ></path><path d="M408.747768 369.148697l-2.77471 11.032774c-1.717677 6.9632 1.017394 10.418374 8.192 10.372129l209.358452-1.717677c2.953084 2.16031 4.426323 6.831071 4.426322 14.005677 0 6.038297 0.330323 10.768516 0.990968 14.203871a795.568723 795.568723 0 0 1 13.411097 113.432774l-477.250065-0.264258c-5.371045 0-8.165574-2.682219-8.390193-8.059871-0.6144-17.969548-0.264258-37.432155 1.057032-58.401032 4.096-67.121548 29.729032-77.09729 92.093935-79.013161 6.210065-0.171768 16.806813 0.508697 31.777033 2.048 22.858323 2.378323 43.800774-0.066065 62.827355-7.333162 30.746426 3.395716 52.171148-0.039639 64.280774-10.306064z" fill="#FEFEFE" ></path><path d="M623.52351 388.835923c47.104-2.708645 101.276903-3.765677 103.589161 55.692387 1.057032 27.614968 2.292439 54.992103 3.699613 82.118193a3.600516 3.600516 0 0 1-0.951329 2.655794 3.468387 3.468387 0 0 1-2.55009 1.109884l-84.958968 0.066064c-1.803561-38.581677-6.276129-76.3904-13.411097-113.432774-0.660645-3.435355-0.990968-8.165574-0.990968-14.203871 0-7.174606-1.473239-11.845368-4.426322-14.005677z" fill="#CBCCCE" ></path><path d="M696.987252 592.050374c2.510452 35.238813 4.492387 70.385135 5.945806 105.438968 1.810168 42.902297-3.058787 80.823329-14.600258 113.763097-174.542452 0.178374-349.520929 0.066065-524.948645-0.330323-29.795097-0.066065-58.004645-3.303226-59.788387-40.96-2.906839-61.175742-3.831742-105.148284-2.77471-131.930839 0.660645-16.734142 7.029265-29.002323 19.092645-36.797935 7.445471-4.756645 19.647587-7.220852 36.599742-7.399226 178.598813-1.757316 358.756748-2.351897 540.473807-1.783742z" fill="#FEFEFE" ></path><path d="M696.987252 592.050374l60.184774 2.972903c5.542813 0.290684 10.543897 3.441961 13.212903 8.324129 11.297032 20.612129 10.107871 34.617806 10.570323 64.21471 0.574761 32.239484 0.422813 64.505394-0.462452 96.784516-1.453419 51.398194-49.614452 48.623484-92.16 46.905807 11.541471-32.939768 16.410426-70.8608 14.600258-113.763097a3556.186839 3556.186839 0 0 0-5.945806-105.438968z" fill="#CBCCCE" ></path><path d="M635.679381 877.647277l1.32129 56.617291c0.046245 2.378323 0.905084 4.426323 2.576516 6.144l9.050839 9.447226c-17.262658 2.074426-29.266581 3.131458-36.005161 3.171096-124.419303 0.574761-248.838606 0.422813-373.264517-0.462451-35.806968-0.264258-60.316903-35.344516-66.85729-67.584a6.077935 6.077935 0 0 1 5.945807-7.267097l457.232516-0.066065z" fill="#FEFEFE" ></path><path d="M635.679381 877.647277l71.547871 1.519484c2.378323 0.046245 3.329652 1.235406 2.840774 3.567484-6.011871 31.644903-26.227613 65.734194-61.44 67.121549l-9.050839-9.447226a8.746942 8.746942 0 0 1-2.576516-6.144l-1.32129-56.617291z" fill="#CBCCCE" ></path></symbol><symbol id="icon-shengdanwu" viewBox="0 0 1240 1024"><path d="M727.552 1012.303324c-9.807324-20.48-16.369577-26.825915-18.31662-50.046197 14.328789-12.259155 31.996394-17.141183 53.002817-14.638873a5.220958 5.220958 0 0 0 4.146479-1.312451 5.379606 5.379606 0 0 0 1.766761-4.023888c-1.009577-94.66231-1.175437-188.286197-0.504789-280.878873 0.194704-27.02062 2.862873-46.635268 8.004507-58.843943 17.667606-41.825352 61.656338-66.415775 106.582535-65.47831 48.603944 4.254648 83.362254 41.320563 83.290141 91.727324-0.237972 105.140282-0.504789 209.869521-0.793239 314.194929-0.021634 2.235493 0.843718 4.377239 2.401352 5.963719 1.557634 1.586479 3.677746 2.473465 5.891605 2.473464l26.39324 0.216338c4.809915 0 7.232901-2.430197 7.28338-7.28338l1.947042-540.051831a3.894085 3.894085 0 0 0-3.966197-3.894084l-126.774084 1.586478-174.729015-0.721126c-2.451831-0.050479-3.69938 1.175437-3.749859 3.677746l-3.24507 431.017465-59.997747 0.072113c-2.740282 0-4.398873-1.348507-4.975774-4.03831l-2.16338-10.384226 1.730704-416.594929c0-2.740282-1.370141-4.110423-4.110423-4.110423l-364.241127 0.288451-48.099154-0.072113a2.992676 2.992676 0 0 0-2.185015 0.879775 3.136901 3.136901 0 0 0-0.915831 2.22107l-0.072112 537.31155a5.12 5.12 0 0 0 5.047887 5.12l42.907042 0.721126c3.367662 0.043268 4.853183-1.615324 4.470986-4.975774-2.545577-22.931831-0.959099-47.551099 4.759437-73.84338 21.150648-39.229296 53.918648-60.913577 98.289577-65.045634 50.428394-4.759437 107.902197-4.593577 172.421409 0.504788 9.468394 0.721127 21.201127 8.725634 35.190986 24.013522 9.302535 35.118873-16.297465 43.556056-45.575212 43.988732-36.827944 0.576901-84.53769 0.742761-143.143662 0.504789-39.08507-0.216338-70.021408 31.224789-52.209577 69.372394 12.187042 26.032676 20.407887 35.046761 6.20169 68.651268-46.966986 6.295437-97.114141 8.148732-150.427042 5.552676-20.429521-1.009577-34.087662-9.713577-40.96-26.104789-4.615211-10.961127-6.901183-25.311549-6.850704-43.051268 0.814873-180.858592 1.247549-361.623437 1.298028-542.287324a3.713803 3.713803 0 0 0-1.146592-2.682591 3.858028 3.858028 0 0 0-2.747493-1.067268c-32.667042 0.793239-89.636056 7.932394-114.298591-6.634366-17.934423-10.528451-25.621634-29.472451-23.076057-56.824789 6.850704-74.203944 62.738028-151.364507 137.302536-163.767887 24.806761-4.139268 63.293296-6.158423 115.452394-6.057465 97.402592 0.187493 197.011831 0.403831 298.83493 0.649014 10.095775 0 11.033239-2.913352 2.812394-8.725633-19.109859-13.48507-47.882817-26.393239-60.574648-44.349296-14.27831-20.292507-14.184563-42.38062 0.288451-66.271549 35.118873-57.978592 137.302535-60.935211 183.52676-17.23493 46.53431 44.032 92.881127 88.265915 139.03324 132.687324 1.968676 1.87493 4.305127 2.783549 6.994929 2.740282l99.587606-1.081691c2.920563 0 5.696901-1.269183 7.571831-3.461408a1221.632 1221.632 0 0 1 123.096338-121.726197 75.588507 75.588507 0 0 1 35.335211-17.162817c68.218592-13.412958 131.172958 27.47493 144.585916 95.621408 5.531042 27.835493-1.225915 51.870648-20.263662 72.112676a4502.787606 4502.787606 0 0 1-129.225916 132.182536 28.232113 28.232113 0 0 0-8.437183 19.975211c-0.937465 200.689577-1.947042 403.109859-3.749859 605.025352-0.288451 35.190986-9.014085 65.983099-48.603944 66.343662-77.160563 0.670648-154.342761 1.298028-231.553802 1.87493a350.280113 350.280113 0 0 1-32.811268-1.370141c-11.538028-1.060056-22.520789-2.120113-32.955493-3.172958z m-68.146479-853.092958l-0.576901-2.812394c-0.670648-2.884507 0.45431-4.644056 3.389295-5.264226 2.112901-0.432676 4.160901-0.266817 6.129578 0.504789l20.407887 17.162817a27.114366 27.114366 0 0 0 17.162817 6.562254l7.716057 0.216338a5.264225 5.264225 0 0 0 3.749859-9.086198l-85.525634-79.828732c-9.807324-9.187155-21.395831-13.412958-34.75831-12.691831l-19.470423 1.009578c-12.929803 0.670648-14.638873 5.408451-5.12 14.206197a5002.095775 5002.095775 0 0 1 81.703662 77.160563c3.605634 3.461408 8.343437 4.326761 14.206198 2.596056 1.824451-0.533634 1.968676-1.370141 0.432676-2.523943l-9.446761-7.211268z m224.991549 85.237183c1.925408-3.172958 2.596056-5.509408 2.019155-6.994929-0.526423-1.254761-2.213859-1.730704-5.047887-1.442254-11.393803 1.153803-22.787606 1.730704-34.181408 1.730704-222.972394 0.093746-445.923155 1.052845-668.845071 2.884507-50.406761 0.432676-83.073803 32.450704-102.616338 76.006761a9.446761 9.446761 0 0 0 8.581409 13.268732l780.763943 0.504789c35.767887 1.103324 70.115155 1.08169 103.049014-0.072113 13.701408-0.504789 21.056901-5.624789 29.782536-15.071549a6814.878648 6814.878648 0 0 1 148.263662-154.609577c43.267606-43.772394-22.64338-86.030423-51.849015-60.863099-21.583324 18.60507-70.814648 65.521577-147.68676 140.763944-14.710986 14.27831-38.724507 11.32169-57.257465 9.951549-3.605634-0.288451-5.264225-2.307606-4.975775-6.057465z m10.514029 383.617803a8.220845 8.220845 0 0 0-8.206423-8.235267l-39.373521-0.072113a8.220845 8.220845 0 0 0-8.235268 8.206422l-0.548056 314.411268a8.220845 8.220845 0 0 0 8.206423 8.235268l39.373521 0.072112a8.220845 8.220845 0 0 0 8.235267-8.213634l0.548057-314.411267z" fill="#343333" ></path><path d="M668.347493 151.638535c-15.720563-17.379155-46.512676-56.247887-69.949296-57.834366-8.509296-0.533634-9.280901 1.658592-2.307605 6.562254 22.35493 15.864789 43.46231 35.479437 63.314929 58.843943l9.446761 7.211268c1.536 1.153803 1.391775 1.99031-0.432676 2.523943-5.862761 1.730704-10.600563 0.865352-14.206198-2.596056a5002.095775 5002.095775 0 0 0-81.703662-77.160563c-9.518873-8.797746-7.809803-13.535549 5.12-14.206197l19.470423-1.009578c13.362479-0.721127 24.950986 3.504676 34.75831 12.691831l85.525634 79.828732a5.264225 5.264225 0 0 1-3.749859 9.086198l-7.716057-0.216338a27.114366 27.114366 0 0 1-17.162817-6.562254l-20.407887-17.162817z" fill="#FEFEFE" ></path><path d="M865.070873 330.405859l-1.514366-76.655774a7.499718 7.499718 0 0 1 9.302535-7.427606c5.047887 1.298028 8.891493 0.670648 11.538028-1.87493-0.288451 3.749859 1.370141 5.769014 4.975775 6.057465 18.532958 1.370141 42.546479 4.326761 57.257465-9.951549 76.872113-75.242366 126.103437-122.158873 147.68676-140.763944 29.205634-25.167324 95.11662 17.090704 51.849015 60.863099a6814.878648 6814.878648 0 0 0-148.263662 154.609577c-8.725634 9.446761-16.081127 14.566761-29.782536 15.071549-32.933859 1.153803-67.281127 1.175437-103.049014 0.072113zM668.347493 151.638535a10.651042 10.651042 0 0 0-6.129578-0.504789c-2.934986 0.620169-4.059944 2.379718-3.389295 5.264226l0.576901 2.812394c-19.85262-23.364507-40.96-42.979155-63.314929-58.843943-6.973296-4.903662-6.20169-7.095887 2.307605-6.562254 23.43662 1.586479 54.228732 40.455211 69.949296 57.834366z" fill="#CBCCCE" ></path><path d="M884.39707 244.447549c-2.646535 2.545577-6.490141 3.172958-11.538028 1.87493a7.499718 7.499718 0 0 0-9.302535 7.427606l1.514366 76.655774-780.763943-0.504789a9.446761 9.446761 0 0 1-8.581409-13.268732c19.542535-43.556056 52.209577-75.574085 102.616338-76.006761 222.921915-1.831662 445.872676-2.790761 668.845071-2.884507 11.393803 0 22.787606-0.576901 34.181408-1.730704 2.834028-0.288451 4.521465 0.187493 5.047887 1.442254 0.576901 1.485521-0.093746 3.821972-2.019155 6.994929z" fill="#FEFEFE" ></path><path d="M262.425239 401.220507c1.492732 140.518761 1.824451 280.97262 1.009578 421.354366-0.050479 13.456225 1.586479 28.794592 4.903662 46.007888-5.718535 26.292282-7.305014 50.911549-4.759437 73.84338 0.382197 3.360451-1.103324 5.019042-4.470986 4.975774l-42.907042-0.721126a5.12 5.12 0 0 1-5.047887-5.12l0.072112-537.31155c0-0.836507 0.331718-1.636958 0.915831-2.22107 0.576901-0.576901 1.370141-0.901408 2.185015-0.879775l48.099154 0.072113z" fill="#E4D1A8" ></path><path d="M262.425239 401.220507l364.241127-0.288451c2.740282 0 4.110423 1.370141 4.110423 4.110423l-1.730704 416.594929c-21.778028-1.975887-40.044169 0.165859-54.805634 6.418029-13.989859-15.287887-25.722592-23.292394-35.190986-24.013522-64.519211-5.098366-121.993014-5.264225-172.421409-0.504788-44.37093 4.132056-77.13893 25.816338-98.289577 65.045634-3.317183-17.213296-4.954141-32.551662-4.903662-46.007888 0.814873-140.381746 0.483155-280.835606-1.009578-421.354366zM572.75493 575.60338c-10.982761-74.384225-81.278197-125.620282-157.003719-114.442817-36.366423 5.372394-69.148845 24.713014-91.128788 53.767212-21.987155 29.061408-31.369014 65.449465-26.097578 101.174084 10.982761 74.384225 81.270986 125.620282 157.003718 114.442817 36.366423-5.372394 69.141634-24.713014 91.128789-53.774422 21.987155-29.054197 31.369014-65.442254 26.097578-101.166874zM877.90693 402.013746l4.32676 135.067043c-44.926197-0.937465-88.91493 23.652958-106.582535 65.47831-5.141634 12.208676-7.809803 31.823324-8.004507 58.843943-0.670648 92.592676-0.504789 186.216563 0.504789 280.878873a5.379606 5.379606 0 0 1-1.766761 4.023888 5.220958 5.220958 0 0 1-4.146479 1.312451c-21.006423-2.50231-38.674028 2.379718-53.002817 14.638873-2.689803-22.311662-4.398873-60.170817-5.12-113.577465-0.093746-7.312225-2.740282-11.538028-7.932394-12.691831l3.24507-431.017465c0.050479-2.50231 1.298028-3.728225 3.749859-3.677746l174.729015 0.721126z" fill="#CA9F54" ></path><path d="M882.23369 537.080789l-4.32676-135.067043 126.774084-1.586478a3.894085 3.894085 0 0 1 3.966197 3.894084l-1.947042 540.051831c-0.050479 4.853183-2.473465 7.28338-7.28338 7.28338l-26.39324-0.216338c-2.213859 0-4.326761-0.894197-5.891605-2.473464a8.401127 8.401127 0 0 1-2.401352-5.963719c0.288451-104.325408 0.555268-209.054648 0.793239-314.194929 0.072113-50.406761-34.686197-87.472676-83.290141-91.727324z" fill="#AC884A" ></path><path d="M572.75493 575.60338c5.271437 35.72462-4.110423 72.112676-26.097578 101.174085-21.987155 29.054197-54.762366 48.387606-91.128789 53.76-75.725521 11.177465-146.020958-40.05138-157.003718-114.442817-5.271437-35.717408 4.110423-72.112676 26.097578-101.166873 21.979944-29.061408 54.762366-48.394817 91.128788-53.767212 75.725521-11.177465 146.020958 40.058592 157.003719 114.442817z m-74.665465 22.340507a64.468732 64.468732 0 1 0-128.937465 0 64.468732 64.468732 0 0 0 128.937465 0z" fill="#343333" ></path><path d="M433.620732 597.943887m-64.468732 0a64.468732 64.468732 0 1 0 128.937465 0 64.468732 64.468732 0 1 0-128.937465 0Z" fill="#FEFEFE" ></path><path d="M839.110625 619.745572m8.220833 0.014348l39.373461 0.06872q8.220833 0.014348 8.206484 8.235181l-0.548751 314.410788q-0.014348 8.220833-8.23518 8.206485l-39.373461-0.06872q-8.220833-0.014348-8.206485-8.235181l0.548751-314.410788q0.014348-8.220833 8.235181-8.206485Z" fill="#CA9F54" ></path><path d="M629.046085 821.637408l2.16338 10.384226c0.576901 2.689803 2.235493 4.03831 4.975774 4.03831l59.997747-0.072113c5.192113 1.153803 7.838648 5.379606 7.932394 12.691831 0.721127 53.406648 2.430197 91.265803 5.12 113.577465 1.947042 23.220282 8.509296 29.566197 18.31662 50.046197-108.507944-0.721127-216.338028-1.615324-323.497465-2.668169-0.33893 0-10.146254-0.749972-29.421972-2.235493-11.970704-0.915831-23.674592 0.144225-35.118873 3.172958 14.206197-33.604507 5.985352-42.618592-6.20169-68.651268-17.811831-38.147606 13.124507-69.588732 52.209577-69.372394 58.605972 0.237972 106.315718 0.072113 143.143662-0.504789 29.277746-0.432676 54.877746-8.869859 45.575212-43.988732 14.761465-6.252169 33.027606-8.393915 54.805634-6.418029z" fill="#FCC556" ></path></symbol><symbol id="icon-shengdanwanou" viewBox="0 0 1050 1024"><path d="M326.51159 231.758769c-3.373949-102.445949 39.338667-173.535179 128.131282-213.267692C474.729026 9.517949 497.480205 5.014974 522.909538 4.969026c91.50359-0.131282 166.334359 58.092308 193.706667 144.541538 7.614359 23.958974 6.564103 51.922051 6.892308 77.522051a5.382564 5.382564 0 0 0 5.316923 5.316923c79.556923 0.853333 170.338462-62.424615 245.825641-24.943589 77.915897 38.728205 95.245128 144.147692 34.789744 208.475897a383.179487 383.179487 0 0 1-62.490257 53.76 3460.621128 3460.621128 0 0 1-157.735385 102.4 8.073846 8.073846 0 0 0-3.610256 9.058462 14662.669128 14662.669128 0 0 1 70.301539 254.424615 349.078974 349.078974 0 0 1 8.598974 42.666667c9.189744 67.21641-30.129231 128.196923-98.067692 140.274872-44.307692 7.876923-82.379487-2.953846-113.952821-37.809231-42.404103-46.690462-85.924103-93.735385-130.56-141.128205a5.874872 5.874872 0 0 0-4.20759-1.831385 5.74359 5.74359 0 0 0-4.201025 1.772308 4196.102564 4196.102564 0 0 0-124.914872 135.286154c-32.164103 36.299487-58.748718 48.771282-107.913846 45.292307-60.586667-4.266667-101.152821-50.937436-109.489231-110.211282-2.822564-20.283077 2.756923-48.574359 9.124103-72.139487 23.433846-86.514872 47.98359-172.767179 71.614359-259.282051a10.338462 10.338462 0 0 0-4.529231-11.421539 2844.921436 2844.921436 0 0 1-156.422564-104.631795c-32.820513-23.552-57.324308-50.530462-73.517949-80.935384-44.504615-83.757949 25.074872-195.872821 123.339487-179.068718 48.403692 8.270769 84.283077 15.044923 107.651282 20.348718 26.25641 5.947077 51.029333 10.121846 74.305641 12.537436a3.413333 3.413333 0 0 0 3.741539-3.478975z m157.426872 102.636308c67.708718 20.184615 139.815385-21.188923 161.043692-92.409436 10.200615-34.198974 7.05641-70.852923-8.723692-101.888-15.780103-31.041641-42.916103-53.924103-75.434667-63.619282-67.708718-20.184615-139.815385 21.188923-161.043692 92.409436-10.194051 34.198974-7.05641 70.852923 8.730256 101.888 15.780103 31.041641 42.909538 53.924103 75.428103 63.619282z m410.499282-68.306051c-78.112821 21.13641-125.833846 31.113846-193.837949 35.052307-2.231795 0.131282-4.030359 1.096205-5.382564 2.888205a1750.514872 1750.514872 0 0 1-20.348718 27.109744c-83.232821 107.913846-234.732308 98.461538-312.648205-9.846154a247.112205 247.112205 0 0 0-13.39077-16.935384 8.027897 8.027897 0 0 0-5.448205-2.822565 2403.446154 2403.446154 0 0 1-200.598974-32.098461c-7.089231-1.398154-17.854359-1.096205-32.295385 0.918974-108.767179 43.913846 25.271795 148.48 68.397949 174.933334 1.398154 2.100513 2.382769 3.328 2.953846 3.675897 48.922256 29.492513 89.160205 55.401026 120.713846 77.718974 10.502564 7.417436 22.514872 13.981538 18.707693 29.866667-24.746667 104.237949-55.794872 206.834872-83.232821 310.350769-7.220513 27.437949-5.579487 58.157949 15.294359 77.981539 32.820513 31.37641 72.598974 4.594872 95.835898-22.449231a5363.659487 5363.659487 0 0 1 126.884102-142.178462c17.368615-18.727385 35.794051-22.711795 55.269744-11.946666 10.148103 5.559795 26.276103 19.101538 48.377436 40.631795 22.711795 22.055385 66.231795 68.266667 130.56 138.633846 9.058462 9.892103 19.495385 13.653333 31.310769 11.290256 75.355897-2.034872 60.652308-66.100513 48.114872-115.003077-11.946667-46.821744-30.982564-118.790564-57.107693-215.893333-7.220513-26.912821-12.235487-50.103795-15.031795-69.579487-1.969231-14.047179 3.21641-20.873846 14.112821-28.028718 64.498872-42.404103 117.208615-76.425846 158.129231-102.071795 31.179487-19.561026 86.186667-54.875897 90.978461-95.113846 3.741538-31.048205-13.981538-66.297436-47.064615-71.811282-12.826256-2.146462-25.908513-0.571077-39.253333 4.726154z" fill="#343333" ></path><path d="M483.938462 334.395077c-32.518564-9.695179-59.648-32.577641-75.434667-63.619282-15.780103-31.035077-18.917744-67.689026-8.723692-101.888 21.228308-71.220513 93.334974-112.594051 161.043692-92.409436 32.518564 9.695179 59.654564 32.577641 75.434667 63.619282 15.780103 31.035077 18.924308 67.689026 8.730256 101.888-21.234872 71.220513-93.341538 112.594051-161.050256 92.409436z m-32.662975-85.070769c17.165128 10.430359 40.251077 3.794051 51.56759-14.821744 11.323077-18.615795 6.583795-42.167795-10.574769-52.598154-17.158564-10.436923-40.251077-3.807179-51.56759 14.81518-11.316513 18.615795-6.583795 42.167795 10.574769 52.598154z m163.925334-22.678975c2.527179-9.163487 1.050256-19.029333-4.096-27.418256-5.146256-8.388923-13.541744-14.618256-23.341949-17.316103-20.414359-5.618872-41.222564 5.290667-46.473846 24.372513-2.527179 9.163487-1.050256 19.029333 4.089436 27.418257 5.146256 8.388923 13.548308 14.618256 23.348512 17.316102 20.414359 5.625436 41.222564-5.290667 46.473847-24.372513z" fill="#CA9F54" ></path><path d="M492.270342 181.902457a36.365128 39.450256 31.3 1 0-40.990325 67.41724 36.365128 39.450256 31.3 1 0 40.990325-67.41724Z" fill="#343333" ></path><path d="M541.286944 206.284487a38.334359 35.84 15.4 1 0 73.915958 20.359847 38.334359 35.84 15.4 1 0-73.915958-20.359847Z" fill="#343333" ></path><path d="M741.559795 958.86441c6.209641-1.312821 8.027897-5.77641 5.448205-13.390769-4.46359-13.062564-7.483077-26.125128-10.89641-39.450256a5222.596923 5222.596923 0 0 1-71.089231-319.737436c-3.085128-16.147692-0.787692-29.275897 11.027692-42.010257 24.94359-26.978462 53.76-51.068718 83.692308-76.077948 42.404103-35.446154 80.01641-71.811282 120.123077-107.979488 11.723487-10.548513 20.499692-19.82359 26.322051-27.831794 20.827897-28.704821 16.909128-50.806154-11.749743-66.297436 13.344821-5.297231 26.427077-6.872615 39.253333-4.726154 33.083077 5.513846 50.806154 40.763077 47.064615 71.811282-4.791795 40.237949-59.798974 75.552821-90.978461 95.113846-40.920615 25.645949-93.630359 59.667692-158.129231 102.071795-10.89641 7.154872-16.082051 13.981538-14.112821 28.028718 2.796308 19.475692 7.811282 42.666667 15.031795 69.579487 26.125128 97.102769 45.161026 169.07159 57.107693 215.893333 12.537436 48.902564 27.241026 112.968205-48.114872 115.003077z" fill="#AC884A" ></path><path d="M894.437744 266.089026c28.658872 15.491282 32.577641 37.592615 11.749743 66.297436-5.822359 8.008205-14.598564 17.283282-26.322051 27.831794-40.106667 36.168205-77.718974 72.533333-120.123077 107.979488-29.932308 25.009231-58.748718 49.099487-83.692308 76.077948-11.815385 12.734359-14.112821 25.862564-11.027692 42.010257a5222.596923 5222.596923 0 0 0 71.089231 319.737436c3.413333 13.325128 6.432821 26.387692 10.89641 39.450256 2.579692 7.614359 0.761436 12.077949-5.448205 13.390769-11.815385 2.363077-22.252308-1.398154-31.310769-11.290256-64.328205-70.367179-107.848205-116.578462-130.56-138.633846-22.101333-21.530256-38.229333-35.072-48.377436-40.631795-19.475692-10.765128-37.901128-6.780718-55.269744 11.946666a5363.659487 5363.659487 0 0 0-126.884102 142.178462c-23.236923 27.044103-63.015385 53.825641-95.835898 22.449231-20.873846-19.82359-22.514872-50.54359-15.294359-77.981539 27.437949-103.515897 58.486154-206.112821 83.232821-310.350769 3.807179-15.885128-8.205128-22.449231-18.707693-29.866667-31.553641-22.317949-71.79159-48.226462-120.713846-77.718974-0.571077-0.347897-1.555692-1.575385-2.953846-3.675897a4.46359 4.46359 0 0 0 1.772308-0.853334c0.827077-0.65641 0.892718-1.378462 0.196923-2.166154-38.203077-43.257436-86.252308-110.670769-63.146667-167.318974 0.787692-1.969231 0.170667-3.301744-1.837949-4.004102a13.193846 13.193846 0 0 0-5.382564-0.59077c14.441026-2.015179 25.206154-2.317128 32.295385-0.918974a2403.446154 2403.446154 0 0 0 200.598974 32.098461c2.185846 0.216615 4.004103 1.161846 5.448205 2.822565 4.726154 5.467897 9.189744 11.113026 13.39077 16.935384 77.915897 108.307692 229.415385 117.76 312.648205 9.846154a1750.514872 1750.514872 0 0 0 20.348718-27.109744c1.352205-1.792 3.150769-2.756923 5.382564-2.888205 68.004103-3.938462 115.725128-13.915897 193.837949-35.052307z m-322.625641 204.471795a50.477949 50.477949 0 1 0-100.955898 0 50.477949 50.477949 0 0 0 100.955898 0z m95.113846 43.277128c20.886974-15.228718 24.503795-45.830564 8.073846-68.358564-7.883487-10.817641-19.429744-18.28759-32.098462-20.762257-12.668718-2.474667-25.422769 0.236308-35.452718 7.548718-20.886974 15.228718-24.503795 45.837128-8.073846 68.365128 7.883487 10.817641 19.429744 18.28759 32.098462 20.762257 12.675282 2.481231 25.429333-0.236308 35.459282-7.548718zM451.800615 475.575795c0.715487-25.652513-21.267692-47.084308-49.099487-47.858872-13.364513-0.374154-26.322051 4.161641-36.010666 12.609641-9.695179 8.448-15.333744 20.118974-15.675077 32.439795-0.722051 25.652513 21.267692 47.084308 49.092923 47.858872 13.364513 0.374154 26.322051-4.161641 36.010666-12.609641 9.695179-8.448 15.333744-20.118974 15.681641-32.439795z" fill="#CA9F54" ></path><path d="M110.486974 270.355692c1.837949-0.177231 3.629949 0.019692 5.382564 0.59077 2.008615 0.702359 2.625641 2.034872 1.837949 4.004102-23.105641 56.648205 24.94359 124.061538 63.146667 167.318974 0.695795 0.787692 0.630154 1.509744-0.196923 2.166154a4.46359 4.46359 0 0 1-1.772308 0.853334c-43.126154-26.453333-177.165128-131.019487-68.397949-174.933334z" fill="#E4D1A8" ></path><path d="M521.334154 470.560821m-50.477949 0a50.477949 50.477949 0 1 0 100.955898 0 50.477949 50.477949 0 1 0-100.955898 0Z" fill="#343333" ></path><path d="M607.449141 432.269508a50.477949 46.802051 53.9 1 0 59.482847 81.571343 50.477949 46.802051 53.9 1 0-59.482847-81.571343Z" fill="#343333" ></path><path d="M351.015347 472.763483a50.412308 46.473846 1.6 1 0 100.785306 2.815188 50.412308 46.473846 1.6 1 0-100.785306-2.815188Z" fill="#343333" ></path></symbol><symbol id="icon-shengdanshu" viewBox="0 0 1024 1024"><path d="M593.026327 979.99903l-6.330182-60.695272a5.492364 5.492364 0 0 0-5.523393-4.902788l-138.953697 1.241212a2.916848 2.916848 0 0 0-2.916849 3.04097l1.365333 37.360484c-6.578424 19.176727-18.556121 49.772606-33.016242 59.640243-9.991758 6.888727-26.561939 4.096-38.974061 3.165091-106.210521-8.235442-207.822352-31.278545-304.841697-69.135515-28.920242-11.29503-56.102788-35.622788-34.071272-68.204607a24733.385697 24733.385697 0 0 1 197.911272-288.83006c2.147297-3.10303 1.694255-5.771636-1.365333-8.005818l-32.768-23.583031a9.836606 9.836606 0 0 1-2.482424-13.405091l109.102545-167.253333a2.358303 2.358303 0 0 0-0.992969-3.413333c-37.546667-16.942545-40.401455-41.890909-17.811394-76.83103a33366.593164 33366.593164 0 0 1 191.705212-293.546667c1.154327-1.781139 2.749285-2.978909 4.778666-3.599515 17.625212-5.275152 41.084121-4.964848 53.248 11.419151a7283.078982 7283.078982 0 0 1 142.30497 198.780121 13.498182 13.498182 0 0 1-1.923879 17.563152l-20.914424 19.48703c-2.978909 2.767903-3.351273 5.833697-1.117091 9.18497l181.27903 272.384c1.613576 2.438982 1.092267 4.3008-1.551515 5.585454-11.009552 5.374448-17.650036 14.149818-19.921454 26.313697a10.767515 10.767515 0 0 1-11.419152 8.688485l-21.410909-1.613575a2.606545 2.606545 0 0 0-2.172121 4.344242c16.340558 18.698861 29.044364 34.853236 38.105212 48.469333a18978.23263 18978.23263 0 0 0 177.679515 261.523394c25.56897 36.926061-15.018667 57.406061-46.607515 68.452849-105.999515 36.988121-211.378424 58.479709-316.136727 64.480969-6.206061 0.328921-11.108848-3.022352-14.708364-10.053818-2.978909-5.796461-9.495273-15.142788-19.549091-28.051394zM499.625115 78.010182c-56.723394 83.446691-109.580412 164.355103-158.564848 242.71903-3.227152 5.213091-2.153503 7.900315 3.227151 8.067879a5.945406 5.945406 0 0 0 2.978909-0.682667l71.183515-38.849939c13.609891-5.380655 45.589721-19.28223 95.945697-41.704727 6.988024-3.10303 10.4448-7.906521 10.364122-14.398061 0-2.321067 1.117091-3.189915 3.351272-2.606545 21.783273 5.523394 46.669576-12.908606 64.418909-22.590061 3.847758-2.110061 4.486982-4.94623 1.923879-8.502303-19.238788-26.977745-36.907442-52.25503-52.999757-75.838061-8.651248-12.623127-22.590061-27.827976-41.828849-45.614545z m-95.138909 283.554909a1.985939 1.985939 0 0 0 0 3.661576l329.479758 135.043878a1.985939 1.985939 0 0 0 2.420363-2.916848l-143.297939-215.164121a1.985939 1.985939 0 0 0-2.420364-0.682667l-186.181818 80.058182z m-109.412848 157.447757c3.140267 2.234182 5.275152 3.369891 6.392242 3.413334 52.912873 1.073648 105.788509 0.496485 158.626909-1.737697 32.147394-1.365333 58.274909-7.571394 86.202182-19.42497a4.033939 4.033939 0 0 0 0.372364-7.19903 1093.563733 1093.563733 0 0 0-163.281455-72.362667l-20.107636-11.108848a5.08897 5.08897 0 0 0-6.516364 1.365333l-72.300606 94.145939a8.63263 8.63263 0 0 0-1.365333 8.440243c1.19777 3.51263 5.188267 5.002085 11.977697 4.468363z m302.855757 20.728243c-90.980848 51.262061-179.16897 43.318303-278.59006 32.457697a4.623515 4.623515 0 0 0-4.344243 1.985939l-102.524121 146.276849a16717.284073 16717.284073 0 0 0-87.939879 126.913939c-6.125382 8.893285-10.513067 16.446061-13.156848 22.652121-4.307006 9.966933-2.010764 11.853576 6.888727 5.647516l32.643879-22.590061c18.618182-7.571394 38.849939-18.556121 54.054788-25.382788 69.011394-31.030303 137.855224-62.395733 206.537697-94.083879a1115.868315 1115.868315 0 0 1 79.127272-32.892121 17.37697 17.37697 0 0 1 13.963637 0.806788c11.996315 6.206061 24.9856 12.412121 38.97406 18.618182 23.707152 10.550303 32.954182-3.661576 55.854546-7.385212 22.627297-3.642958 45.614545-6.454303 68.949333-8.440243l84.774788-9.867636a4.902788 4.902788 0 0 0 3.475394-7.571394l-110.157576-163.467636a11.791515 11.791515 0 0 0-15.949576-3.475394l-32.581818 19.797333z m186.616243 288.768l114.005333 46.855757c8.3968 3.431952 10.072436 1.365333 5.026909-6.20606l-99.483152-149.504c-28.839564 13.069964-51.553745 20.995103-68.142545 23.769212-28.299636 4.797285-56.270352 8.334739-83.905939 10.612364-8.899491 0.744727-9.352533 3.121648-1.365334 7.136969l133.864728 67.335758z m-75.71394 119.83903l128.403394-25.444848c9.59457-1.905261 9.780752-4.449745 0.558546-7.633455-45.515248-15.726158-91.663515-35.337309-138.457213-58.833454a1814.192873 1814.192873 0 0 0-190.029575-86.388364c-18.307879-7.074909-53.310061 12.412121-63.177697 17.190788-89.429333 43.380364-182.147879 82.354424-269.963637 128.465454-3.847758 2.066618-3.6864 3.723636 0.496485 4.964849a1019.692994 1019.692994 0 0 0 189.533091 37.732848 5.554424 5.554424 0 0 0 4.139443-1.328097 5.430303 5.430303 0 0 0 1.880436-3.8912l4.964848-97.807515a9.805576 9.805576 0 0 1 10.798546-9.309091 1510.623418 1510.623418 0 0 0 228.258909 5.523394c6.888727-0.372364 14.956606-3.227152 22.093576-3.040969a7.19903 7.19903 0 0 1 6.950788 6.578424l8.005818 95.076848c0.148945 1.743903 1.011588 3.351273 2.376921 4.431128 1.365333 1.079855 3.10303 1.545309 4.822109 1.278448l48.345212-7.571394z" fill="#312E2E" ></path><path d="M418.449842 289.264485c25.854448-55.94143 48.531394-115.33343 68.018425-178.176 2.234182-7.19903 6.615661-18.2272 13.156848-33.078303 19.238788 17.78657 33.1776 32.991418 41.828849 45.614545 16.092315 23.58303 33.76097 48.860315 52.999757 75.838061 2.563103 3.556073 1.923879 6.392242-1.923879 8.502303-17.749333 9.681455-42.635636 28.113455-64.418909 22.590061-2.234182-0.58337-3.351273 0.285479-3.351272 2.606545 0.080679 6.491539-3.376097 11.29503-10.364122 14.398061-50.355976 22.422497-82.335806 36.324073-95.945697 41.704727z" fill="#02BD69" ></path><path d="M499.625115 78.010182c-6.541188 14.851103-10.922667 25.879273-13.156848 33.078303-19.48703 62.84257-42.163976 122.23457-68.018425 178.176l-71.183515 38.849939a5.945406 5.945406 0 0 1-2.978909 0.682667c-5.380655-0.167564-6.454303-2.854788-3.227151-8.067879 48.984436-78.363927 101.841455-159.272339 158.564848-242.71903zM404.486206 361.565091l186.181818-80.058182a1.985939 1.985939 0 0 1 2.420364 0.682667l143.297939 215.164121a1.985939 1.985939 0 0 1-2.420363 2.916848l-329.479758-135.043878a1.985939 1.985939 0 0 1 0-3.661576zM383.3856 421.701818c-26.357139 33.301721-53.272824 64.394085-80.740848 93.277091-0.99297 1.030206-3.518836 2.376921-7.571394 4.033939-6.78943 0.533721-10.779927-0.955733-11.977697-4.468363a8.63263 8.63263 0 0 1 1.365333-8.440243l72.300606-94.145939a5.08897 5.08897 0 0 1 6.516364-1.365333l20.107636 11.108848z" fill="#FEFEFE" ></path><path d="M383.3856 421.701818a1093.563733 1093.563733 0 0 1 163.281455 72.362667 4.033939 4.033939 0 0 1-0.372364 7.19903c-27.927273 11.853576-54.054788 18.059636-86.202182 19.42497-52.8384 2.234182-105.714036 2.811345-158.626909 1.737697-1.117091-0.043442-3.251976-1.179152-6.392242-3.413334 4.052558-1.657018 6.578424-3.003733 7.571394-4.033939 27.468024-28.883006 54.383709-59.97537 80.740848-93.277091z" fill="#FE5A41" ></path><path d="M668.367903 704.325818c-19.611152-62.619152-46.421333-109.226667-70.438788-164.584727l32.581818-19.797333a11.791515 11.791515 0 0 1 15.949576 3.475394l110.157576 163.467636a4.902788 4.902788 0 0 1-3.475394 7.571394l-84.774788 9.867636z" fill="#0E8A4D" ></path><path d="M597.929115 539.741091c24.017455 55.358061 50.827636 101.965576 70.438788 164.584727-23.334788 1.985939-46.322036 4.797285-68.949333 8.440243-22.900364 3.723636-32.147394 17.935515-55.854546 7.385212-13.988461-6.206061-26.977745-12.412121-38.97406-18.618182a17.37697 17.37697 0 0 0-13.963637-0.806788 1115.868315 1115.868315 0 0 0-79.127272 32.892121 23214.359273 23214.359273 0 0 1-206.537697 94.083879c-15.204848 6.826667-35.436606 17.811394-54.054788 25.382788 4.629721-24.824242 12.101818-45.180121 22.403878-61.067636 17.910691-27.67903 30.968242-51.535127 39.160243-71.555879l102.524121-146.276849a4.623515 4.623515 0 0 1 4.344243-1.985939c99.421091 10.860606 187.609212 18.804364 278.59006-32.457697z" fill="#02BD69" ></path><path d="M804.094448 719.654788l-19.54909 108.854303-133.864728-67.335758c-7.9872-4.015321-7.534158-6.392242 1.365334-7.136969 27.635588-2.277624 55.606303-5.815079 83.905939-10.612364 16.5888-2.774109 39.302982-10.699248 68.142545-23.769212zM212.470691 720.461576c-8.192 20.020752-21.249552 43.876848-39.160243 71.555879-10.302061 15.887515-17.774158 36.243394-22.403878 61.067636l-32.643879 22.590061c-8.899491 6.206061-11.195733 4.319418-6.888727-5.647516 2.643782-6.206061 7.031467-13.758836 13.156848-22.652121 28.460994-41.499927 57.778424-83.806642 87.939879-126.913939z" fill="#FEFEFE" ></path><path d="M804.094448 719.654788l99.483152 149.504c5.045527 7.571394 3.369891 9.638012-5.026909 6.20606l-114.005333-46.855757 19.54909-108.854303z" fill="#C4C4C4" ></path><path d="M699.336145 856.436364l9.495273 91.911757-48.345212 7.571394a6.237091 6.237091 0 0 1-4.822109-1.284654 6.361212 6.361212 0 0 1-2.376921-4.431128l-8.005818-95.076848a7.19903 7.19903 0 0 0-6.950788-6.578424c-7.13697-0.186182-15.204848 2.668606-22.093576 3.040969a1510.623418 1510.623418 0 0 1-228.258909-5.523394 9.805576 9.805576 0 0 0-10.798546 9.309091l-4.964848 97.807515a5.430303 5.430303 0 0 1-1.880436 3.8912 5.554424 5.554424 0 0 1-4.139443 1.321891 1019.692994 1019.692994 0 0 1-189.533091-37.732848c-4.182885-1.241212-4.344242-2.892024-0.496485-4.964849 87.815758-46.11103 180.534303-85.085091 269.963637-128.465454 9.867636-4.778667 44.869818-24.265697 63.177697-17.190788a1814.192873 1814.192873 0 0 1 190.029575 86.388364z" fill="#EBC987" ></path><path d="M699.336145 856.436364c46.793697 23.496145 92.941964 43.107297 138.457213 58.833454 9.222206 3.183709 9.036024 5.728194-0.558546 7.633455l-128.403394 25.444848-9.495273-91.911757zM593.026327 979.99903a470.45663 470.45663 0 0 1-97.497212 3.413334c-19.946279-1.365333-38.229333-10.488242-54.861576-27.368728l-1.365333-37.360484a2.916848 2.916848 0 0 1 2.916849-3.04097l138.953697-1.241212a5.492364 5.492364 0 0 1 5.523393 4.902788l6.330182 60.695272z" fill="#CCAB72" ></path></symbol></svg>',function(c){var a=(a=document.getElementsByTagName("script"))[a.length-1],l=a.getAttribute("data-injectcss"),a=a.getAttribute("data-disable-injectsvg");if(!a){var t,h,i,p,z,d=function(a,l){l.parentNode.insertBefore(a,l)};if(l&&!c.__iconfont__svg__cssinject__){c.__iconfont__svg__cssinject__=!0;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>")}catch(a){console&&console.log(a)}}t=function(){var a,l=document.createElement("div");l.innerHTML=c._iconfont_svg_string_4495027,(l=l.getElementsByTagName("svg")[0])&&(l.setAttribute("aria-hidden","true"),l.style.position="absolute",l.style.width=0,l.style.height=0,l.style.overflow="hidden",l=l,(a=document.body).firstChild?d(l,a.firstChild):a.appendChild(l))},document.addEventListener?~["complete","loaded","interactive"].indexOf(document.readyState)?setTimeout(t,0):(h=function(){document.removeEventListener("DOMContentLoaded",h,!1),t()},document.addEventListener("DOMContentLoaded",h,!1)):document.attachEvent&&(i=t,p=c.document,z=!1,e(),p.onreadystatechange=function(){"complete"==p.readyState&&(p.onreadystatechange=null,M())})}function M(){z||(z=!0,i())}function e(){try{p.documentElement.doScroll("left")}catch(a){return void setTimeout(e,50)}M()}}(window);]]></content>
      
    </entry>
    
    
  
</search>
