<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>繁星、博客</title>
  
  <subtitle>所念皆星河，满眼皆是你</subtitle>
  <link href="https://wjlgmw-github-io.vercel.app/atom.xml" rel="self"/>
  
  <link href="https://wjlgmw-github-io.vercel.app/"/>
  <updated>2024-04-21T13:04:10.323Z</updated>
  <id>https://wjlgmw-github-io.vercel.app/</id>
  
  <author>
    <name>繁星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>坦克移动</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/49306d37.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/49306d37.html</id>
    <published>2024-04-21T20:51:04.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<html>    <head>        <meta charset="utf-8" />        <title>让坦克开起来</title>        <style type="text/css">            input{font-size:26px;margin-top: 20px;}            body{background-image: url(images/grassland.png);}            #mytank{position: absolute;left:10px;top:100px}        </style>    </head><body onkeydown="moveTank(event)"><img id="mytank" src="../img/siteicon/right.png"/><script>    //219970531 汪建龙    let currentDirection = 'right'; // 初始方向为右侧    function moveTank(event) {        const tank = document.getElementById('mytank');        const tankWidth = tank.offsetWidth;        const tankHeight = tank.offsetHeight;        const screenWidth = window.innerWidth;        const screenHeight = window.innerHeight;        // 禁用鼠标右键        document.oncontextmenu = function() {            return false;        };        const key = event.key.toLowerCase();        let left = parseInt(tank.style.left) || 0;        let top = parseInt(tank.style.top) || 0;        switch (key) {            case 'w': // 上            case 'arrowup':                top = Math.max(top - 10, 0);                currentDirection = 'up';                break;            case 's': // 下            case 'arrowdown':                top = Math.min(top + 10, screenHeight - tankHeight);                currentDirection = 'down';                break;            case 'a': // 左            case 'arrowleft':                left = Math.max(left - 10, 0);                currentDirection = 'left';                break;            case 'd': // 右            case 'arrowright':                left = Math.min(left + 10, screenWidth - tankWidth);                currentDirection = 'right';                break;        }        // 更新坦克位置        tank.style.left = left + 'px';        tank.style.top = top + 'px';        // 更新坦克方向        tank.src = `../img/siteicon/${currentDirection}.png`;    }</script></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;让坦克开起来&lt;/title&gt;
        &lt;style type=&quot;text/css&quot;&gt;
            input{font-size</summary>
      
    
    
    
    <category term="前端js" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%89%8D%E7%AB%AFjs/"/>
    
    
    <category term="前端" scheme="https://wjlgmw-github-io.vercel.app/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>苍穹外卖(九)</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/7727bd2.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/7727bd2.html</id>
    <published>2024-04-21T17:17:14.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户端历史订单模块"><a href="#用户端历史订单模块" class="headerlink" title="用户端历史订单模块"></a>用户端历史订单模块</h1><h2 id="查询历史订单"><a href="#查询历史订单" class="headerlink" title="查询历史订单"></a>查询历史订单</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="https://img.picgo.net/2024/04/21/CK0YZOTMTCBPIQLON7C8f81a0805feb6e7a.png" ><br>返回数据是Oders+orderDetailList</p><h3 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h3><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 历史订单查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/historyOrders&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;历史订单查询&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">historyOrdersPage</span><span class="params">(<span class="meta">@RequestParam(&quot;page&quot;)</span> <span class="type">int</span> page, <span class="meta">@RequestParam(&quot;pageSize&quot;)</span> <span class="type">int</span> pageSize,Integer status)</span>&#123;</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> orderService.historyOrdersPage(page,pageSize,status);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 历史订单查询</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> PageResult <span class="title function_">historyOrdersPage</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, Integer status)</span> &#123;</span><br><span class="line">       <span class="comment">//先进行分页查询</span></span><br><span class="line">       PageHelper.startPage(page,pageSize);</span><br><span class="line"></span><br><span class="line">       <span class="type">OrdersPageQueryDTO</span> <span class="variable">ordersPageQueryDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrdersPageQueryDTO</span>();</span><br><span class="line">       ordersPageQueryDTO.setUserId(BaseContext.getCurrentId());</span><br><span class="line">       ordersPageQueryDTO.setStatus(status);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 分页条件查询</span></span><br><span class="line">       Page&lt;Orders&gt; p = orderMapper.pageQuery(ordersPageQueryDTO);</span><br><span class="line"></span><br><span class="line">       List&lt;OrderVO&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 查询出订单明细，并封装入OrderVO进行响应</span></span><br><span class="line">       <span class="keyword">if</span> (p != <span class="literal">null</span> &amp;&amp; p.getTotal() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Orders orders : p) &#123;</span><br><span class="line">               <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> orders.getId();<span class="comment">// 订单id</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">// 查询订单明细</span></span><br><span class="line">               List&lt;OrderDetail&gt; orderDetails = orderDetailMapper.getByOrderId(orderId);</span><br><span class="line"></span><br><span class="line">               <span class="type">OrderVO</span> <span class="variable">orderVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderVO</span>();</span><br><span class="line">               BeanUtils.copyProperties(orders, orderVO);</span><br><span class="line">               orderVO.setOrderDetailList(orderDetails);</span><br><span class="line"></span><br><span class="line">               list.add(orderVO);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(p.getTotal(), list);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>dao<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页条件查询并按下单时间排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ordersPageQueryDTO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Page&lt;Orders&gt; <span class="title function_">pageQuery</span><span class="params">(OrdersPageQueryDTO ordersPageQueryDTO)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据订单id查询订单明细</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from order_detail where order_id = #&#123;orderId&#125;&quot;)</span></span><br><span class="line">List&lt;OrderDetail&gt; <span class="title function_">getByOrderId</span><span class="params">(Long orderId)</span>;</span><br></pre></td></tr></table></figure></p><p>dao.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;pageQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.entity.Orders&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.sky.dto.OrdersPageQueryDTO&quot;</span>&gt;</span></span><br><span class="line">        select * from orders</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;number != null and number!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and number like concat(&#x27;%&#x27;,#&#123;number&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null and phone!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and phone like concat(&#x27;%&#x27;,#&#123;phone&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userId != null&quot;</span>&gt;</span></span><br><span class="line">                and user_id = #&#123;userId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">                and status = #&#123;status&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;beginTime != null&quot;</span>&gt;</span></span><br><span class="line">                and order_time <span class="symbol">&amp;gt;</span>= #&#123;beginTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;endTime != null&quot;</span>&gt;</span></span><br><span class="line">                and order_time <span class="symbol">&amp;lt;</span>= #&#123;endTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by order_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="查询订单详情"><a href="#查询订单详情" class="headerlink" title="查询订单详情"></a>查询订单详情</h2><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="https://img.picgo.net/2024/04/21/LYXT6S29LE7CJ0MQCRSXE9fe6f6687313ffb9.png"><br>返回数据是Oders+orderDetailList</p><h3 id="接口开发-1"><a href="#接口开发-1" class="headerlink" title="接口开发"></a>接口开发</h3><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询订单详情</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/orderDetail/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;查询订单详情&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">orderDetail</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">   <span class="type">OrderVO</span> <span class="variable">orderVO</span> <span class="operator">=</span> orderService.getOrderDetailById(id);</span><br><span class="line">   <span class="keyword">return</span> Result.success(orderVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询订单详情</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> OrderVO <span class="title function_">getOrderDetailById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="type">OrderVO</span> <span class="variable">orderVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderVO</span>();</span><br><span class="line">       <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> orderMapper.getById(id);</span><br><span class="line">       List&lt;OrderDetail&gt; orderDetailList = orderDetailMapper.getByOrderId(id);</span><br><span class="line">       BeanUtils.copyProperties(orders,orderVO);</span><br><span class="line">       orderVO.setOrderDetailList(orderDetailList);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> orderVO;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="取消订单"><a href="#取消订单" class="headerlink" title="取消订单"></a>取消订单</h2><h3 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="https://img.picgo.net/2024/04/21/EVRRXFYIH7SY608_Q8f9f0083b465c9c1.png"></p><h3 id="接口开发-2"><a href="#接口开发-2" class="headerlink" title="接口开发"></a>接口开发</h3><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 取消订单</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PutMapping(&quot;/cancel/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;取消订单&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">cancel</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">       orderService.cancel(id);</span><br><span class="line">       <span class="keyword">return</span> Result.success();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取消订单</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">      orderMapper.cancel(id);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>dao层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;update orders set status=6 where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure></p><h2 id="再来一单"><a href="#再来一单" class="headerlink" title="再来一单"></a>再来一单</h2><h3 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="https://img.picgo.net/2024/04/21/BASQT3YXPJCRBBERZH16a190f2e1911d52.png"></p><h3 id="接口开发-3"><a href="#接口开发-3" class="headerlink" title="接口开发"></a>接口开发</h3><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 再来一单</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@PostMapping(&quot;/repetition/&#123;id&#125;&quot;)</span></span><br><span class="line">  <span class="meta">@ApiOperation(&quot;再来一单&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">repetition</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">      orderService.repetition(id);</span><br><span class="line">      <span class="keyword">return</span> Result.success();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 再来一单</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">repetition</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> orderMapper.getById(id);</span><br><span class="line">       orders.setStatus(Orders.PENDING_PAYMENT);</span><br><span class="line">       orders.setPayStatus(Orders.UN_PAID);</span><br><span class="line">       orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">       orders.setNumber(String.valueOf(System.currentTimeMillis()));</span><br><span class="line">       orderMapper.insert(orders);</span><br><span class="line">       List&lt;OrderDetail&gt; orderDetailList = orderDetailMapper.getByOrderId(id);</span><br><span class="line">       <span class="keyword">for</span> (OrderDetail orderDetail : orderDetailList) &#123;</span><br><span class="line">           orderDetail.setOrderId(orders.getId());</span><br><span class="line">       &#125;</span><br><span class="line">       orderDetailMapper.insertBatch(orderDetailList);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="商家端订单管理模块"><a href="#商家端订单管理模块" class="headerlink" title="商家端订单管理模块"></a>商家端订单管理模块</h1><h2 id="订单搜索"><a href="#订单搜索" class="headerlink" title="订单搜索"></a>订单搜索</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用户端历史订单模块&quot;&gt;&lt;a href=&quot;#用户端历史订单模块&quot; class=&quot;headerlink&quot; title=&quot;用户端历史订单模块&quot;&gt;&lt;/a&gt;用户端历史订单模块&lt;/h1&gt;&lt;h2 id=&quot;查询历史订单&quot;&gt;&lt;a href=&quot;#查询历史订单&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WebSocket快速入门</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/2d382316.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/2d382316.html</id>
    <published>2024-04-21T14:53:53.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>WebSocket 是基于 TCP 的一种新的网络协议。它实现了浏览器与服务器全双工通信——浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接， 并进行双向数据传输。</p><p><img src="https://img.picgo.net/2024/04/21/QBP6AB0ND8SCDV_C_KA4cc86a385df3a1e4.png" ></p><p><img src="https://img.picgo.net/2024/04/21/VVAPRWUJM3QCV2YZ5R0O89d847d2ceb478ec.png"></p><p>HTTP协议和WebSocket协议对比：</p><ul><li>HTTP是短连接</li><li>WebSocket是长连接</li><li>HTTP通信是单向的，基于请求响应模式</li><li>WebSocket支持双向通信</li><li>HTTP和WebSocket底层都是TCP连接</li></ul><p>应用场景：</p><ul><li>视频弹幕</li><li>网页聊天</li><li>体育实况更新</li><li>股票基金报价实时更新</li></ul><p><img src="https://img.picgo.net/2024/04/21/2WD4OWZUYV004G9_Ycac82d1d70e2e3b7.png"></p><h1 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h1><p>实现步骤：<br>1.直接使用websocket.html页面作为WebSocket客户端<br>2.导入WebSocket的maven坐标<br>3.导入WebSocket服务端组件WebSocketServer，用于和客户端通信<br>4.导入配置类WebSocketConfiguration，注册WebSocket的服务端组件<br>5.导入定时任务类WebSocketTask，定时向客户端推送数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebSocket服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/ws/&#123;sid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放会话对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Session&gt; sessionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, <span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端：&quot;</span> + sid + <span class="string">&quot;建立连接&quot;</span>);</span><br><span class="line">        sessionMap.put(sid, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message, <span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到来自客户端：&quot;</span> + sid + <span class="string">&quot;的信息:&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(<span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接断开:&quot;</span> + sid);</span><br><span class="line">        sessionMap.remove(sid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToAllClient</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        Collection&lt;Session&gt; sessions = sessionMap.values();</span><br><span class="line">        <span class="keyword">for</span> (Session session : sessions) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//服务器向客户端发送消息</span></span><br><span class="line">                session.getBasicRemote().sendText(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebSocket配置类，用于注册WebSocket的Bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketTask</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebSocketServer webSocketServer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过WebSocket每隔5秒向客户端发送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessageToClient</span><span class="params">()</span> &#123;</span><br><span class="line">        webSocketServer.sendToAllClient(<span class="string">&quot;这是来自服务端的消息：&quot;</span> + DateTimeFormatter.ofPattern(<span class="string">&quot;HH:mm:ss&quot;</span>).format(LocalDateTime.now()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然WebSocket支持双向通信，功能看似比HTTP强大，那么我们是不是可以基于WebSocket开发所有的业务功能？<br>WebSocket缺点：</p><ul><li>服务器长期维护长连接需要一定的成本</li><li>各个浏览器支持程度不一</li><li>WebSocket 是长连接，受网络限制比较大，需要处理好重连</li></ul><p>结论：WebSocket并不能完全取代HTTP，它只适合在特定的场景下使用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;WebSocket 是基于 TCP 的一种新的网络协议。它实现了浏览器与服务器全双工通信——浏览器和服务器只需要完成一次握手，两者之间就可以</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="WebSocket" scheme="https://wjlgmw-github-io.vercel.app/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>Spring Task快速入门</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/2b93b116.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/2b93b116.html</id>
    <published>2024-04-21T13:47:59.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Spring Task 是Spring框架提供的任务调度工具，可以按照约定的时间自动执行某个代码逻辑。<br>定位：定时任务框架<br>作用：定时自动执行某段Java代码<br>应用场景：</p><ul><li>信用卡每月还款提醒</li><li>银行贷款每月还款提醒</li><li>火车票售票系统处理未支付订单</li><li>入职纪念日为用户发送通知<br>只要是需要定时处理的场景都可以使用Spring Task<br><img src="https://img.picgo.net/2024/04/21/R6Y_WY6IW6WF5Z1KQdcc272031d3a8642.png"></li></ul><h1 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h1><p>cron表达式其实就是一个字符串，通过cron表达式可以定义任务触发的时间<br>构成规则：分为6或7个域，由空格分隔开，每个域代表一个含义<br>每个域的含义分别为：秒、分钟、小时、日、月、周、年(可选)</p><p><img src="https://img.picgo.net/2024/04/21/GC62PXUD2036NQY64DS5JS7c2e90d365c118c5.png"><br>日与周是互斥的</p><p>cron表达式在线生成器：<a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a><br><img src="https://img.picgo.net/2024/04/21/11XY0832DY4W9IFU86edaedd2869fc70.png"></p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>Spring Task使用步骤：<br>1.导入maven坐标 spring-context（已存在）<br>2.启动类添加注解 @EnableScheduling 开启任务调度<br>3.自定义定时任务类</p><p><img src="https://img.picgo.net/2024/04/21/1MBZPN7AMVUA9Z8MG53b2e0fe215c4ef9.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义定时任务类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时任务 每隔5秒触发一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exeuteTask</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时任务开始执行:&#123;&#125;&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Spring Task 是Spring框架提供的任务调度工具，可以按照约定的时间自动执行某个代码逻辑。&lt;br&gt;定位：定时任务框架&lt;br&gt;作用</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="spring Task" scheme="https://wjlgmw-github-io.vercel.app/tags/spring-Task/"/>
    
  </entry>
  
  <entry>
    <title>苍穹外卖(十)</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/7adb0ca6.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/7adb0ca6.html</id>
    <published>2024-04-21T13:15:32.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="订单状态定时处理、来单提醒和客户催单"><a href="#订单状态定时处理、来单提醒和客户催单" class="headerlink" title="订单状态定时处理、来单提醒和客户催单"></a>订单状态定时处理、来单提醒和客户催单</h1><p>订单状态定时处理<br><img src="https://img.picgo.net/2024/04/21/9Q1VKZ64T5EJ3PBF908709398c658a62.png" ></p><p>来单提醒<br><img src="https://img.picgo.net/2024/04/21/_INCITQPGETS7CH1QSDE71bd7044c02fc976.png"></p><p>客户催单<br><img src="https://img.picgo.net/2024/04/21/XDY8BRTRHLJ5M57RMUe8986106a8355d1a.png"></p><h1 id="Spring-Task"><a href="#Spring-Task" class="headerlink" title="Spring Task"></a>Spring Task</h1><p>详细见Spring Task文章</p><h1 id="订单状态定时处理"><a href="#订单状态定时处理" class="headerlink" title="订单状态定时处理"></a>订单状态定时处理</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>用户下单后可能存在的情况：</p><ul><li>下单后未支付，订单一直处于“待支付”状态</li><li>用户收货后管理端未点击完成按钮，订单一直处于“派送中”状态<br><img src="https://img.picgo.net/2024/04/21/HEGUWF5Q25KDCIBYKX259534b5f5cb2189a.png"></li></ul><p><img src="https://img.picgo.net/2024/04/21/GIAZJC0AFGGFA54VI2U5a70de8f69dd2b57.png"></p><p>对于上面两种情况需要通过定时任务来修改订单状态，具体逻辑为：</p><ul><li>通过定时任务每分钟检查一次是否存在支付超时订单（下单后超过15分钟仍未支付则判定为支付超时订单），如果存在则修改订单状态为“已取消”</li><li>通过定时任务每天凌晨1点检查一次是否存在“派送中”的订单，如果存在则修改订单状态为“已完成”</li></ul><h2 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务类，定时处理订单状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderTask</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理超时订单的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 * * * * ? *&quot;)</span><span class="comment">//每分钟触发一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTimeoutOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时处理超时订单：&#123;&#125;&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now().plusMinutes(-<span class="number">15</span>);</span><br><span class="line">        <span class="comment">// select * from orders where status=? and order_time&lt;(当前时间-15分钟)</span></span><br><span class="line">        List&lt;Orders&gt; ordersList = orderMapper.getByStatusAndOrderTimeLT(Orders.PENDING_PAYMENT, time);</span><br><span class="line">        <span class="keyword">if</span> (ordersList!=<span class="literal">null</span> &amp;&amp;ordersList.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Orders orders : ordersList) &#123;</span><br><span class="line">                orders.setStatus(Orders.CANCELLED);</span><br><span class="line">                orders.setCancelReason(<span class="string">&quot;订单超时，自动取消&quot;</span>);</span><br><span class="line">                orders.setCancelTime(LocalDateTime.now());</span><br><span class="line">                orderMapper.update(orders);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理一直处于派送中状态的订单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 1 * * ?&quot;)</span> <span class="comment">//每天凌晨1点触发一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processDeliveryOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时处理于派送中的订单：&#123;&#125;&quot;</span>,LocalDateTime.now());</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now().plusMinutes(-<span class="number">60</span>); <span class="comment">//将上一个工作日的订单全部处理</span></span><br><span class="line">        List&lt;Orders&gt; ordersList = orderMapper.getByStatusAndOrderTimeLT(Orders.DELIVERY_IN_PROGRESS, time);</span><br><span class="line">        <span class="keyword">if</span> (ordersList!=<span class="literal">null</span> &amp;&amp;ordersList.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Orders orders : ordersList) &#123;</span><br><span class="line">                orders.setStatus(Orders.COMPLETED);</span><br><span class="line">                orderMapper.update(orders);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>详细见WebSocket文章</p><h1 id="来单提醒"><a href="#来单提醒" class="headerlink" title="来单提醒"></a>来单提醒</h1><h2 id="需求分析和设计"><a href="#需求分析和设计" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><p>用户下单并且支付成功后，需要第一时间通知外卖商家。通知的形式有如下两种：</p><ul><li>语音播报</li><li>弹出提示框</li></ul><p><img src="https://img.picgo.net/2024/04/21/ZV9UIMOOVT2HZ2B9N619ec7b0923f5cc7e8.png"></p><p>设计：<br>1.通过WebSocket实现管理端页面和服务端保持长连接状态<br>2.当客户支付后，调用WebSocket的相关API实现服务端向客户端推送消息<br>3.客户端浏览器解析服务端推送的消息，判断是来单提醒还是客户催单，进行相应的消息提示和语音播报<br>4.约定服务端发送给客户端浏览器的数据格式为JSON，字段包括：type，orderId，content</p><ul><li>type 为消息类型，1为来单提醒 2为客户催单</li><li>orderId 为订单id</li><li>content 为消息内容</li></ul><h2 id="代码开发-1"><a href="#代码开发-1" class="headerlink" title="代码开发"></a>代码开发</h2><p>在订单支付成功后加上以上代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过websocket向客户端浏览器推送消息 type orderId，content</span></span><br><span class="line">Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;type&quot;</span>,<span class="number">1</span>);<span class="comment">//1表示来单提醒 2表示客户催单</span></span><br><span class="line">map.put(<span class="string">&quot;orderId&quot;</span>,ordersDB.getId());</span><br><span class="line">map.put(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;订单号：&quot;</span>+ordersPaymentDTO.getOrderNumber());</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">webSocketServer.sendToAllClient(json);</span><br></pre></td></tr></table></figure></p><h1 id="客户催单"><a href="#客户催单" class="headerlink" title="客户催单"></a>客户催单</h1><h2 id="需求分析和设计-1"><a href="#需求分析和设计-1" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><p>用户在小程序中点击催单按钮后，需要第一时间通知外卖商家。通知的形式有如下两种：<br>语音播报<br>弹出提示框<br><img src="https://img.picgo.net/2024/04/21/B0NVPCJUVEJTMRUOENNJ6e96ee6ffe15fe91.png"><br>设计：<br>1.通过WebSocket实现管理端页面和服务端保持长连接状态<br>2.当用户点击催单按钮后，调用WebSocket的相关API实现服务端向客户端推送消息<br>3.客户端浏览器解析服务端推送的消息，判断是来单提醒还是客户催单，进行相应的消息提示和语音播报<br>4.约定服务端发送给客户端浏览器的数据格式为JSON，字段包括：type，orderId，content</p><ul><li>type 为消息类型，1为来单提醒 2为客户催单</li><li>orderId 为订单id</li><li>content 为消息内容</li></ul><p>接口设计：<br><img src="https://img.picgo.net/2024/04/21/6EKYU4I4MB8Q1H4237f742838dc4a10.png"></p><h2 id="代码开发-2"><a href="#代码开发-2" class="headerlink" title="代码开发"></a>代码开发</h2><p>控制器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户催单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/reminder/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;客户催单&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">reminder</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    orderService.reminder(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 客户催单</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reminder</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">     <span class="comment">//根据id查询订单</span></span><br><span class="line">    Orders ordersDB=orderMapper.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验订单是否存在</span></span><br><span class="line">     <span class="keyword">if</span> (ordersDB==<span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OrderBusinessException</span>(MessageConstant.ORDER_NOT_FOUND);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">     map.put(<span class="string">&quot;type&quot;</span>,<span class="number">2</span>);<span class="comment">//1表示来单提醒 2表示客户催单</span></span><br><span class="line">     map.put(<span class="string">&quot;orderId&quot;</span>,id);</span><br><span class="line">     map.put(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;订单号：&quot;</span>+ordersDB.getNumber());</span><br><span class="line"></span><br><span class="line">     <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">     webSocketServer.sendToAllClient(json);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;订单状态定时处理、来单提醒和客户催单&quot;&gt;&lt;a href=&quot;#订单状态定时处理、来单提醒和客户催单&quot; class=&quot;headerlink&quot; title=&quot;订单状态定时处理、来单提醒和客户催单&quot;&gt;&lt;/a&gt;订单状态定时处理、来单提醒和客户催单&lt;/h1&gt;&lt;p&gt;订单状态定时</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="苍穹外卖" scheme="https://wjlgmw-github-io.vercel.app/tags/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
    
  </entry>
  
  <entry>
    <title>Freemarker快速入门</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/0.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/0.html</id>
    <published>2024-04-21T13:04:10.323Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<p>转学成在线项目<br>在内容管理接口工层 添加Freemarker与SpringBoot的整合包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot 对结果视图 Freemarker 集成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在nacos为内容管理接口层配置freemarker，公用配置组新加一个freemarker-config-dev.yaml<br><img src='https://s21.ax1x.com/2024/04/08/pFLTE5D.png'><br>配置信息如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span>   <span class="comment">#关闭模板缓存，方便测试</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">template_update_delay:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.ftl</span>   <span class="comment">#页面模板后缀名</span></span><br><span class="line">    <span class="attr">charset:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">template-loader-path:</span> <span class="string">classpath:/templates/</span>   <span class="comment">#页面模板位置(默认为 classpath:/templates/)</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="comment">#关闭项目中的静态资源映射(static、resources文件夹下的资源)</span></span><br></pre></td></tr></table></figure><p>在内容管理接口工程添加freemarker-config-dev.yaml<br><img src='https://s21.ax1x.com/2024/04/09/pFLTZPe.png'></p><p>添加模板，在resources下创建templates目录，添加test.ftl模板文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello $&#123;name&#125;!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写controller方法，准备模型数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.content.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.math.raw.Mod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> freemarker测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/15 19:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreemarkerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testfreemarker&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">//设置模型数据</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        <span class="comment">//设置模板名称</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;test&quot;</span>);<span class="comment">//根据视图名称加.ftl找到模板</span></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动内容管理接口工程，访问<a href="http://localhost:63040/content/testfreemarker">http://localhost:63040/content/testfreemarker</a><br>屏幕输出：Hello 小明！<br>效果如图：<br><img src='https://s21.ax1x.com/2024/04/09/pFLTnxA.png'></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转学成在线项目&lt;br&gt;在内容管理接口工层 添加Freemarker与SpringBoot的整合包&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Freemarker" scheme="https://wjlgmw-github-io.vercel.app/tags/Freemarker/"/>
    
  </entry>
  
  <entry>
    <title>微信支付+支付宝支付</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/7fc1f7b8.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/7fc1f7b8.html</id>
    <published>2024-04-20T20:33:16.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="常用支付方式" scheme="https://wjlgmw-github-io.vercel.app/tags/%E5%B8%B8%E7%94%A8%E6%94%AF%E4%BB%98%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>苍穹外卖(八)</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/1ba39136.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/1ba39136.html</id>
    <published>2024-04-20T12:51:57.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今日内容总概述"><a href="#今日内容总概述" class="headerlink" title="今日内容总概述"></a>今日内容总概述</h1><p>用户下单、订单支付<br><img src="https://img.picgo.net/2024/04/20/CS5JUI88WF7IOQ05FSOUc2995c5ccaa0d7bb.png" ></p><h1 id="导入地址簿功能代码"><a href="#导入地址簿功能代码" class="headerlink" title="导入地址簿功能代码"></a>导入地址簿功能代码</h1><h2 id="需求分析和设计"><a href="#需求分析和设计" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><p><img src="https://img.picgo.net/2024/04/20/XR5W79ZWODXPXKP7Aff2fbf2f6d50685a.png"></p><p>接口设计<br><img src="https://img.picgo.net/2024/04/20/_YARRZWZ4AEQZL5BLN11f1b71366e649958f.png"></p><p>新增地址<br><img src="https://img.picgo.net/2024/04/20/G4_R8KMZ3GU7JLI694b25af156202bbd45.png" ></p><p>查询登录用户所有地址<br><img src="https://img.picgo.net/2024/04/20/8LVZ1SQXMZCQK5Q67a53819ab18f649.png"></p><p>查询默认地址<br><img src="https://img.picgo.net/2024/04/20/RJEK_18FCL2VMNF712ab2e1b0ce68591c1.png" ></p><p>修改地址<br><img src="https://img.picgo.net/2024/04/20/4SUZ00BW_T0975PY3Fe735653b2be69b26.png"></p><p>根据id删除地址<br><img src="https://img.picgo.net/2024/04/20/0ARSIHKAUV15NFNYF85ee7e0eb0866765a.png"></p><p>根据id查询地址<br><img src="https://img.picgo.net/2024/04/20/IGBT5Q53HARONC_UACD21de079e4902c127.png"></p><p>设置默认地址<br><img src="https://img.picgo.net/2024/04/20/UBJQ2W37NGKPOSSYP5264f0b6acdd3d57.png"></p><p>数据库设计（address_book表）：<br><img src="https://img.picgo.net/2024/04/20/00YKDM19_QA0J4A008JO4106d2494ed42331.png"></p><h2 id="代码导入"><a href="#代码导入" class="headerlink" title="代码导入"></a>代码导入</h2><p><img src="https://img.picgo.net/2024/04/20/_HN0LCHXDZEY_4C_MHLde2bfe99ee080bfd.png" ></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在微信开发者小程序进行相应的测试<br><img src="https://img.picgo.net/2024/04/20/25M541DA8D9F9A_PN042ce2b9a3ed7a0400.png"></p><h1 id="用户下单"><a href="#用户下单" class="headerlink" title="用户下单"></a>用户下单</h1><h2 id="需求分析和设计-1"><a href="#需求分析和设计-1" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>用户下单业务说明：<br>在电商系统中，用户是通过下单的方式通知商家，用户已经购买了商品，需要商家进行备货和发货。<br>用户下单后会产生订单相关数据，订单数据需要能够体现如下信息：<br><img src="https://img.picgo.net/2024/04/20/RBIPA25D7RQXX962be6d9dba193ac3.png"><br>用户点餐业务流程：<br><img src="https://img.picgo.net/2024/04/20/6OT6DQ34EXTALOTWfbbbf546e43ac93a.png"><br>接口设计（分析）：<br>用户下单接口<br><img src="https://img.picgo.net/2024/04/20/Z3DFFUT_JXEO36PSQN5d01600951eff5b1.png">、</p><p>订单支付接口<br><img src="https://img.picgo.net/2024/04/20/8FFNLV06J4EF15R2f43f3663cdd672f.png"></p><p><img src="https://img.picgo.net/2024/04/20/SZGVPM8952KXB6RU3I9W58a3716be42fce6d.png"></p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>两种表<br><img src="https://img.picgo.net/2024/04/20/JAPV089P0SSG5O4W003Yfd2deaafbb66343c.png" ></p><p>订单表<br><img src="https://img.picgo.net/2024/04/20/1JHMOYELOXILMGMSVHe830148a1efe564c.png" ></p><p>订单明细表<br><img src="https://img.picgo.net/2024/04/20/SU9J9TRY39BQ791E7OK0c98343ee28a9c3a5.png"></p><h2 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h2><p>DTO类<br><img src="https://img.picgo.net/2024/04/20/47_55DCJ6Q9SV5H61CO2dc11923fdd57353c.png"></p><p>VO类<br><img src="https://img.picgo.net/2024/04/20/1K15YZ4XIM7UGQ0TWODU8ffc6633c229997c.png"></p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;userOrderController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/order&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户端订单相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ordersSubmitDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;用户下单&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;OrderSubmitVO&gt; <span class="title function_">submit</span><span class="params">(<span class="meta">@RequestBody</span> OrdersSubmitDTO ordersSubmitDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;用户下单，参数为:&#123;&#125;&quot;</span>,ordersSubmitDTO);</span><br><span class="line">        <span class="type">OrderSubmitVO</span> <span class="variable">orderSubmitVO</span> <span class="operator">=</span> orderService.submitOrder(ordersSubmitDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success(orderSubmitVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>service层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ordersSubmitDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OrderSubmitVO <span class="title function_">submitOrder</span><span class="params">(OrdersSubmitDTO ordersSubmitDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDetailMapper orderDetailMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressBookMapper addressBookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> ShoppingCartMapper shoppingCartMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ordersSubmitDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> OrderSubmitVO <span class="title function_">submitOrder</span><span class="params">(OrdersSubmitDTO ordersSubmitDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//处理各种业务异常（地址簿为空、购物车为空）</span></span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookMapper.getById(ordersSubmitDTO.getAddressBookId());</span><br><span class="line">        <span class="keyword">if</span> (addressBook==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//抛出业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressBookBusinessException</span>(MessageConstant.ADDRESS_BOOK_IS_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查询当前用户的购物车数据</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">        shoppingCart.setUserId(userId);</span><br><span class="line">        List&lt;ShoppingCart&gt; shoppingCartList = shoppingCartMapper.list(shoppingCart);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shoppingCartList==<span class="literal">null</span>||shoppingCartList.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ShoppingCartBusinessException</span>(MessageConstant.SHOPPING_CART_IS_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向订单表插入1条数据</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Orders</span>();</span><br><span class="line">        BeanUtils.copyProperties(ordersSubmitDTO,orders);</span><br><span class="line">        orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">        orders.setPayStatus(Orders.UN_PAID);</span><br><span class="line">        orders.setStatus(Orders.PENDING_PAYMENT);</span><br><span class="line">        orders.setNumber(String.valueOf(System.currentTimeMillis()));</span><br><span class="line">        orders.setPhone(addressBook.getPhone());</span><br><span class="line">        orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">        orders.setUserId(userId);</span><br><span class="line"></span><br><span class="line">        orderMapper.insert(orders);</span><br><span class="line"></span><br><span class="line">        List&lt;OrderDetail&gt; orderDetailList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//向订单明细表插入n条数据</span></span><br><span class="line">        <span class="keyword">for</span> (ShoppingCart cart : shoppingCartList) &#123;</span><br><span class="line">            <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();<span class="comment">//订单明细</span></span><br><span class="line">            BeanUtils.copyProperties(cart,orderDetail);</span><br><span class="line">            orderDetail.setOrderId(orders.getId());<span class="comment">//设置当前订单明细关联的订单id</span></span><br><span class="line">            orderDetailList.add(orderDetail);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        orderDetailMapper.insertBatch(orderDetailList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空当前用户的购物车数据</span></span><br><span class="line">        shoppingCartMapper.deleteByUserId(userId);</span><br><span class="line">        <span class="comment">//封装VO放回结果</span></span><br><span class="line">        <span class="type">OrderSubmitVO</span> <span class="variable">orderSubmitVO</span> <span class="operator">=</span> OrderSubmitVO.builder()</span><br><span class="line">                .id(orders.getId())</span><br><span class="line">                .orderTime(orders.getOrderTime())</span><br><span class="line">                .orderNumber(orders.getNumber())</span><br><span class="line">                .orderAmount(orders.getAmount())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> orderSubmitVO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>dao层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入订单数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Orders orders)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDetailMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量插入订单明细数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderDetailList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(List&lt;OrderDetail&gt; orderDetailList)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>mapper映射<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Orders&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into orders</span><br><span class="line">        (number, status, user_id, address_book_id, order_time, checkout_time, pay_method, pay_status, amount, remark,</span><br><span class="line">         phone, address, consignee, estimated_delivery_time, delivery_status, pack_amount, tableware_number,</span><br><span class="line">         tableware_status)</span><br><span class="line">        values (#&#123;number&#125;, #&#123;status&#125;, #&#123;userId&#125;, #&#123;addressBookId&#125;, #&#123;orderTime&#125;, #&#123;checkoutTime&#125;, #&#123;payMethod&#125;,</span><br><span class="line">                #&#123;payStatus&#125;, #&#123;amount&#125;, #&#123;remark&#125;, #&#123;phone&#125;, #&#123;address&#125;, #&#123;consignee&#125;,</span><br><span class="line">                #&#123;estimatedDeliveryTime&#125;, #&#123;deliveryStatus&#125;, #&#123;packAmount&#125;, #&#123;tablewareNumber&#125;, #&#123;tablewareStatus&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.OrderDetailMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        insert into order_detail</span><br><span class="line">        (name, order_id, dish_id, setmeal_id, dish_flavor, number, amount, image)</span><br><span class="line">        values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;orderDetailList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;od&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            (#&#123;od.name&#125;,#&#123;od.orderId&#125;,#&#123;od.dishId&#125;,#&#123;od.setmealId&#125;,#&#123;od.dishFlavor&#125;,</span><br><span class="line">            #&#123;od.number&#125;,#&#123;od.amount&#125;,#&#123;od.image&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="订单支付"><a href="#订单支付" class="headerlink" title="订单支付"></a>订单支付</h1><h2 id="微信支付介绍"><a href="#微信支付介绍" class="headerlink" title="微信支付介绍"></a>微信支付介绍</h2><h3 id="微信支付产品和微信支付接入流程"><a href="#微信支付产品和微信支付接入流程" class="headerlink" title="微信支付产品和微信支付接入流程"></a>微信支付产品和微信支付接入流程</h3><p>微信支付产品<br><img src="https://img.picgo.net/2024/04/20/RT0_75EE49WRRICNNB9470e5655205d9c4.png"></p><p>参考：<a href="https://pay.weixin.qq.com/static/product/product_index.shtml">https://pay.weixin.qq.com/static/product/product_index.shtml</a></p><p><img src="https://img.picgo.net/2024/04/20/OOT1D6E6TIS689IAE703abaafd2c216e3.png"></p><h3 id="微信小程序支付时许图"><a href="#微信小程序支付时许图" class="headerlink" title="微信小程序支付时许图"></a>微信小程序支付时许图</h3><p><img src="https://img.picgo.net/2024/04/20/49EIFJEIHMC00BY598d9608d640fbd00.png"></p><p><img src="https://img.picgo.net/2024/04/20/KMJZ_VSHHFE93LXVR5E5RI3497dfa3942978c6.png"></p><h3 id="微信支付相关接口介绍"><a href="#微信支付相关接口介绍" class="headerlink" title="微信支付相关接口介绍"></a>微信支付相关接口介绍</h3><p><img src="https://img.picgo.net/2024/04/20/K0KNTA1_UCZL08623SVc5b5a5708ec57308.png"></p><p><img src="https://img.picgo.net/2024/04/20/9CUATMY2EGKXB4KE0edfd110a96bb0d6.png"></p><h3 id="微信支付准备工作"><a href="#微信支付准备工作" class="headerlink" title="微信支付准备工作"></a>微信支付准备工作</h3><p><img src="https://img.picgo.net/2024/04/20/Q_VAYG1HFNJBRTX_5U__J72db5f2eac06f001.png"></p><p><img src="https://img.picgo.net/2024/04/20/AFBZ_N75G788TMZO_ULVNYc92a27679f3ded82.png"></p><p>安装cpolar<br>然后再在相应的cmd里面输入下面指令，要将./cpolar改为cpolar.exe  token也要改为自己的<br><img src="https://img.picgo.net/2024/04/20/PPO41CN8BS5GR3TNUad57b7c8bfd613eb.png"></p><p>cpolar.exe http 8080 代指自己后端port<br>创建相应的公域网</p><h2 id="导入功能代码"><a href="#导入功能代码" class="headerlink" title="导入功能代码"></a>导入功能代码</h2><p><img src="https://img.picgo.net/2024/04/20/8G7QAEIKNZKDLE73e470dbb4e63c265.png"></p><p>修改成自己的配置文件（图中的用不了）<br><img src="https://img.picgo.net/2024/04/20/ZXH71YT2JITPY5B9G_SF_N76895b6bf9b0c682.png"></p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 订单支付</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> ordersPaymentDTO</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PutMapping(&quot;/payment&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;订单支付&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result&lt;OrderPaymentVO&gt; <span class="title function_">payment</span><span class="params">(<span class="meta">@RequestBody</span> OrdersPaymentDTO ordersPaymentDTO)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       log.info(<span class="string">&quot;订单支付：&#123;&#125;&quot;</span>, ordersPaymentDTO);</span><br><span class="line">       <span class="type">OrderPaymentVO</span> <span class="variable">orderPaymentVO</span> <span class="operator">=</span> orderService.payment(ordersPaymentDTO);</span><br><span class="line">       log.info(<span class="string">&quot;生成预支付交易单：&#123;&#125;&quot;</span>, orderPaymentVO);</span><br><span class="line">       <span class="keyword">return</span> Result.success(orderPaymentVO);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>dao层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据订单号查询订单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderNumber</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from orders where number = #&#123;orderNumber&#125;&quot;)</span></span><br><span class="line">Orders <span class="title function_">getByNumber</span><span class="params">(String orderNumber)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改订单信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Orders orders)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">getById</span><span class="params">(Long userId)</span>;</span><br></pre></td></tr></table></figure></p><p>service层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单支付</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ordersPaymentDTO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">OrderPaymentVO <span class="title function_">payment</span><span class="params">(OrdersPaymentDTO ordersPaymentDTO)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付成功，修改订单状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outTradeNo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">paySuccess</span><span class="params">(String outTradeNo)</span>;</span><br></pre></td></tr></table></figure></p><p>实现service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单支付</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ordersPaymentDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> OrderPaymentVO <span class="title function_">payment</span><span class="params">(OrdersPaymentDTO ordersPaymentDTO)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 当前登录用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getById(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用微信支付接口，生成预支付交易单</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> weChatPayUtil.pay(</span><br><span class="line">                ordersPaymentDTO.getOrderNumber(), <span class="comment">//商户订单号</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0.01</span>), <span class="comment">//支付金额，单位 元</span></span><br><span class="line">                <span class="string">&quot;苍穹外卖订单&quot;</span>, <span class="comment">//商品描述</span></span><br><span class="line">                user.getOpenid() <span class="comment">//微信用户的openid</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonObject.getString(<span class="string">&quot;code&quot;</span>) != <span class="literal">null</span> &amp;&amp; jsonObject.getString(<span class="string">&quot;code&quot;</span>).equals(<span class="string">&quot;ORDERPAID&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OrderBusinessException</span>(<span class="string">&quot;该订单已支付&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">OrderPaymentVO</span> <span class="variable">vo</span> <span class="operator">=</span> jsonObject.toJavaObject(OrderPaymentVO.class);</span><br><span class="line">        vo.setPackageStr(jsonObject.getString(<span class="string">&quot;package&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> vo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付成功，修改订单状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outTradeNo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paySuccess</span><span class="params">(String outTradeNo)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据订单号查询订单</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">ordersDB</span> <span class="operator">=</span> orderMapper.getByNumber(outTradeNo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据订单id更新订单的状态、支付方式、支付状态、结账时间</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> Orders.builder()</span><br><span class="line">                .id(ordersDB.getId())</span><br><span class="line">                .status(Orders.TO_BE_CONFIRMED)</span><br><span class="line">                .payStatus(Orders.PAID)</span><br><span class="line">                .checkoutTime(LocalDateTime.now())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        orderMapper.update(orders);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;今日内容总概述&quot;&gt;&lt;a href=&quot;#今日内容总概述&quot; class=&quot;headerlink&quot; title=&quot;今日内容总概述&quot;&gt;&lt;/a&gt;今日内容总概述&lt;/h1&gt;&lt;p&gt;用户下单、订单支付&lt;br&gt;&lt;img src=&quot;https://img.picgo.net/2024/</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="苍穹外卖" scheme="https://wjlgmw-github-io.vercel.app/tags/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
    
  </entry>
  
  <entry>
    <title>自定义一个starter</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/f333ffdd.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/f333ffdd.html</id>
    <published>2024-04-19T22:03:26.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景启动器的作用"><a href="#场景启动器的作用" class="headerlink" title="场景启动器的作用"></a>场景启动器的作用</h1><ul><li>自动引入依赖（依赖的传递性）</li><li>自动配置组件（自动配置类 XxxAutoConfiguation）</li><li>自定义属性(@EnableConfigurationProperties 启用属性实体类)</li></ul><h1 id="场景启动器的原理"><a href="#场景启动器的原理" class="headerlink" title="场景启动器的原理"></a>场景启动器的原理</h1><p>SpringBoot项目启动类上的@EnableAutoConfiguration注解会自动加载场景启动器提供的<br>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports<br>文件中定义的自动配置类，该自动配置类会启用属性实体类并完成组件的注册。</p><h1 id="自定义场景启动器的步骤"><a href="#自定义场景启动器的步骤" class="headerlink" title="自定义场景启动器的步骤"></a>自定义场景启动器的步骤</h1><p>1.定义属性实体类（SmsProperties）<br>2.定义组件（SmsService）<br>3.定义自动配置类（SmsAutoConfiguration.java） -&gt; 3.1.注册组件 3.2.启用属性实体类<br>4.将自动配置类写入imports文件中</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p><img src="https://img.picgo.net/2024/04/19/IPBDYQV_B8SNGAKVIDbf77b7fbfe626923.png"></p><p>SmsProperties<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;sms&quot;)</span> <span class="comment">//对前置属性为sms的进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String host;<span class="comment">//主机</span></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>SmsService<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SmsProperties smsProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String tel)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (smsProperties.getHost().equals(<span class="string">&quot;0.0.0.0&quot;</span>)&amp;&amp;</span><br><span class="line">                smsProperties.getPassword().equals(<span class="string">&quot;123&quot;</span>)&amp;&amp;</span><br><span class="line">                smsProperties.getUsername().equals(<span class="string">&quot;zhangsan&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;向&quot;</span>+tel+<span class="string">&quot;发送短信成功&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;主机、用户名和密码不正确,请重新配置&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SmsAutoConfiguration<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(SmsProperties.class)</span><span class="comment">//把属性实体类放在容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SmsService <span class="title function_">smsService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SmsService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsService</span>();</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后将SmsAutoConfiguration填入到META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports<br><img src="https://img.picgo.net/2024/04/19/WV_QMDR23T2POF3H18a0c786d6c4c7cd.png"></p><p>效果展示<br><img src="https://img.picgo.net/2024/04/19/MUPIKVG1DKT0D7PCN8K71c6d17385133d82.png"></p><p>自定义starter一般不需要maven中的插件可以将其删掉，在maven生命周期中执行clean和install安装到本地中<br>然后再需要的使用的地方引入自定义starter的maven三坐标</p><p>再要使用的模块中配置全局配置文件<br><img src="https://img.picgo.net/2024/04/19/0AI5U7YM5JPZRGPVJR02ddebd39606a9b1.png"></p><p>然后再进行相应的测试即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">sms</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(smsService.send(<span class="string">&quot;123132&quot;</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;场景启动器的作用&quot;&gt;&lt;a href=&quot;#场景启动器的作用&quot; class=&quot;headerlink&quot; title=&quot;场景启动器的作用&quot;&gt;&lt;/a&gt;场景启动器的作用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;自动引入依赖（依赖的传递性）&lt;/li&gt;
&lt;li&gt;自动配置组件（自动配置类 Xxx</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="SpringBoot" scheme="https://wjlgmw-github-io.vercel.app/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>苍穹外卖(一)</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/f9dc7df9.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/f9dc7df9.html</id>
    <published>2024-04-19T11:01:12.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="苍穹外卖" scheme="https://wjlgmw-github-io.vercel.app/tags/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
    
  </entry>
  
  <entry>
    <title>黑马点评-实战-redis</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/a858d08d.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/a858d08d.html</id>
    <published>2024-04-17T01:22:27.000Z</published>
    <updated>2024-04-21T13:04:10.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="达人探店"><a href="#达人探店" class="headerlink" title="达人探店"></a>达人探店</h1><h2 id="发布探店笔记"><a href="#发布探店笔记" class="headerlink" title="发布探店笔记"></a>发布探店笔记</h2><p>探店笔记类似点评网站的评价，往往是图文结合。对应的表有两个：</p><ul><li>tb_blog：探店笔记表，包含笔记中的标题、文字、图片等</li><li>tb_blog_comments：其他用户对探店笔记的评价</li></ul><p>内容展示<br><img src="https://img.picgo.net/2024/04/18/080IP5ZUXRR720UM05F2bcbf92576f944859.png"></p><p>tb_blog结构<br><img src="https://img.picgo.net/2024/04/18/X7UL1O4IOSQJHW75b58db40b24daae.png"></p><p>业务展示<br><img src="https://img.picgo.net/2024/04/18/F1SZ_08QMLP8TATRVH7061447d3b9908e6.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IMAGE_UPLOAD_DIR</span> <span class="operator">=</span> <span class="string">&quot;D:\\IdeaProjects\\hm-dianping\\nginx-1.18.0\\html\\hmdp\\imgs&quot;</span>; <span class="comment">//改为自己本地的路径</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(<span class="meta">@RequestBody</span> Blog blog)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取登录用户</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">        blog.setUserId(user.getId());</span><br><span class="line">        <span class="comment">// 保存探店博文</span></span><br><span class="line">        blogService.save(blog);</span><br><span class="line">        <span class="comment">// 返回id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(blog.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;blog&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">uploadImage</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile image)</span> &#123;  <span class="comment">//存入本地的，没有上传到文件服务器上面</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取原始文件名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> image.getOriginalFilename();</span><br><span class="line">            <span class="comment">// 生成新文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> createNewFileName(originalFilename);</span><br><span class="line">            <span class="comment">// 保存文件</span></span><br><span class="line">            image.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(SystemConstants.IMAGE_UPLOAD_DIR, fileName));</span><br><span class="line">            <span class="comment">// 返回结果</span></span><br><span class="line">            log.debug(<span class="string">&quot;文件上传成功，&#123;&#125;&quot;</span>, fileName);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;文件上传失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看探店笔记"><a href="#查看探店笔记" class="headerlink" title="查看探店笔记"></a>查看探店笔记</h3><p><img src="https://img.picgo.net/2024/04/18/3IKV19EI20A0DUVHYBJBb6c6d897e052f585.png"><br>解释blog类 @TableField(exist = false)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户图标</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@TableField(exist = false)</span>  <span class="comment">//该字段不存在数据库中</span></span><br><span class="line">  <span class="keyword">private</span> String icon;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户姓名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@TableField(exist = false)</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 是否点赞过了</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@TableField(exist = false)</span></span><br><span class="line">  <span class="keyword">private</span> Boolean isLike;</span><br></pre></td></tr></table></figure><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">queryBlogById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> blogService.queryBlogById(id);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>实现service接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询blog</span></span><br><span class="line">    <span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="keyword">if</span> (blog==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;笔记不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.查询blog有关的用户</span></span><br><span class="line">    queryBlogUser(blog);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(blog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">queryBlogUser</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> blog.getUserId();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line">    blog.setName(user.getNickName());</span><br><span class="line">    blog.setIcon(user.getIcon());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="点赞"><a href="#点赞" class="headerlink" title="点赞"></a>点赞</h2><p><img src="https://img.picgo.net/2024/04/18/KB02Y80JOVC5_DRG5TQ69f51b4098333b16.png"></p><p>完善点赞功能<br>需求：</p><ul><li>同一个用户只能点赞一次，再次点击则取消点赞</li><li>如果当前用户已经点赞，则点赞按钮高亮显示（前端已实现，判断字段Blog类的isLike属性）</li></ul><p>实现步骤：</p><ul><li>给Blog类中添加一个isLike字段，标示是否被当前用户点赞</li><li>修改点赞功能，利用Redis的set集合判断是否点赞过，未点赞过则点赞数+1，已点赞过则点赞数-1</li><li>修改根据id查询Blog的业务，判断当前登录用户是否点赞过，赋值给isLike字段</li><li>修改分页查询Blog业务，判断当前登录用户是否点赞过，赋值给isLike字段</li></ul><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/like/&#123;id&#125;&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> blogService.likeBlog(id);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>实现service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">isBlogLiked</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取登录用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2.判断当前登录用户是否已经点赞</span></span><br><span class="line">    String key=<span class="string">&quot;blog:liked&quot;</span>+blog.getId();</span><br><span class="line">    Boolean isMember=stringRedisTemplate.opsForSet().isMember(key,userId.toString());</span><br><span class="line">    blog.setIsLike(BooleanUtil.isTrue(isMember));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取登录用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2.判断当前登录用户是否已经点赞</span></span><br><span class="line">    String key=<span class="string">&quot;blog:liked&quot;</span>+id;</span><br><span class="line">    Boolean isMember=stringRedisTemplate.opsForSet().isMember(key,userId.toString());</span><br><span class="line">    <span class="keyword">if</span> (BooleanUtil.isFalse(isMember))&#123;</span><br><span class="line">        <span class="comment">//3.如果未点赞，可以点赞</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked=liked+1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">        <span class="comment">//3.1.数据库点赞数+1</span></span><br><span class="line">        <span class="keyword">if</span> (isSuccess)&#123;</span><br><span class="line">            stringRedisTemplate.opsForSet().add(key,userId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2.保存用户到Redis的set集合</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//4.如果已点赞，取消点赞</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked=liked-1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">        <span class="comment">//4.1.数据库点赞数-1</span></span><br><span class="line">        stringRedisTemplate.opsForSet().remove(key,userId.toString());</span><br><span class="line">        <span class="comment">//4.2.把用户从Redis的set集合移除</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要修改的地方  在查询的时候，查询是否已经被点赞<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryHotBlog</span><span class="params">(Integer current)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据用户查询</span></span><br><span class="line">    Page&lt;Blog&gt; page = query()</span><br><span class="line">            .orderByDesc(<span class="string">&quot;liked&quot;</span>)</span><br><span class="line">            .page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));</span><br><span class="line">    <span class="comment">// 获取当前页数据</span></span><br><span class="line">    List&lt;Blog&gt; records = page.getRecords();</span><br><span class="line">    <span class="comment">// 查询用户</span></span><br><span class="line">    records.forEach(blog -&gt; &#123;</span><br><span class="line">        <span class="built_in">this</span>.queryBlogUser(blog);</span><br><span class="line">        <span class="built_in">this</span>.isBlogLiked(blog);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(records);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询blog</span></span><br><span class="line">    <span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="keyword">if</span> (blog==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;笔记不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.查询blog有关的用户</span></span><br><span class="line">    queryBlogUser(blog);</span><br><span class="line">    <span class="comment">//3.查询blog是否被点赞</span></span><br><span class="line">    isBlogLiked(blog);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(blog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="点赞排行榜"><a href="#点赞排行榜" class="headerlink" title="点赞排行榜"></a>点赞排行榜</h2><p><img src="https://img.picgo.net/2024/04/18/38IPI5ZRH4TLKP2CASYQ0fc71697126a0c4b.png"></p><p>redis的数据结构特点<br><img src="https://img.picgo.net/2024/04/18/3I2ZACEE_YYQHCOIP90250bcc1c1f26e1.png"></p><p>将点赞代码的Set改为SortedSet<br>控制层 点赞排行榜<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/likes/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryBlogLikes</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogService.queryBlogLikes(id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>实现service接口改造和实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlogServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BlogMapper, Blog&gt; <span class="keyword">implements</span> <span class="title class_">IBlogService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主界面查询</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryHotBlog</span><span class="params">(Integer current)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据用户查询</span></span><br><span class="line">        Page&lt;Blog&gt; page = query()</span><br><span class="line">                .orderByDesc(<span class="string">&quot;liked&quot;</span>)</span><br><span class="line">                .page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));</span><br><span class="line">        <span class="comment">// 获取当前页数据</span></span><br><span class="line">        List&lt;Blog&gt; records = page.getRecords();</span><br><span class="line">        <span class="comment">// 查询用户</span></span><br><span class="line">        records.forEach(blog -&gt; &#123;</span><br><span class="line">            <span class="built_in">this</span>.queryBlogUser(blog);</span><br><span class="line">            <span class="built_in">this</span>.isBlogLiked(blog);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(records);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryBlogById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询blog</span></span><br><span class="line">        <span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="keyword">if</span> (blog == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;笔记不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.查询blog有关的用户</span></span><br><span class="line">        queryBlogUser(blog);</span><br><span class="line">        <span class="comment">//3.查询blog是否被点赞</span></span><br><span class="line">        isBlogLiked(blog);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否点赞</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">isBlogLiked</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取登录用户</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">        <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//用户未登录，无需查询是否点赞</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> user.getId();</span><br><span class="line">        <span class="comment">//2.判断当前登录用户是否已经点赞</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + blog.getId();</span><br><span class="line">        <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());</span><br><span class="line">        blog.setIsLike(score != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点赞</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取登录用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//2.判断当前登录用户是否已经点赞</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + id;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());</span><br><span class="line">        <span class="keyword">if</span> (score == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//3.如果未点赞，可以点赞</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked=liked+1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">            <span class="comment">//3.1.数据库点赞数+1</span></span><br><span class="line">            <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">                stringRedisTemplate.opsForZSet().add(key, userId.toString(), System.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.2.保存用户到Redis的set集合</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//4.如果已点赞，取消点赞</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked=liked-1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">            <span class="comment">//4.1.数据库点赞数-1</span></span><br><span class="line">            stringRedisTemplate.opsForZSet().remove(key, userId.toString());</span><br><span class="line">            <span class="comment">//4.2.把用户从Redis的set集合移除</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点赞排行榜</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryBlogLikes</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        String key=BLOG_LIKED_KEY+id;</span><br><span class="line">        <span class="comment">//1.查询top5的点赞用户 zrange key 0 4</span></span><br><span class="line">        Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(key, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> (top5==<span class="literal">null</span>||top5.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.解析出其中的用户di</span></span><br><span class="line">        List&lt;Long&gt; ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">        <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids); <span class="comment">//拼接字符串</span></span><br><span class="line">        <span class="comment">//3.根据用户id查询用户</span></span><br><span class="line">        List&lt;UserDTO&gt; usersDTOS = userService.query()</span><br><span class="line">                .in(<span class="string">&quot;id&quot;</span>,ids).last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span>+idStr+<span class="string">&quot;)&quot;</span>).list() <span class="comment">//排序</span></span><br><span class="line">                .stream()</span><br><span class="line">                .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//4.返回</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(usersDTOS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">queryBlogUser</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> blog.getUserId();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line">        blog.setName(user.getNickName());</span><br><span class="line">        blog.setIcon(user.getIcon());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="好友关注"><a href="#好友关注" class="headerlink" title="好友关注"></a>好友关注</h1><h2 id="关注和取关"><a href="#关注和取关" class="headerlink" title="关注和取关"></a>关注和取关</h2><p><img src="https://img.picgo.net/2024/04/18/ED0I9QQ2YWD9XF5H1ES6603b0f43b624b882.png"></p><p>需求：基于该表数据结构，实现两个接口：<br>1.关注和取关接口<br>2.判断是否关注的接口</p><p>关注是User之间的关系，是博主与粉丝的关系，数据库中有一张tb_follow表来标示：<br><img src="https://img.picgo.net/2024/04/18/8LVVMTNDE53U_VY6F_I401d5a1465c2ec50.png"></p><p>注意: 这里需要把主键修改为自增长，简化开发。</p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/follow&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FollowController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IFollowService followService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关注或取关</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> followUserId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isFollow</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;/&#123;isFollow&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long followUserId,<span class="meta">@PathVariable(&quot;isFollow&quot;)</span> Boolean isFollow)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> followService.follow(followUserId,isFollow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否关注</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> followUserId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;or/not/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long followUserId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> followService.isFollow(followUserId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FollowServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;FollowMapper, Follow&gt; <span class="keyword">implements</span> <span class="title class_">IFollowService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(Long followUserId, Boolean isFollow)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取登录用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//1.判断到底是关注还是取关</span></span><br><span class="line">        <span class="keyword">if</span> (isFollow)&#123;</span><br><span class="line">            <span class="comment">//2.关注，新增数据</span></span><br><span class="line">            <span class="type">Follow</span> <span class="variable">follow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Follow</span>();</span><br><span class="line">            follow.setUserId(userId);</span><br><span class="line">            follow.setFollowUserId(followUserId);</span><br><span class="line">            save(follow);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//3.取关，删除</span></span><br><span class="line">            remove(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Follow&gt;()</span><br><span class="line">                    .eq(<span class="string">&quot;user_id&quot;</span>,userId).eq(<span class="string">&quot;follow_user_id&quot;</span>,followUserId));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">isFollow</span><span class="params">(Long followUserId)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取登录用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//2.查询是否关注</span></span><br><span class="line">        query() .eq(<span class="string">&quot;user_id&quot;</span>,userId).eq(<span class="string">&quot;follow_user_id&quot;</span>,followUserId).count();</span><br><span class="line">       <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(count()&gt;<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="共同关注"><a href="#共同关注" class="headerlink" title="共同关注"></a>共同关注</h2><p>首先完成进入博主首页功能<br><img src='https://s21.ax1x.com/2024/04/17/pFzMgED.png'></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserController 根据id查询用户</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;</span><br><span class="line"><span class="comment">// 查询详情</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line"><span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line"><span class="comment">// 返回</span></span><br><span class="line"><span class="keyword">return</span> Result.ok(userDTO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BlogController</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogByUserId</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line"><span class="comment">// 根据用户查询</span></span><br><span class="line">Page&lt;Blog&gt; page = blogService.query()</span><br><span class="line">.eq(<span class="string">&quot;user_id&quot;</span>, id).page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));</span><br><span class="line"><span class="comment">// 获取当前页数据</span></span><br><span class="line">List&lt;Blog&gt; records = page.getRecords();</span><br><span class="line"><span class="keyword">return</span> Result.ok(records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现共同关注功能<br>需求：利用Redis中恰当的数据结构，实现共同关注功能。在博主个人页面展示出当前用户与博主的共同好友。</p><p><img src="https://img.picgo.net/2024/04/18/PJ0FMMI7LFRXPJLCR046b1ce2e96ab1df.png"></p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 共同关注</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/common/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">followCommons</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> followService.followCommons(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">followCommons</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取当前用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    String key=<span class="string">&quot;follows:&quot;</span>+userId;</span><br><span class="line">    <span class="comment">//2.求交集</span></span><br><span class="line">    String key2=<span class="string">&quot;follows:&quot;</span>+id;</span><br><span class="line">    Set&lt;String&gt; intersect = stringRedisTemplate.opsForSet().intersect(key, key2);</span><br><span class="line">    <span class="keyword">if</span> (intersect==<span class="literal">null</span>||intersect.isEmpty())&#123;</span><br><span class="line">        <span class="comment">//无交集</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.解析id集合</span></span><br><span class="line">    List&lt;Long&gt; ids = intersect.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">    List&lt;UserDTO&gt; users = userService.listByIds(ids)</span><br><span class="line">            .stream()</span><br><span class="line">            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> Result.ok(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="关注推送"><a href="#关注推送" class="headerlink" title="关注推送"></a>关注推送</h2><h3 id="Feed流实现方案分析"><a href="#Feed流实现方案分析" class="headerlink" title="Feed流实现方案分析"></a>Feed流实现方案分析</h3><p>关注推送也叫做Feed流，直译为投喂。为用户持续的提供“沉浸式”的体验，通过无限下拉刷新获取新的信息。<br><img src="https://img.picgo.net/2024/04/18/MY9J0WQJO38EI5UAY7DI415902f2c65df87a.png"></p><p>Feed流产品有两种常见模式：</p><ul><li>Timeline：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈<br>1.优点：信息全面，不会有缺失。并且实现也相对简单<br>2.缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低</li><li>智能排序：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户<br>1.优点：投喂用户感兴趣信息，用户粘度很高，容易沉迷<br>2.缺点：如果算法不精准，可能起到反作用<br>本例中的个人页面，是基于关注的好友来做Feed流，因此采用Timeline的模式。该模式的实现方案有三种：<br>1.拉模式<br>2.推模式<br>3.推拉结合</li></ul><p>拉模式<br><img src="https://img.picgo.net/2024/04/18/ABK0LGFPLE00KBJJ_C00f9d8a6d4ea7b32.png"></p><p>推模式<br><img src='https://s21.ax1x.com/2024/04/17/pFzM2Ue.png'></p><p>推拉结合<br><img src='https://s21.ax1x.com/2024/04/17/pFzMR4H.png'></p><p>三种方案对比<br><img src='https://s21.ax1x.com/2024/04/17/pFzMfCd.png'></p><h3 id="推送到粉丝收件箱"><a href="#推送到粉丝收件箱" class="headerlink" title="推送到粉丝收件箱"></a>推送到粉丝收件箱</h3><p>需求：</p><ul><li>修改新增探店笔记的业务，在保存blog到数据库的同时，推送到粉丝的收件箱</li><li>收件箱满足可以根据时间戳排序，必须用Redis的数据结构实现</li><li>查询收件箱数据时，可以实现分页查询</li></ul><h4 id="Feed流的分页问题"><a href="#Feed流的分页问题" class="headerlink" title="Feed流的分页问题"></a>Feed流的分页问题</h4><p><img src='https://s21.ax1x.com/2024/04/17/pFz17b6.png'></p><h4 id="Feed流的滚动分页"><a href="#Feed流的滚动分页" class="headerlink" title="Feed流的滚动分页"></a>Feed流的滚动分页</h4><p><img src='https://s21.ax1x.com/2024/04/17/pFz1qUO.png'></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(<span class="meta">@RequestBody</span> Blog blog)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> blogService.saveBlog(blog);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">     <span class="comment">//1.获取登录用户</span></span><br><span class="line">     <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">     blog.setUserId(user.getId());</span><br><span class="line">     <span class="comment">//2.保存探店笔记</span></span><br><span class="line">     <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> save(blog);</span><br><span class="line">     <span class="keyword">if</span> (!isSuccess) &#123;</span><br><span class="line">         <span class="keyword">return</span> Result.fail(<span class="string">&quot;新增笔记失败&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//3.查询笔记作者的所有粉丝</span></span><br><span class="line">     List&lt;Follow&gt; follows = followService.query().eq(<span class="string">&quot;follow_user_id&quot;</span>, user.getId()).list();</span><br><span class="line">     <span class="comment">//4.推送笔记id给所有粉丝</span></span><br><span class="line">     <span class="keyword">for</span> (Follow follow : follows) &#123;</span><br><span class="line">         <span class="comment">//4.1.获取粉丝id</span></span><br><span class="line">         <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> follow.getUserId();</span><br><span class="line">         <span class="comment">//4.2.推送</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> FEED_KEY + userId;</span><br><span class="line">         stringRedisTemplate.opsForZSet().add(key,blog.getId().toString(),System.currentTimeMillis());</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//返回id</span></span><br><span class="line">     <span class="keyword">return</span> Result.ok(blog.getId());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="滚动分页查询收件箱的思路"><a href="#滚动分页查询收件箱的思路" class="headerlink" title="滚动分页查询收件箱的思路"></a>滚动分页查询收件箱的思路</h3><p><img src='https://s21.ax1x.com/2024/04/18/pFz3uq0.png'></p><p>参数分析<br><img src='https://s21.ax1x.com/2024/04/18/pFz3QaT.png'></p><h3 id="实现滚动分页查询"><a href="#实现滚动分页查询" class="headerlink" title="实现滚动分页查询"></a>实现滚动分页查询</h3><p>滚动分页类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScrollResult</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;?&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Long minTime;</span><br><span class="line">    <span class="keyword">private</span> Integer offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/of/follow&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryBlogOfFollow</span><span class="params">(<span class="meta">@RequestParam(&quot;lastId&quot;)</span> Long max,<span class="meta">@RequestParam(value = &quot;offset&quot;,defaultValue = &quot;0&quot;)</span>Integer offset)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogService.queryBlogOfFollow(max,offset);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogOfFollow</span><span class="params">(Long max, Integer offset)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取当前用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2.查询收件箱 ZREVRANGEBYSCORE key Max Min LIMIT offset count</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> FEED_KEY+userId;</span><br><span class="line">    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples = stringRedisTemplate.opsForZSet()</span><br><span class="line">            .reverseRangeByScoreWithScores(key, <span class="number">0</span>, max, offset, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//3.非空判断</span></span><br><span class="line">    <span class="keyword">if</span> (typedTuples==<span class="literal">null</span>||typedTuples.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.解析数据：blogId、minTime（时间戳）、offset</span></span><br><span class="line">    List&lt;Long&gt; ids=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(typedTuples.size());</span><br><span class="line">    <span class="type">long</span> minTime=<span class="number">0</span>; <span class="comment">//2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">os</span> <span class="operator">=</span><span class="number">1</span>; <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">for</span> (ZSetOperations.TypedTuple&lt;String&gt; tuple : typedTuples) &#123;<span class="comment">//5 4 4 2 2</span></span><br><span class="line">        <span class="comment">//4.1.获取id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> tuple.getValue();</span><br><span class="line">        ids.add(Long.valueOf(idStr));</span><br><span class="line">        <span class="comment">//获取分数（时间戳）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> tuple.getScore().longValue();</span><br><span class="line">        <span class="keyword">if</span> (time== minTime )&#123;</span><br><span class="line">            os++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            minTime=time;</span><br><span class="line">            os=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids);</span><br><span class="line">    <span class="comment">//5.根据id查询blog</span></span><br><span class="line">    List&lt;Blog&gt; blogs = query()</span><br><span class="line">            .in(<span class="string">&quot;id&quot;</span>, ids).last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="string">&quot;)&quot;</span>).list();</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        <span class="comment">//5.1.查询blog有关的用户</span></span><br><span class="line">        queryBlogUser(blog);</span><br><span class="line">        <span class="comment">//5.2.查询blog是否被点赞</span></span><br><span class="line">        isBlogLiked(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.封装并返回</span></span><br><span class="line">    <span class="type">ScrollResult</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScrollResult</span>();</span><br><span class="line">    r.setList(blogs);</span><br><span class="line">    r.setOffset(os);</span><br><span class="line">    r.setMinTime(minTime);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="附近商铺"><a href="#附近商铺" class="headerlink" title="附近商铺"></a>附近商铺</h1><h2 id="GEO数据结构的基本用法"><a href="#GEO数据结构的基本用法" class="headerlink" title="GEO数据结构的基本用法"></a>GEO数据结构的基本用法</h2><p>GEO就是Geolocation的简写形式，代表地理坐标。Redis在3.2版本中加入了对GEO的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令有：</p><ul><li>GEOADD：添加一个地理空间信息，包含：经度（longitude）、纬度（latitude）、值（member）</li><li>GEODIST：计算指定的两个点之间的距离并返回</li><li>GEOHASH：将指定member的坐标转为hash字符串形式并返回</li><li>GEOPOS：返回指定member的坐标</li><li>GEORADIUS：指定圆心、半径，找到该圆内包含的所有member，并按照与圆心之间的距离排序后返回。6.2以后已废弃</li><li>GEOSEARCH：在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能</li><li>GEOSEARCHSTORE：与GEOSEARCH功能一致，不过可以把结果存储到一个指定的key。 6.2.新功能</li></ul><p>需求：<br>1.添加下面几条数据：</p><ul><li>北京南站（ 116.378248 39.865275 ）</li><li>北京站（ 116.42803 39.903738 ）</li><li>北京西站（ 116.322287 39.893729 ）<br>2.计算北京西站到北京站的距离<br>3.搜索天安门（ 116.397904 39.909005 ）附近10km内的所有火车站，并按照距离升序排序</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GEOADD g1 116.378248 39.865275 bjn  116.42803 39.903738 bjz  116.322287 39.893729 bjx</span><br><span class="line"></span><br><span class="line">GEODIST g1 bjx bjz km</span><br><span class="line"></span><br><span class="line">geosearch g1 FROMLONLAT 116.397904 39.909005 BYRADIUS  10 km WITHDIST</span><br></pre></td></tr></table></figure><h2 id="导入店铺数据到GEO"><a href="#导入店铺数据到GEO" class="headerlink" title="导入店铺数据到GEO"></a>导入店铺数据到GEO</h2><p><img src="https://img.picgo.net/2024/04/18/8YN4R5S8QNIN1Q0996cdf0cafd06a53.png"></p><p>按照商户类型做分组，类型相同的商户作为同一组，以typeId为key存入同一个GEO集合中即可<br><img src="https://img.picgo.net/2024/04/18/W9MI7V6S4Y2XE37BFe73c297bebe41be6.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">loadShopData</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//1.查询店铺信息</span></span><br><span class="line">       List&lt;Shop&gt; list = shopService.list();</span><br><span class="line">       <span class="comment">//2.把店铺分组，按照typeId分组，id一致的放到一个集合</span></span><br><span class="line">       Map&lt;Long,List&lt;Shop&gt;&gt; map=list.stream().collect(Collectors.groupingBy(Shop::getTypeId));</span><br><span class="line">       <span class="comment">//3.分批完成写入Redis</span></span><br><span class="line">       <span class="keyword">for</span> (Map.Entry&lt;Long, List&lt;Shop&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">           <span class="comment">//3.1.获取类型id</span></span><br><span class="line">           <span class="type">Long</span> <span class="variable">typeId</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">           String key=<span class="string">&quot;shop:geo:&quot;</span>+typeId;</span><br><span class="line">           <span class="comment">//3.2.获取同类型的店铺的集合</span></span><br><span class="line">           List&lt;Shop&gt; value = entry.getValue();</span><br><span class="line">           List&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; locations=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(value.size());</span><br><span class="line">           <span class="comment">//3.3.写入redis GEOADD key 经度 纬度 member</span></span><br><span class="line">           <span class="keyword">for</span> (Shop shop : value) &#123;</span><br><span class="line">               <span class="comment">//stringRedisTemplate.opsForGeo().add(key,new Point(shop.getX(),shop.getY()),shop.getId().toString());</span></span><br><span class="line">               locations.add(<span class="keyword">new</span> <span class="title class_">RedisGeoCommands</span>.GeoLocation&lt;&gt;(</span><br><span class="line">                       shop.getId().toString(),</span><br><span class="line">                       <span class="keyword">new</span> <span class="title class_">Point</span>(shop.getX(),shop.getY())</span><br><span class="line">               ));</span><br><span class="line">           &#125;</span><br><span class="line">           stringRedisTemplate.opsForGeo().add(key,locations);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="实现附近商户功能"><a href="#实现附近商户功能" class="headerlink" title="实现附近商户功能"></a>实现附近商户功能</h2><p>修改版本号<br><img src="https://img.picgo.net/2024/04/18/RPTBBZ1JTMFP_KL9QCdb9d060632d27fbc.png"></p><p>控制层代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据商铺类型分页查询商铺信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> typeId 商铺类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> current 页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 商铺列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/type&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopByType</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;typeId&quot;)</span> Integer typeId,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;x&quot;,required = false)</span>Double x,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;y&quot;,required = false)</span>Double y</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    <span class="comment">// 返回数据</span></span><br><span class="line">    <span class="keyword">return</span> shopService.queryShopByType(typeId,current,x,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">queryShopByType</span><span class="params">(Integer typeId, Integer current, Double x, Double y)</span> &#123;</span><br><span class="line">       <span class="comment">//1.判断是否需要根据坐标查询</span></span><br><span class="line">       <span class="keyword">if</span> (x==<span class="literal">null</span>||y==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="comment">//不需要坐标查询，按照数据库查询</span></span><br><span class="line">           <span class="comment">// 根据类型分页查询</span></span><br><span class="line">           Page&lt;Shop&gt; page = query()</span><br><span class="line">                   .eq(<span class="string">&quot;type_id&quot;</span>, typeId)</span><br><span class="line">                   .page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.DEFAULT_PAGE_SIZE));</span><br><span class="line">           <span class="comment">//返回数据</span></span><br><span class="line">           <span class="keyword">return</span> Result.ok(page.getRecords());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//2.计算分页参数</span></span><br><span class="line">       <span class="type">int</span> from=(current-<span class="number">1</span>)*SystemConstants.DEFAULT_PAGE_SIZE;</span><br><span class="line">       <span class="type">int</span> end=current*SystemConstants.DEFAULT_PAGE_SIZE;</span><br><span class="line">       <span class="comment">//3.查询redis、按照距离排序、分页。结果：shopId、distance</span></span><br><span class="line">       String key=SHOP_GEO_KEY+typeId;</span><br><span class="line">       GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; results = stringRedisTemplate.opsForGeo() <span class="comment">//GEOSEARCH BYLONLAT x y BYRADIUS 10 WITHDISTANCE</span></span><br><span class="line">               .search(</span><br><span class="line">                       key,</span><br><span class="line">                       GeoReference.fromCoordinate(x, y),</span><br><span class="line">                       <span class="keyword">new</span> <span class="title class_">Distance</span>(<span class="number">5000</span>),</span><br><span class="line">                       RedisGeoCommands.GeoSearchCommandArgs.newGeoSearchArgs().includeDistance().limit(end)</span><br><span class="line">               );</span><br><span class="line">       <span class="comment">//4.解析出id</span></span><br><span class="line">       <span class="keyword">if</span> (results==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;GeoResult&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt;&gt; list = results.getContent();</span><br><span class="line">       <span class="keyword">if</span> (list.size()&lt;=from)&#123;</span><br><span class="line">           <span class="comment">// 没有下一页了，结束</span></span><br><span class="line">           <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;Long&gt; ids=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list.size());</span><br><span class="line">       Map&lt;String,Distance&gt; distanceMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(list.size());</span><br><span class="line">       <span class="comment">//4.1.截取from~end的部分</span></span><br><span class="line">       list.stream().skip(from).forEach(result-&gt;&#123;</span><br><span class="line">           <span class="comment">//4.2.获取店铺id</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">shopIdStr</span> <span class="operator">=</span> result.getContent().getName();</span><br><span class="line">           ids.add(Long.valueOf(shopIdStr));</span><br><span class="line">           <span class="comment">//4.3.获取距离</span></span><br><span class="line">           <span class="type">Distance</span> <span class="variable">distance</span> <span class="operator">=</span> result.getDistance();</span><br><span class="line">           distanceMap.put(shopIdStr,distance);</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//5.根据id查询Shop</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids);</span><br><span class="line">       List&lt;Shop&gt; shops = query().in(<span class="string">&quot;id&quot;</span>, ids).last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="string">&quot;)&quot;</span>).list();</span><br><span class="line">       <span class="keyword">for</span> (Shop shop : shops) &#123;</span><br><span class="line">           shop.setDistance(distanceMap.get(shop.getId().toString()).getValue());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//6.返回</span></span><br><span class="line">       <span class="keyword">return</span> Result.ok(shops);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h1 id="用户签到"><a href="#用户签到" class="headerlink" title="用户签到"></a>用户签到</h1><h2 id="BitMap功能演示"><a href="#BitMap功能演示" class="headerlink" title="BitMap功能演示"></a>BitMap功能演示</h2><p>假如我们用一张表来存储用户签到信息，其结构应该如下：<br><img src="https://img.picgo.net/2024/04/18/8QUWWVYY4U9LQPHV9Uab835af2a73a8e30.png"><br>假如有1000万用户，平均每人每年签到次数为10次，则这张表一年的数据量为 1亿条<br>每签到一次需要使用（8 + 8 + 1 + 1 + 3 + 1）共22 字节的内存，一个月则最多需要600多字节</p><p>bitmap<br><img src="https://img.picgo.net/2024/04/18/AEP8XRLITI8JCAUe705427481860139.png"><br>我们按月来统计用户签到信息，签到记录为1，未签到则记录为0.</p><p><img src="https://img.picgo.net/2024/04/18/C6XFER3HC__BFTC3U_POe9907396d06e7eae.png"><br>把每一个bit位对应当月的每一天，形成了映射关系。用0和1标示业务状态，这种思路就称为位图（BitMap）。<br>Redis中是利用string类型数据结构实现BitMap，因此最大上限是512M，转换为bit则是 2^32个bit位。<br>BitMap的操作命令有：</p><ul><li>SETBIT：向指定位置（offset）存入一个0或1</li><li>GETBIT ：获取指定位置（offset）的bit值</li><li>BITCOUNT ：统计BitMap中值为1的bit位的数量</li><li>BITFIELD ：操作（查询、修改、自增）BitMap中bit数组中的指定位置（offset）的值</li><li>BITFIELD_RO ：获取BitMap中bit数组，并以十进制形式返回</li><li>BITOP ：将多个BitMap的结果做位运算（与 、或、异或）</li><li>BITPOS ：查找bit数组中指定范围内第一个0或1出现的位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">SETBIT bm1 0 1</span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">SETBIT bm1 1 1</span></span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">SETBIT bm1 2 1</span></span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">SETBIT bm1 5 1</span></span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">SETBIT bm1 6 1</span></span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">SETBIT bm1 7 1</span></span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GETBIT bm1 2</span></span><br><span class="line">1</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">BITCOUNT</span></span><br><span class="line">ERR wrong number of arguments for &#x27;bitcount&#x27; command</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">BITCOUNT bm1</span></span><br><span class="line">6</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">BITFIELD bm1 GET u2 0</span></span><br><span class="line">3</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">BITFIELD bm1 GET u3 0</span></span><br><span class="line">7</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">BITFIELD bm1 GET u4 0</span></span><br><span class="line">14</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">BITPOS bm1 0</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><img src="https://img.picgo.net/2024/04/18/J2MEOTYWOA7R9VVWECe53902dc0705ccf2.png"></p><h2 id="实现签到功能"><a href="#实现签到功能" class="headerlink" title="实现签到功能"></a>实现签到功能</h2><p><img src="https://img.picgo.net/2024/04/18/XR3BIO4TY4TPX2PES8O9fde66f3c7f9784bb.png"></p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 用户签到</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@PostMapping(&quot;/sign&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">sign</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> userService.sign();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><br>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">sign</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//1.获取当前登录的用户</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">       <span class="comment">//2.获取日期</span></span><br><span class="line">       <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">       <span class="comment">//3.拼接key</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">keySuffix</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;:yyyyMM&quot;</span>));</span><br><span class="line">       String key= USER_SIGN_KEY +userId+keySuffix;</span><br><span class="line">       <span class="comment">//4.获取今天是本月的第几天</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">dayOfMonth</span> <span class="operator">=</span> now.getDayOfMonth();</span><br><span class="line">       <span class="comment">//5.写入Redis SETBIT key offset 1</span></span><br><span class="line">       stringRedisTemplate.opsForValue().setBit(key,dayOfMonth-<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> Result.ok();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="统计连续签到"><a href="#统计连续签到" class="headerlink" title="统计连续签到"></a>统计连续签到</h2><p><img src="https://img.picgo.net/2024/04/18/VOETD4YZJNG95MY3We5674bb861eb12d7.png"></p><p><img src="https://img.picgo.net/2024/04/18/P4PFMAQ930V8HRFM9I465f9a901453390bf.png" ></p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**统计连续签到</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/sign/count&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">signCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.signCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">signCount</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//1.获取当前登录的用户</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">       <span class="comment">//2.获取日期</span></span><br><span class="line">       <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">       <span class="comment">//3.拼接key</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">keySuffix</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;:yyyyMM&quot;</span>));</span><br><span class="line">       String key= USER_SIGN_KEY +userId+keySuffix;</span><br><span class="line">       <span class="comment">//4.获取今天是本月的第几天</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">dayOfMonth</span> <span class="operator">=</span> now.getDayOfMonth();</span><br><span class="line">       <span class="comment">//5.获取本月截至今天为之的所有的签到记录，返回的是一个十进制数字</span></span><br><span class="line">       List&lt;Long&gt; result = stringRedisTemplate.opsForValue().bitField(</span><br><span class="line">               key,</span><br><span class="line">               BitFieldSubCommands.create()</span><br><span class="line">                       .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class="number">0</span>)</span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">if</span> (result==<span class="literal">null</span>||result.isEmpty())&#123;</span><br><span class="line">           <span class="comment">//没有任何签到结果</span></span><br><span class="line">           <span class="keyword">return</span> Result.ok();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">Long</span> <span class="variable">num</span> <span class="operator">=</span> result.get(<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">if</span> (num==<span class="literal">null</span>||num==<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> Result.ok();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//6.循环遍历</span></span><br><span class="line">       <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">           <span class="comment">//6.1.让这个数字与1做与运算，得到数字的最后一个bit位    //判断这个bit位是否为0</span></span><br><span class="line">           <span class="keyword">if</span> ((num&amp;<span class="number">1</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">               <span class="comment">//如果为0，说明未签到，结束</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//如果不为0，说明已签到，计数器+1</span></span><br><span class="line">               count++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//把数字右移一位，抛弃最后一个bit位，继续下一个bit位</span></span><br><span class="line">           num&gt;&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> Result.ok();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h1 id="UV统计"><a href="#UV统计" class="headerlink" title="UV统计"></a>UV统计</h1><h2 id="HyperLogLog的用法"><a href="#HyperLogLog的用法" class="headerlink" title="HyperLogLog的用法"></a>HyperLogLog的用法</h2><p>首先我们搞懂两个概念：</p><ul><li>UV：全称Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1天内同一个用户多次访问该网站，只记录1次。</li><li>PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录1次PV，用户多次打开页面，则记录多次PV。往往用来衡量网站的流量。</li></ul><p>UV统计在服务端做会比较麻烦，因为要判断该用户是否已经统计过了，需要将统计过的用户信息保存。但是如果每个访问的用户都保存到Redis中，数据量会非常恐怖。</p><p>Hyperloglog(HLL)是从Loglog算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。相关算法原理大家可以参考：<a href="https://juejin.cn/post/6844903785744056333#heading-0">https://juejin.cn/post/6844903785744056333#heading-0</a><br>Redis中的HLL是基于string结构实现的，单个HLL的内存永远小于16kb，内存占用低的令人发指！作为代价，其测量结果是概率性的，有小于0.81％的误差。不过对于UV统计来说，这完全可以忽略。</p><p><img src="https://img.picgo.net/2024/04/18/UZIPGNELFL6BO0KQO0QD8b3fcc9f97ee8fde.png"></p><h2 id="测试百万数据的统计"><a href="#测试百万数据的统计" class="headerlink" title="测试百万数据的统计"></a>测试百万数据的统计</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHyperLogLog</span><span class="params">()</span> &#123;</span><br><span class="line">    String[] values=<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        j=i%<span class="number">1000</span>;</span><br><span class="line">        values[j]=<span class="string">&quot;user_&quot;</span>+i;</span><br><span class="line">        <span class="keyword">if</span> (j==<span class="number">999</span>)&#123;</span><br><span class="line">            <span class="comment">//发送到Redis</span></span><br><span class="line">            stringRedisTemplate.opsForHyperLogLog().add(<span class="string">&quot;hl2&quot;</span>,values);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//统计数量</span></span><br><span class="line">    Long count=stringRedisTemplate.opsForHyperLogLog().size(<span class="string">&quot;hl2&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;count=&quot;</span>+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HyperLogLog的作用：</p><ul><li>做海量数据的统计工作<br>HyperLogLog的优点：</li><li>内存占用极低</li><li>性能非常好<br>HyperLogLog的缺点：</li><li>有一定的误差</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;达人探店&quot;&gt;&lt;a href=&quot;#达人探店&quot; class=&quot;headerlink&quot; title=&quot;达人探店&quot;&gt;&lt;/a&gt;达人探店&lt;/h1&gt;&lt;h2 id=&quot;发布探店笔记&quot;&gt;&lt;a href=&quot;#发布探店笔记&quot; class=&quot;headerlink&quot; title=&quot;发布探店笔</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="redis实战项目" scheme="https://wjlgmw-github-io.vercel.app/tags/redis%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>黑马头条-消息队列-redis</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/e0097467.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/e0097467.html</id>
    <published>2024-04-17T00:57:30.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识消息队列"><a href="#认识消息队列" class="headerlink" title="认识消息队列"></a>认识消息队列</h1><p>消息队列（Message Queue），字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色：<br>1.消息队列：存储和管理消息，也被称为消息代理（Message Broker）<br>2.生产者：发送消息到消息队列<br>3.消费者：从消息队列获取消息并处理消息<br>Redis提供了三种不同的方式来实现消息队列：<br>1.list结构：基于List结构模拟消息队列<br>2.PubSub：基本的点对点消息模型<br>3.Stream：比较完善的消息队列模型</p><p><img src="https://img.picgo.net/2024/04/18/5KZBNITR64F8UX858c13020f1cd8fd.png"></p><h1 id="基于List实现消息队列"><a href="#基于List实现消息队列" class="headerlink" title="基于List实现消息队列"></a>基于List实现消息队列</h1><p>消息队列（Message Queue），字面意思就是存放消息的队列。而Redis的list数据结构是一个双向链表，很容易模拟出队列效果。<br>队列是入口和出口不在一边，因此我们可以利用：LPUSH 结合 RPOP、或者 RPUSH 结合 LPOP来实现。<br>不过要注意的是，当队列中没有消息时RPOP或LPOP操作会返回null，并不像JVM的阻塞队列那样会阻塞并等待消息。因此这里应该使用BRPOP或者BLPOP来实现阻塞效果<br><img src="https://img.picgo.net/2024/04/18/SGS3RM6BNC_VDPQ3ZRI28ff419b261b0722.png"></p><p>基于List的消息队列有哪些优缺点？<br>优点：<br>1.利用Redis存储，不受限于JVM内存上限<br>2.基于Redis的持久化机制，数据安全性有保证<br>3.可以满足消息有序性<br>缺点：<br>1.无法避免消息丢失<br>2.只支持单消费者</p><h1 id="基于PubSub实现消息队列"><a href="#基于PubSub实现消息队列" class="headerlink" title="基于PubSub实现消息队列"></a>基于PubSub实现消息队列</h1><p>PubSub（发布订阅）是Redis2.0版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息。<br>SUBSCRIBE channel [channel] ：订阅一个或多个频道<br>PUBLISH channel msg ：向一个频道发送消息<br>PSUBSCRIBE pattern[pattern] ：订阅与pattern格式匹配的所有频道</p><p><img src="https://img.picgo.net/2024/04/18/MK1MHR6QURODT7SIA1Kfb1d0fef37268080.png"></p><p>基于PubSub的消息队列有哪些优缺点？<br>优点：<br>1.采用发布订阅模型，支持多生产、多消费<br>缺点：<br>1.不支持数据持久化<br>2.无法避免消息丢失<br>3.消息堆积有上限，超出时数据丢失</p><h1 id="Stream的单消费模式"><a href="#Stream的单消费模式" class="headerlink" title="Stream的单消费模式"></a>Stream的单消费模式</h1><p>Stream 是 Redis 5.0 引入的一种新数据类型，可以实现一个功能非常完善的消息队列。</p><p><img src="https://img.picgo.net/2024/04/18/E8I58H0AUQ_KKM33S9e14e5fd47447dc0e.png"></p><p>读消息<br><img src="https://img.picgo.net/2024/04/18/K6I4_YBK3PD3YZNKRN02G8cc8f5ee354e86a8.png"></p><p>阻塞读消息<br><img src="https://img.picgo.net/2024/04/18/HGTJXEKP4MHUIRDW3C9Sb5b404a29a0efe93.png"></p><p>注意<br><img src="https://img.picgo.net/2024/04/18/RH9CG4CWIX_1VM26JW0392292577375e54.png"></p><p>STREAM类型消息队列的XREAD命令特点：<br>1.消息可回溯<br>2.一个消息可以被多个消费者读取<br>3.可以阻塞读取<br>4.有消息漏读的风险</p><h1 id="Stream的消费者组模式"><a href="#Stream的消费者组模式" class="headerlink" title="Stream的消费者组模式"></a>Stream的消费者组模式</h1><p>消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列。具备下列特点<br><img src="https://img.picgo.net/2024/04/18/KM00Q6A1MOQVAFBRJRLT4f9d29d7889d784d.png"></p><p>创建消费者组<br><img src="https://img.picgo.net/2024/04/18/EGKCMI2BJYI1HZ22Mcc545a1c717e4ef3.png"></p><p>从消费者组读取消息<br><img src="https://img.picgo.net/2024/04/18/A2UD3HW6WMT37H_GW025006cf32d1fa5e.png"></p><p>消费者监听消息的基本思路<br><img src="https://img.picgo.net/2024/04/18/5G3Y1YHTFFSTCLP9db99a275c882f976.png"></p><p>STREAM类型消息队列的XREADGROUP命令特点：</p><ul><li>消息可回溯</li><li>可以多消费者争抢消息，加快消费速度</li><li>可以阻塞读取</li><li>没有消息漏读的风险</li><li>有消息确认机制，保证消息至少被消费一次</li></ul><p>三种消息队列比较<br><img src="https://img.picgo.net/2024/04/18/JWCPB8SWO9TAQLH8NN22b027209e3f4d866b.png"></p><h1 id="基于Stream消息队列实现异步秒杀"><a href="#基于Stream消息队列实现异步秒杀" class="headerlink" title="基于Stream消息队列实现异步秒杀"></a>基于Stream消息队列实现异步秒杀</h1><p>需求：<br>1.创建一个Stream类型的消息队列，名为stream.orders<br>2.修改之前的秒杀下单Lua脚本，在认定有抢购资格后，直接向stream.orders中添加消息，内容包含voucherId、userId、orderId<br>3.项目启动时，开启一个线程任务，尝试获取stream.orders中的消息，完成下单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XGROUP CREATE stream.orders g1 0 MKSTREAM</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--1.参数列表</span></span><br><span class="line"><span class="comment">--1.1.优惠劵id</span></span><br><span class="line"><span class="keyword">local</span> voucherId=ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="comment">--1.2.用户id</span></span><br><span class="line"><span class="keyword">local</span> userId=ARGV[<span class="number">2</span>]</span><br><span class="line"><span class="comment">--1.3. 订单id</span></span><br><span class="line"><span class="keyword">local</span> orderId=ARGV[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">--2.数据key</span></span><br><span class="line"><span class="comment">--2.1.库存key</span></span><br><span class="line"><span class="keyword">local</span> stockKey=<span class="string">&#x27;seckill:stock:&#x27;</span> .. voucherId</span><br><span class="line"><span class="comment">--2.2.订单key</span></span><br><span class="line"><span class="keyword">local</span> orderKey=<span class="string">&#x27;seckill:order:&#x27;</span> .. voucherId</span><br><span class="line"></span><br><span class="line"><span class="comment">--3.脚本业务</span></span><br><span class="line"><span class="comment">--3.1.判断库存是否充足 get stockKey</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">--3.2.库存不足,返回1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--3.2.判断用户是否下单 SISMEMBER orderKey userId</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">--3.3.存在，说明是重复下单，返回2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--3.4.扣库存 incrby stockKey -1</span></span><br><span class="line">redis.call(<span class="string">&#x27;incrby&#x27;</span>,stockKey,<span class="number">-1</span>)</span><br><span class="line"><span class="comment">--3.5.下单（保存用户）sadd orderKey userId</span></span><br><span class="line">redis.call(<span class="string">&#x27;sadd&#x27;</span>,orderKey,userId)</span><br><span class="line"><span class="comment">--3.6.发送消息到队列中，XADD stream.orders * k1 v1 k2 v2</span></span><br><span class="line">redis.call(<span class="string">&#x27;xadd&#x27;</span>,<span class="string">&#x27;stream.orders&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;userId&#x27;</span>,userId,<span class="string">&#x27;voucherId&#x27;</span>,voucherId,<span class="string">&#x27;id&#x27;</span>,orderId)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>修改地方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">       String queueName=<span class="string">&quot;stream.orders&quot;</span>;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">//1.获取消息队列中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS stream.order&gt;</span></span><br><span class="line">                   List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                           Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                           StreamReadOptions.empty().count(<span class="number">1</span>).block(Duration.ofSeconds(<span class="number">2</span>)),</span><br><span class="line">                           StreamOffset.create(queueName, ReadOffset.lastConsumed())</span><br><span class="line">                   );</span><br><span class="line">                   <span class="comment">//2.判断消息获取是否成功</span></span><br><span class="line">                   <span class="keyword">if</span> (list==<span class="literal">null</span>||list.isEmpty())&#123;</span><br><span class="line">                       <span class="comment">//2.1.如果获取失败，说明没有消息，继续下一次循环</span></span><br><span class="line">                       <span class="keyword">continue</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//3.解析消息中的订单信息</span></span><br><span class="line">                   MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                   Map&lt;Object, Object&gt; values = record.getValue();</span><br><span class="line">                   <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(), <span class="literal">true</span>);</span><br><span class="line">                   <span class="comment">//4.如果获取成功，可以下单</span></span><br><span class="line">                   handleVoucherOrder(voucherOrder);</span><br><span class="line">                   <span class="comment">//5.ACK确认 SACK stream.orders g1 id</span></span><br><span class="line">                   stringRedisTemplate.opsForStream().acknowledge(queueName,<span class="string">&quot;g1&quot;</span>,record.getId());</span><br><span class="line">                   handleVoucherOrder(voucherOrder);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                   log.error(<span class="string">&quot;处理订单异常&quot;</span>,e);</span><br><span class="line">                   handlePendingList();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handlePendingList</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">//1.获取pending-list中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS stream.order 0</span></span><br><span class="line">                   List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                           Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                           StreamReadOptions.empty().count(<span class="number">1</span>),</span><br><span class="line">                           StreamOffset.create(queueName, ReadOffset.from(<span class="string">&quot;0&quot;</span>))</span><br><span class="line">                   );</span><br><span class="line">                   <span class="comment">//2.判断消息获取是否成功</span></span><br><span class="line">                   <span class="keyword">if</span> (list==<span class="literal">null</span>||list.isEmpty())&#123;</span><br><span class="line">                       <span class="comment">//2.1.如果获取失败，说明pending-list没有消息，继续下一次循环</span></span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//3.解析消息中的订单信息</span></span><br><span class="line">                   MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                   Map&lt;Object, Object&gt; values = record.getValue();</span><br><span class="line">                   <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(), <span class="literal">true</span>);</span><br><span class="line">                   <span class="comment">//4.如果获取成功，可以下单</span></span><br><span class="line">                   handleVoucherOrder(voucherOrder);</span><br><span class="line">                   <span class="comment">//5.ACK确认 SACK stream.orders g1 id</span></span><br><span class="line">                   stringRedisTemplate.opsForStream().acknowledge(queueName,<span class="string">&quot;g1&quot;</span>,record.getId());</span><br><span class="line">                   handleVoucherOrder(voucherOrder);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                   log.error(<span class="string">&quot;处理pending-list异常&quot;</span>,e);</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">       <span class="comment">//获取用户</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">       <span class="comment">//获取订单id</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">       <span class="comment">//1.执行lua脚本</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">               SECKILL_SCRIPT,</span><br><span class="line">               Collections.emptyList(),</span><br><span class="line">               voucherId.toString(), userId.toString(),String.valueOf(orderId)</span><br><span class="line">       );</span><br><span class="line">       <span class="comment">//2.判断结果是否为0</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> result.intValue();</span><br><span class="line">       <span class="keyword">if</span> (r!=<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="comment">//2.1.不为0，代表没有购买资格</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(r==<span class="number">1</span>?<span class="string">&quot;库存不足&quot;</span>:<span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//3.获取代理对象</span></span><br><span class="line">       proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">       <span class="comment">//4.返回订单id</span></span><br><span class="line">       <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;认识消息队列&quot;&gt;&lt;a href=&quot;#认识消息队列&quot; class=&quot;headerlink&quot; title=&quot;认识消息队列&quot;&gt;&lt;/a&gt;认识消息队列&lt;/h1&gt;&lt;p&gt;消息队列（Message Queue），字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色：&lt;br</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="redis实战项目" scheme="https://wjlgmw-github-io.vercel.app/tags/redis%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>黑马点评-秒杀优化-redis</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/ba4d8ccc.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/ba4d8ccc.html</id>
    <published>2024-04-16T22:34:00.000Z</published>
    <updated>2024-04-21T13:04:10.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步秒杀思路"><a href="#异步秒杀思路" class="headerlink" title="异步秒杀思路"></a>异步秒杀思路</h1><p><img src="https://img.picgo.net/2024/04/18/KMOED24TG2ERLT9RJ6LV158a3e32596046cb.png"></p><p><img src="https://img.picgo.net/2024/04/18/HUR2WIHCJ3RUYD5YTSJ1SHf247390d822023b7.png"></p><h1 id="基于Redis完成秒杀资格判断"><a href="#基于Redis完成秒杀资格判断" class="headerlink" title="基于Redis完成秒杀资格判断"></a>基于Redis完成秒杀资格判断</h1><p>改进秒杀业务，提高并发性能<br>需求：<br>1.新增秒杀优惠券的同时，将优惠券信息保存到Redis中<br>2.基于Lua脚本，判断秒杀库存、一人一单，决定用户是否抢购成功<br>3.如果抢购成功，将优惠券id和用户id封装后存入阻塞队列<br>4.开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--1.参数列表</span></span><br><span class="line"><span class="comment">--1.1.优惠劵id</span></span><br><span class="line"><span class="keyword">local</span> voucherId=ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="comment">--1.2.用户id</span></span><br><span class="line"><span class="keyword">local</span> userId=ARGV[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">--2.数据key</span></span><br><span class="line"><span class="comment">--2.1.库存key</span></span><br><span class="line"><span class="keyword">local</span> stockKey=<span class="string">&#x27;seckill:stock:&#x27;</span> .. voucherId</span><br><span class="line"><span class="comment">--2.2.订单key</span></span><br><span class="line"><span class="keyword">local</span> orderKey=<span class="string">&#x27;seckill:order:&#x27;</span> .. voucherId</span><br><span class="line"></span><br><span class="line"><span class="comment">--3.脚本业务</span></span><br><span class="line"><span class="comment">--3.1.判断库存是否充足 get stockKey</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">--3.2.库存不足,返回1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--3.2.判断用户是否下单 SISMEMBER orderKey userId</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">--3.3.存在，说明是重复下单，返回2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--3.4.扣库存 incrby stockKey -1</span></span><br><span class="line">redis.call(<span class="string">&#x27;incrby&#x27;</span>,stockKey,<span class="number">-1</span>)</span><br><span class="line"><span class="comment">--3.5.下单（保存用户）sadd orderKey userId</span></span><br><span class="line">redis.call(<span class="string">&#x27;sadd&#x27;</span>,orderKey,userId)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>新增秒杀优化卷<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="meta">@Transactional</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSeckillVoucher</span><span class="params">(Voucher voucher)</span> &#123;</span><br><span class="line">     <span class="comment">// 保存优惠券</span></span><br><span class="line">     save(voucher);</span><br><span class="line">     <span class="comment">// 保存秒杀信息</span></span><br><span class="line">     <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeckillVoucher</span>();</span><br><span class="line">     seckillVoucher.setVoucherId(voucher.getId());</span><br><span class="line">     seckillVoucher.setStock(voucher.getStock());</span><br><span class="line">     seckillVoucher.setBeginTime(voucher.getBeginTime());</span><br><span class="line">     seckillVoucher.setEndTime(voucher.getEndTime());</span><br><span class="line">     seckillVoucherService.save(seckillVoucher);</span><br><span class="line">     <span class="comment">//保存秒杀库存到Redis中</span></span><br><span class="line">     stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY+voucher.getId(),voucher.getStock().toString());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"> <span class="keyword">private</span> ISeckillVoucherService seckillVoucherService;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Resource</span></span><br><span class="line"> <span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Resource</span></span><br><span class="line"> <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Resource</span></span><br><span class="line"> <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; SECKILL_SCRIPT;</span><br><span class="line"> <span class="comment">//在静态代码块里初始化</span></span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line">     SECKILL_SCRIPT=<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">     SECKILL_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;seckill.lua&quot;</span>));</span><br><span class="line">     SECKILL_SCRIPT.setResultType(Long.class);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">     <span class="comment">//获取用户</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">     <span class="comment">//1.执行lua脚本</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">             SECKILL_SCRIPT,</span><br><span class="line">             Collections.emptyList(),</span><br><span class="line">             voucherId.toString(), userId.toString()</span><br><span class="line">     );</span><br><span class="line">     <span class="comment">//2.判断结果是否为0</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> result.intValue();</span><br><span class="line">     <span class="keyword">if</span> (r!=<span class="number">0</span>)&#123;</span><br><span class="line">         <span class="comment">//2.1.不为0，代表没有购买资格</span></span><br><span class="line">         <span class="keyword">return</span> Result.fail(r==<span class="number">1</span>?<span class="string">&quot;库存不足&quot;</span>:<span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//2.2.为0，有购买资格，把下单信息保存到阻塞队列</span></span><br><span class="line">     <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">     <span class="comment">//TODO 保存阻塞队列</span></span><br><span class="line">     <span class="comment">//3.返回订单id</span></span><br><span class="line">     <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h1 id="基于阻塞队列实现秒杀异步下单"><a href="#基于阻塞队列实现秒杀异步下单" class="headerlink" title="基于阻塞队列实现秒杀异步下单"></a>基于阻塞队列实现秒杀异步下单</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks=<span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService SECKILL_ORDER_EXECUTOR= Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">     SECKILL_ORDER_EXECUTOR.submit(<span class="keyword">new</span> <span class="title class_">VoucherOrderHandler</span>());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="comment">//1.获取队列中的订单信息</span></span><br><span class="line">                 <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> orderTasks.take();</span><br><span class="line">                 <span class="comment">//2.创建订单</span></span><br><span class="line">                 handleVoucherOrder(voucherOrder);</span><br><span class="line">             &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                 log.error(<span class="string">&quot;处理订单异常&quot;</span>,e);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">     <span class="comment">//获取用户</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> voucherOrder.getUserId();</span><br><span class="line">     <span class="comment">//创建锁对象</span></span><br><span class="line">     <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;lock:order:&quot;</span> + userId);</span><br><span class="line">     <span class="comment">//获取锁</span></span><br><span class="line">     <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line">     <span class="comment">//判断是否获取锁成功</span></span><br><span class="line">     <span class="keyword">if</span> (!isLock)&#123;</span><br><span class="line">         <span class="comment">//获取锁失败，返回错误或重试</span></span><br><span class="line">         log.error(<span class="string">&quot;不允许重复下单&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         proxy.createVoucherOrder(voucherOrder);</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">//释放锁</span></span><br><span class="line">         lock.unlock();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IVoucherOrderService proxy;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">     <span class="comment">//获取用户</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">     <span class="comment">//1.执行lua脚本</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">             SECKILL_SCRIPT,</span><br><span class="line">             Collections.emptyList(),</span><br><span class="line">             voucherId.toString(), userId.toString()</span><br><span class="line">     );</span><br><span class="line">     <span class="comment">//2.判断结果是否为0</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> result.intValue();</span><br><span class="line">     <span class="keyword">if</span> (r!=<span class="number">0</span>)&#123;</span><br><span class="line">         <span class="comment">//2.1.不为0，代表没有购买资格</span></span><br><span class="line">         <span class="keyword">return</span> Result.fail(r==<span class="number">1</span>?<span class="string">&quot;库存不足&quot;</span>:<span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//2.2.为0，有购买资格，把下单信息保存到阻塞队列</span></span><br><span class="line">     <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">     <span class="comment">//2.3.订单id</span></span><br><span class="line">     <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">     voucherOrder.setId(orderId);</span><br><span class="line">     <span class="comment">//2.4.用户id</span></span><br><span class="line">     voucherOrder.setUserId(userId);</span><br><span class="line">     <span class="comment">//2.5. 代金卷id</span></span><br><span class="line">     voucherOrder.setVoucherId(voucherId);</span><br><span class="line">     <span class="comment">//TODO 保存阻塞队列</span></span><br><span class="line">     orderTasks.add(voucherOrder);</span><br><span class="line"></span><br><span class="line">      proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">     <span class="comment">//3.返回订单id</span></span><br><span class="line">     <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">        <span class="comment">//5.一人一单</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> voucherOrder.getUserId();</span><br><span class="line">            <span class="comment">//5.1.查询订单</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherOrder).count();</span><br><span class="line">            <span class="comment">//5.2.判断是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//用户已经购买过了</span></span><br><span class="line">               log.error(<span class="string">&quot;用户已经买过一次&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//6.扣减库存</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                    .setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">                    .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>)</span><br><span class="line">                    .update();</span><br><span class="line">            <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                <span class="comment">//扣减失败</span></span><br><span class="line">                log.error(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            save(voucherOrder);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>秒杀业务的优化思路是什么？<br>1.先利用Redis完成库存余量、一人一单判断，完成抢单业务<br>2.再将下单业务放入阻塞队列，利用独立线程异步下单<br>基于阻塞队列的异步秒杀存在哪些问题？<br>1.内存限制问题<br>2.数据安全问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;异步秒杀思路&quot;&gt;&lt;a href=&quot;#异步秒杀思路&quot; class=&quot;headerlink&quot; title=&quot;异步秒杀思路&quot;&gt;&lt;/a&gt;异步秒杀思路&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img.picgo.net/2024/04/18/KMOED24TG2E</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="redis实战项目" scheme="https://wjlgmw-github-io.vercel.app/tags/redis%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>黑马点评-分布式锁-redis</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/351a294f.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/351a294f.html</id>
    <published>2024-04-16T13:05:24.000Z</published>
    <updated>2024-04-21T13:04:10.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于原理和不同实现方式对比"><a href="#基于原理和不同实现方式对比" class="headerlink" title="基于原理和不同实现方式对比"></a>基于原理和不同实现方式对比</h1><p><img src='https://pic.imgdb.cn/item/661e0af90ea9cb1403e0fb07.png'></p><p>分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。<br><img src='https://pic.imgdb.cn/item/661e0b590ea9cb1403e1b5d3.png'></p><h2 id="分布式锁的实现"><a href="#分布式锁的实现" class="headerlink" title="分布式锁的实现"></a>分布式锁的实现</h2><p>分布式锁的核心是实现多进程之间互斥，而满足这一点的方式有很多，常见的有三种：<br><img src='https://pic.imgdb.cn/item/661e0b7f0ea9cb1403e1f9be.png'></p><h1 id="Redis的分布式锁实现思路"><a href="#Redis的分布式锁实现思路" class="headerlink" title="Redis的分布式锁实现思路"></a>Redis的分布式锁实现思路</h1><p>实现分布式锁时需要实现的两个基本方法：<br>获取锁：<br>1.互斥：确保只能有一个线程获取锁<br>2.非阻塞：尝试一次，成功返回true，失败返回false<br><img src='https://pic.imgdb.cn/item/661e0e2a0ea9cb1403e6ff46.png'></p><p>释放锁：<br>1.手动释放<br>2.超时释放:获取锁时添加一个超时时间(避免服务器宕机或者业务超时)<br><img src='https://pic.imgdb.cn/item/661e0e330ea9cb1403e70e35.png'></p><p><img src='https://pic.imgdb.cn/item/661e0e4d0ea9cb1403e73a0d.png'></p><h1 id="实现Redis分布式锁版本1"><a href="#实现Redis分布式锁版本1" class="headerlink" title="实现Redis分布式锁版本1"></a>实现Redis分布式锁版本1</h1><p>可以借鉴于解决缓存击穿时候用到的互斥锁方法，基本上是差不多的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeoutSec 锁持有的超时时间，过期后自动释放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代表获取成功，false代表获取锁失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX=<span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">                .setIfAbsent(KEY_PREFIX + name, threadId + <span class="string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success); <span class="comment">//自动拆箱，避免空指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改优惠卷秒杀的锁。将其设置为setnx。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">       <span class="comment">//1.查询优惠卷</span></span><br><span class="line">       <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">       <span class="comment">//2.判断秒杀是否开始</span></span><br><span class="line">       <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">           <span class="comment">//尚未开始</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//3.判断秒杀是否已经结束</span></span><br><span class="line">       <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">           <span class="comment">//已经结束</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//4.判断库存是否充足</span></span><br><span class="line">       <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">//库存不足</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">       <span class="comment">//创建锁对象</span></span><br><span class="line">       <span class="type">SimpleRedisLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">       <span class="comment">//获取锁</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1200</span>);</span><br><span class="line">       <span class="comment">//判断是否获取锁成功</span></span><br><span class="line">       <span class="keyword">if</span> (!isLock)&#123;</span><br><span class="line">           <span class="comment">//获取锁失败，返回错误或重试</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许重复下单&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//获取代理对象（事务）</span></span><br><span class="line">           <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">           <span class="keyword">return</span> proxy.createVoucherOrder(voucherId, voucher);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//释放锁</span></span><br><span class="line">           lock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h1 id="Redis分布式锁误删问题"><a href="#Redis分布式锁误删问题" class="headerlink" title="Redis分布式锁误删问题"></a>Redis分布式锁误删问题</h1><p><img src='https://pic.imgdb.cn/item/661e15270ea9cb1403f3e1c0.png'></p><p>业务变化<br><img src='https://pic.imgdb.cn/item/661e15350ea9cb1403f40605.png'></p><h2 id="解决Redis分布式锁误删问题"><a href="#解决Redis分布式锁误删问题" class="headerlink" title="解决Redis分布式锁误删问题"></a>解决Redis分布式锁误删问题</h2><p>需求：修改之前的分布式锁实现，满足：<br>1.在获取锁时存入线程标示（可以用UUID表示）<br>2.在释放锁时先获取锁中的线程标示，判断是否与当前线程标示一致<br>    如果一致则释放锁<br>    如果不一致则不释放锁</p><p>改善地方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX=<span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ID_PREFIX= UUID.randomUUID().toString(<span class="literal">true</span>)+<span class="string">&quot;-&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX+Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">                .setIfAbsent(KEY_PREFIX + name, threadId + <span class="string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success); <span class="comment">//自动拆箱，避免空指针</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX+Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁中的标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line">        <span class="comment">//判断标识是否一致</span></span><br><span class="line">        <span class="keyword">if</span> (threadId.equals(id))&#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">## 分布式锁的原子性问题</span><br><span class="line">&lt;img src=<span class="string">&#x27;https://pic.imgdb.cn/item/661e189b0ea9cb1403fa86e1.png&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"># Lua脚本解决多条命令原子性问题</span><br><span class="line">Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。Lua是一种编程语言，它的基本语法大家可以参考网站：https:<span class="comment">//www.runoob.com/lua/lua-tutorial.html</span></span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&#x27;https://pic.imgdb.cn/item/661e1da30ea9cb140303f51d.png&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&#x27;https://pic.imgdb.cn/item/661e1dcc0ea9cb1403043e49.png&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">释放锁的业务流程是这样的：</span><br><span class="line"><span class="number">1.</span>获取锁中的线程标示</span><br><span class="line"><span class="number">2.</span>判断是否与指定的标示（当前线程标示）一致</span><br><span class="line"><span class="number">3.</span>如果一致则释放锁（删除）</span><br><span class="line"><span class="number">4.</span>如果不一致则什么都不做</span><br><span class="line">如果用Lua脚本来表示则是这样的：</span><br><span class="line">&lt;img src=<span class="string">&#x27;https://pic.imgdb.cn/item/661e1e220ea9cb140304eb08.png&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">## Java调用Lua脚本改造分布式锁</span><br><span class="line">需求：基于Lua脚本实现分布式锁的释放锁逻辑</span><br><span class="line">提示：RedisTemplate调用Lua脚本的API如下：</span><br><span class="line">&lt;img src=<span class="string">&#x27;https://pic.imgdb.cn/item/661e32c60ea9cb14032acca3.png&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">在resources添加unlock.lua代码</span><br><span class="line">```lua</span><br><span class="line"><span class="title function_">if</span> <span class="params">(redis.call(<span class="string">&#x27;get&#x27;</span>,KEYS[<span class="number">1</span>])</span>==ARGV[<span class="number">1</span>]) then</span><br><span class="line">    --释放锁 del key</span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line">end</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><br>SimpleRedisLock完善地方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line">  <span class="comment">//在静态代码块里初始化</span></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">      UNLOCK_SCRIPT=<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">      UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">      UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//调用lua脚本</span></span><br><span class="line">      stringRedisTemplate.execute(</span><br><span class="line">              UNLOCK_SCRIPT,</span><br><span class="line">              Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">              ID_PREFIX+Thread.currentThread().getId()</span><br><span class="line">              );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>基于Redis的分布式锁实现思路：<br>1.利用set nx ex获取锁，并设置过期时间，保存线程标示<br>2.释放锁时先判断线程标示是否与自己一致，一致则删除锁</p><p>特性：<br>1.利用set nx满足互斥性<br>2.利用set ex保证故障时锁依然能释放，避免死锁，提高安全性<br>3.利用Redis集群保证高可用和高并发特性</p><h1 id="Redisson功能介绍"><a href="#Redisson功能介绍" class="headerlink" title="Redisson功能介绍"></a>Redisson功能介绍</h1><p>基于setnx实现的分布式锁存在下面的问题：<br><img src='https://pic.imgdb.cn/item/661e37100ea9cb1403308ab7.png'></p><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。<br><img src="https://img.picgo.net/2024/04/18/7HQ3HD97O1U5NNOCZ76dca6f46f9751f9ba.png"><br>官网地址： <a href="https://redisson.org">https://redisson.org</a><br>GitHub地址： <a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a></p><h1 id="Redisson快速入门"><a href="#Redisson快速入门" class="headerlink" title="Redisson快速入门"></a>Redisson快速入门</h1><p><img src="https://img.picgo.net/2024/04/18/4B1THN546_DG2L41PLQ39f7dc6cf52235c1.png"></p><p>3.使用Redisson的分布式锁<br><img src="https://img.picgo.net/2024/04/18/Z2AUTDLKOQQ5NDPXJb130dbd948c55cb1.png"></p><h2 id="Redisson的可重入锁原理"><a href="#Redisson的可重入锁原理" class="headerlink" title="Redisson的可重入锁原理"></a>Redisson的可重入锁原理</h2><p>java测试代码<br><img src="https://img.picgo.net/2024/04/18/JJHZ1QCJN5D80XX8NT4c9dedbe6fd5bcbe.png"></p><p>业务流程<br><img src="https://img.picgo.net/2024/04/18/VIO8AQ4CUOKW_568E_5T65a3af3f5be1cd37.png"></p><p>lua代码与其相应的步骤<br>获取锁<br><img src="https://img.picgo.net/2024/04/18/EGIZ77M3_MJ4NW91bbed26d4229cb12.png"></p><p>释放锁<br><img src="https://img.picgo.net/2024/04/18/TZHWIWSYLL5X1WEF4715434f9e453b10e8.png"></p><h2 id="Redisson的锁重试和WatchDog机制"><a href="#Redisson的锁重试和WatchDog机制" class="headerlink" title="Redisson的锁重试和WatchDog机制"></a>Redisson的锁重试和WatchDog机制</h2><p><img src="https://img.picgo.net/2024/04/18/K8NRZXIYF18HXIGKQCXa1eaf051b761bc5f.png"></p><p>Redisson分布式锁原理：<br>1.可重入：利用hash结构记录线程id和重入次数<br>2.可重试：利用信号量和PubSub功能实现等待、唤醒，获取锁失败的重试机制<br>3.超时续约：利用watchDog，每隔一段时间（releaseTime / 3），重置超时时间</p><h2 id="Redisson的multiLock原理"><a href="#Redisson的multiLock原理" class="headerlink" title="Redisson的multiLock原理"></a>Redisson的multiLock原理</h2><p>可建立或者不建立从结点<br><img src="https://img.picgo.net/2024/04/18/U4U33VLSIQGOA1BNRPG7eb55b0b750fe2d4.png"></p><p>新增代码<br><img src="https://img.picgo.net/2024/04/18/SBOPT8PS_P8DS8AKDFMN07c329091b8fce33.png"></p><p><img src="https://img.picgo.net/2024/04/18/OXFTGABBZ1LXYD4DNP56b771093370ac414.png"></p><p>1）不可重入Redis分布式锁：<br>原理：利用setnx的互斥性；利用ex避免死锁；释放锁时判断线程标示<br>缺陷：不可重入、无法重试、锁超时失效<br>2）可重入的Redis分布式锁：<br>原理：利用hash结构，记录线程标示和重入次数；利用watchDog延续锁时间；利用信号量控制锁重试等待<br>缺陷：redis宕机引起锁失效问题<br>3）Redisson的multiLock：<br>原理：多个独立的Redis节点，必须在所有节点都获取重入锁，才算获取锁成功<br>缺陷：运维成本高、实现复杂</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于原理和不同实现方式对比&quot;&gt;&lt;a href=&quot;#基于原理和不同实现方式对比&quot; class=&quot;headerlink&quot; title=&quot;基于原理和不同实现方式对比&quot;&gt;&lt;/a&gt;基于原理和不同实现方式对比&lt;/h1&gt;&lt;p&gt;&lt;img src=&#39;https://pic.imgd</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="redis实战项目" scheme="https://wjlgmw-github-io.vercel.app/tags/redis%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Jackson快速入门</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/cc38c3e.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/cc38c3e.html</id>
    <published>2024-04-16T11:27:34.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jackson-Maven-依赖"><a href="#Jackson-Maven-依赖" class="headerlink" title="Jackson Maven 依赖"></a>Jackson Maven 依赖</h1><p>在使用 Jackson 时，大多数情况下我们只需要添加 jackson-databind 依赖项，就可以使用 Jackson 功能了，它依赖了下面两个包<br><img src='https://pic.imgdb.cn/item/661df3090ea9cb1403b2708b.png'></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="ObjectMapper-对象映射器"><a href="#ObjectMapper-对象映射器" class="headerlink" title="ObjectMapper 对象映射器"></a>ObjectMapper 对象映射器</h1><p>ObjectMapper 是 Jackson 库中最常用的一个类，使用它可以进行 Java 对象和 JSON 字符串之间快速转换。如果你用过 FastJson，那么 Jackson 中的 ObjectMapper 就如同 FastJson 中的 JSON 类。</p><p>这个类中有一些常用的方法：<br>1.readValue() 方法可以进行 JSON 的反序列化操作，比如可以将字符串、文件流、字节流、字节数组等将常见的内容转换成 Java 对象。<br>2.writeValue() 方法可以进行 JSON 的序列化操作，可以将 Java 对象转换成 JSON 字符串。</p><h1 id="Jackson-JSON-基本操作"><a href="#Jackson-JSON-基本操作" class="headerlink" title="Jackson JSON 基本操作"></a>Jackson JSON 基本操作</h1><h2 id="Jackson-JSON-序列化"><a href="#Jackson-JSON-序列化" class="headerlink" title="Jackson JSON 序列化"></a>Jackson JSON 序列化</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Jackson-Maven-依赖&quot;&gt;&lt;a href=&quot;#Jackson-Maven-依赖&quot; class=&quot;headerlink&quot; title=&quot;Jackson Maven 依赖&quot;&gt;&lt;/a&gt;Jackson Maven 依赖&lt;/h1&gt;&lt;p&gt;在使用 Jackson 时，</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="JSON解析" scheme="https://wjlgmw-github-io.vercel.app/tags/JSON%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>框架面试</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/c6a26601.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/c6a26601.html</id>
    <published>2024-04-16T00:03:24.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src='https://pic.imgdb.cn/item/661d51440ea9cb1403e6374f.png'></p><h1 id="Spring框架中的单例bean是线程安全的吗？"><a href="#Spring框架中的单例bean是线程安全的吗？" class="headerlink" title="Spring框架中的单例bean是线程安全的吗？"></a>Spring框架中的单例bean是线程安全的吗？</h1><h2 id="Spring框架中的bean是单例的吗？"><a href="#Spring框架中的bean是单例的吗？" class="headerlink" title="Spring框架中的bean是单例的吗？"></a>Spring框架中的bean是单例的吗？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>singleton : bean在每个Spring IOC容器中只有一个实例。<br>prototype：一个bean的定义可以有多个实例。<br><u>不是线程安全的</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;    <span class="comment">//成员方法需考虑线程安全  </span></span><br><span class="line">     <span class="meta">@Autowired</span>    </span><br><span class="line">     <span class="keyword">private</span> UserService userService;    </span><br><span class="line">     <span class="meta">@GetMapping(&quot;/getById/&#123;id&#125;&quot;)</span>   </span><br><span class="line">      <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;   </span><br><span class="line">             count++;       </span><br><span class="line">             System.out.println(count);        </span><br><span class="line">             <span class="keyword">return</span> userService.getById(id);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring bean并没有可变的状态(比如Service类和DAO类)，所以在某种程度上说Spring的单例bean是线程安全的。</p><p>回答：<br>不是线程安全的<br>Spring框架中有一个@Scope注解，默认的值就是singleton，单例的。<br>因为一般在spring的bean的中都是注入无状态的对象，没有线程安全问题，如果在bean中定义了可修改的成员变量，是要考虑线程安全问题的，可以使用多例或者加锁来解决</p><p>面试<br><img src='https://pic.imgdb.cn/item/661d565c0ea9cb1403ea4ecd.png'><br>无状态的类-&gt;不能被修改的成员变量</p><h1 id="Spring-AOP相关面试"><a href="#Spring-AOP相关面试" class="headerlink" title="Spring-AOP相关面试"></a>Spring-AOP相关面试</h1><p>AOP称为面向切面编程，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。</p><p>常见的AOP使用场景：<br>1.记录操作日志<br>2.缓存处理<br>3.Spring中内置的事务处理</p><h2 id="记录操作日志思路"><a href="#记录操作日志思路" class="headerlink" title="记录操作日志思路"></a>记录操作日志思路</h2><p><img src='https://pic.imgdb.cn/item/661d5a240ea9cb1403ef5be0.png'><br>获取请求的用户名、请求方式、访问地址、模块名称、登录ip、操作时间，记录到数据库的日志表中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.PARAMETER, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模块名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>   <span class="comment">//切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.itheima.annotation.Log)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//获取用户名</span></span><br><span class="line">        <span class="comment">//需要通过解析seesion或token获取</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取被增强类和方法的信息</span></span><br><span class="line">        <span class="comment">/* Signature signature = joinPoint.getSignature();</span></span><br><span class="line"><span class="comment">        MethodSignature methodSignature = (MethodSignature) signature;</span></span><br><span class="line"><span class="comment">        //获取被增强的方法对象</span></span><br><span class="line"><span class="comment">        Method method = methodSignature.getMethod();</span></span><br><span class="line"><span class="comment">        //从方法中解析注解</span></span><br><span class="line"><span class="comment">        if(method != null)&#123;</span></span><br><span class="line"><span class="comment">            Log logAnnotation = method.getAnnotation(Log.class);</span></span><br><span class="line"><span class="comment">            System.out.println(logAnnotation.name());</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //方法名字</span></span><br><span class="line"><span class="comment">        String name = method.getName();</span></span><br><span class="line"><span class="comment">        System.out.println(name);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //通过工具类获取Request对象</span></span><br><span class="line"><span class="comment">        RequestAttributes reqa = RequestContextHolder.getRequestAttributes();</span></span><br><span class="line"><span class="comment">        ServletRequestAttributes sra = (ServletRequestAttributes)reqa;</span></span><br><span class="line"><span class="comment">        HttpServletRequest request = sra.getRequest();</span></span><br><span class="line"><span class="comment">        //访问的url</span></span><br><span class="line"><span class="comment">        String url = request.getRequestURI().toString();</span></span><br><span class="line"><span class="comment">        System.out.println(url);</span></span><br><span class="line"><span class="comment">        //请求方式</span></span><br><span class="line"><span class="comment">        String methodName = request.getMethod();</span></span><br><span class="line"><span class="comment">        System.out.println(methodName);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //登录IP</span></span><br><span class="line"><span class="comment">        String ipAddr = getIpAddr(request);</span></span><br><span class="line"><span class="comment">        System.out.println(ipAddr);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //操作时间</span></span><br><span class="line"><span class="comment">        System.out.println(new Date());*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存到数据库（操作日志）</span></span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在对面的方法上面加上标识符</p><h2 id="Spring中的事务是如何实现的"><a href="#Spring中的事务是如何实现的" class="headerlink" title="Spring中的事务是如何实现的"></a>Spring中的事务是如何实现的</h2><p>Spring支持编程式事务管理和声明式事务管理两种方式。<br>1.编程式事务控制：需使用TransactionTemplate来进行实现，对业务代码有侵入性，项目中很少使用<br>2.声明式事务管理：声明式事务管理建立在AOP之上的。其本质是通过AOP功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p><h2 id="面试回答"><a href="#面试回答" class="headerlink" title="面试回答"></a>面试回答</h2><h3 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h3><p>面向切面编程，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取公共模块复用，降低耦合</p><h2 id="你们项目中有没有使用到AOP"><a href="#你们项目中有没有使用到AOP" class="headerlink" title="你们项目中有没有使用到AOP"></a>你们项目中有没有使用到AOP</h2><p>记录操作日志，缓存，spring实现的事务<br>核心是：使用aop中的环绕通知+切点表达式（找到要记录日志的方法），通过环绕通知的参数获取请求方法的参数（类、方法、注解、请求方式等），获取到这些参数以后，保存到数据库</p><h2 id="Spring中的事务是如何实现的-1"><a href="#Spring中的事务是如何实现的-1" class="headerlink" title="Spring中的事务是如何实现的"></a>Spring中的事务是如何实现的</h2><p>其本质是通过AOP功能，对方法前后进行拦截，在执行方法之前开启事务，在执行完目标方法之后根据执行情况提交或者回滚事务。（一般只说声明事务管理）</p><p>面试<br><div class="tip info"><p>面试官：什么是AOP<br>候选人：<br>aop是面向切面编程，在spring中用于将那些与业务无关，但却对多个对象产<br>生影响的公共行为和逻辑，抽取公共模块复用，降低耦合，一般比如可以做<br>为公共日志保存，事务处理等<br>面试官：你们项目中有没有使用到AOP<br>候选人：<br>我们当时在后台管理系统中，就是使用aop来记录了系统的操作日志<br>主要思路是这样的，使用aop中的环绕通知+切点表达式，这个表达式就是要<br>找到要记录日志的方法，然后通过环绕通知的参数获取请求方法的参数，比<br>如类信息、方法信息、注解、请求方式等，获取到这些参数以后，保存到数<br>据库<br>面试官：Spring中的事务是如何实现的<br>候选人：<br>spring实现的事务本质就是aop完成，对方法前后进行拦截，在执行方法之前<br>开启事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p></div></p><h1 id="Spring-事务失效的场景"><a href="#Spring-事务失效的场景" class="headerlink" title="Spring-事务失效的场景"></a>Spring-事务失效的场景</h1><p>Spring中事务失效的场景有哪些<br>1.异常捕获处理<br>2.抛出检查异常<br>3.非public方法<br><img src='https://pic.imgdb.cn/item/661d602e0ea9cb1403f65ff0.png'></p><p><img src='https://pic.imgdb.cn/item/661d603b0ea9cb1403f66d2b.png'></p><p><img src='https://pic.imgdb.cn/item/661d60510ea9cb1403f68103.png'></p><p>回答：<br>异常捕获处理，自己处理了异常，没有抛出，解决：手动抛出<br>抛出检查异常，配置rollbackFor属性为Exception<br>非public方法导致的事务失效，改为public</p><p>面试<br><div class="tip info"><p>面试官：Spring中事务失效的场景有哪些<br>候选人：<br>嗯！这个在项目中之前遇到过，我想想啊<br>第一个，如果方法上异常捕获处理，自己处理了异常，没有抛出，就会导致<br>事务失效，所以一般处理了异常以后，别忘了抛出去就行了<br>第二个，如果方法抛出检查异常，如果报错也会导致事务失效，最后在<br>spring事务的注解上，就是@Transactional上配置rollbackFor属性为<br>Exception，这样别管是什么异常，都会回滚事务<br>第三，我之前还遇到过一个，如果方法上不是public修饰的，也会导致事务<br>失效<br>嗯，就能想起来那么多</p></div></p><h1 id="Spring-bean的生命周期"><a href="#Spring-bean的生命周期" class="headerlink" title="Spring-bean的生命周期"></a>Spring-bean的生命周期</h1><p>BeanDefinition<br>Spring容器在进行实例化时，会将xml配置的<bean>的信息封装成一个BeanDefinition对象，Spring根据BeanDefinition来创建Bean对象，里面有很多的属性用来描述Bean<br><img src="https://img.picgo.net/2024/04/18/J3EDIT_FCXAVRSJF9WI66b24cced8e074d09.png"></p><ul><li>beanClassName：bean 的类名</li><li>initMethodName：初始化方法名称</li><li>properryValues：bean 的属性值</li><li>scope：作用域</li><li>lazyInit：延迟初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">BeanNameAware</span>, BeanFactoryAware, ApplicationContextAware, InitializingBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User的构造方法执行了.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName方法执行了.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setBeanName方法执行了.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setBeanFactory方法执行了.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setApplicationContext方法执行了........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init方法执行了.................&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterPropertiesSet方法执行了........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destory方法执行了...............&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanName.equals(<span class="string">&quot;user&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;postProcessBeforeInitialization方法执行了-&gt;user对象初始化方法前开始增强....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanName.equals(<span class="string">&quot;user&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;postProcessAfterInitialization-&gt;user对象初始化方法后开始增强....&quot;</span>);</span><br><span class="line">            <span class="comment">//cglib代理对象</span></span><br><span class="line">            <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">            <span class="comment">//设置需要增强的类</span></span><br><span class="line">            enhancer.setSuperclass(bean.getClass());</span><br><span class="line">            <span class="comment">//执行回调方法，增强方法</span></span><br><span class="line">            enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    <span class="comment">//执行目标方法</span></span><br><span class="line">                    <span class="keyword">return</span> method.invoke(method,objects);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//创建代理对象</span></span><br><span class="line">            <span class="keyword">return</span> enhancer.create();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring的bean的生命周期<br>1.通过BeanDefinition获取bean的定义信息<br>2.调用构造函数实例化bean<br>3.bean的依赖注入<br>4.处理Aware接口(BeanNameAware、BeanFactoryAware、ApplicationContextAware)<br>5.Bean的后置处理器BeanPostProcessor-前置<br>6.初始化方法(InitializingBean、init-method)<br>7.Bean的后置处理器BeanPostProcessor-后置<br>8.销毁bean</p><div class="tip info"><p>面试官：Spring的bean的生命周期<br>候选人：<br>嗯！，这个步骤还是挺多的，我之前看过一些源码，它大概流程是这样的<br>首先会通过一个非常重要的类，叫做BeanDefinition获取bean的定义信息，<br>这里面就封装了bean的所有信息，比如，类的全路径，是否是延迟加载，是<br>否是单例等等这些信息<br>在创建bean的时候，第一步是调用构造函数实例化bean<br>第二步是bean的依赖注入，比如一些set方法注入，像平时开发用的<br>@Autowire都是这一步完成<br>第三步是处理Aware接口，如果某一个bean实现了Aware接口就会重写方法<br>执行<br>第四步是bean的后置处理器BeanPostProcessor，这个是前置处理器<br>第五步是初始化方法，比如实现了接口InitializingBean或者自定义了方法<br>init-method标签或@PostContruct<br>第六步是执行了bean的后置处理器BeanPostProcessor，主要是对bean进行<br>增强，有可能在这里产生代理对象<br>最后一步是销毁bean</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h1&gt;&lt;p&gt;&lt;img src=&#39;https://pic.imgdb.cn/item/661d51440ea9cb1403e6374f.png&#39;&gt;&lt;/p&gt;</summary>
      
    
    
    
    <category term="面试" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="框架面试" scheme="https://wjlgmw-github-io.vercel.app/tags/%E6%A1%86%E6%9E%B6%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>使用DOM操纵图片</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/10da5fae.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/10da5fae.html</id>
    <published>2024-04-15T23:03:02.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8"><title>练习5：DOM操作</title></head><body><div id="cont_left"><ul><img src="../img/siteicon/fold.gif"><a onclick="show('menu1')"> 通过DOM获取信息 </a><ul id="menu1"><li onclick="showImg()"><img src="../img/siteicon/doc.gif">获取原始图片路径</li><li onclick="getFruit()"><img src="../img/siteicon/doc.gif">获取我喜欢的水果</li></ul></ul><ul><img src="../img/siteicon/fold.gif"><a onclick="show('menu2')"> 通过DOM操作元素 </a><ul id="menu2"><li onclick="createImg()"><img src="../img/siteicon/doc.gif">创建图片</li><li onclick="cloneImg()"><img src="../img/siteicon/doc.gif">克隆图片</li><li onclick="changeImg()"><img src="../img/siteicon/doc.gif">改变图片</li><li onclick="removeImg()"><img src="../img/siteicon/doc.gif">删除图片</li></ul></ul><ul><img src="../img/siteicon/fold.gif"><a onclick="show('menu3')"> 通过DOM操作样式 </a><ul id="menu3"><li onclick="changeCss1()"><img src="../img/siteicon/doc.gif">为原始图片加上行间样式</li><li onclick="changeCss2()"><img src="../img/siteicon/doc.gif">为所有的fieldset加上内部样式</li></ul></ul></div><fieldset><legend>原始图片</legend><img id="fruit" src="../img/siteicon/fruit.jpg"></fieldset><fieldset><legend>图片路径</legend><p id="msg1">在这里显示</p></fieldset><fieldset><legend>选择你喜欢的水果</legend><ul style="text-align: left;"><li><input name="enjoy" type="checkbox" value="苹果" />苹果</li><li><input name="enjoy" type="checkbox" value="香蕉" checked="checked" />香蕉</li><li><input name="enjoy" type="checkbox" value="葡萄" />葡萄</li><li><input name="enjoy" type="checkbox" value="梨" checked="checked" />梨</li><li><input name="enjoy" type="checkbox" value="西瓜" />西瓜</li></ul><div id="msg2" style="margin-top: 10px;text-align: left;"></div></fieldset><fieldset><legend>创建图片</legend><div id="msg3"></div></fieldset><fieldset><legend>克隆图片</legend><div id="msg4"></div></fieldset><script>//菜单收缩与扩展function show(title) {let currentMenu = document.getElementById(title);let currentStatus = currentMenu.style.display;currentMenu.style.display = currentStatus == "" ? "none" : "";}//获取原始图片路径function showImg() {var text = document.getElementById('msg1'); //获取需要输出地方的文本         var src = document.getElementById('fruit').src;      //获取原始图片的srctext.innerHTML = src;  //将原始图片的src赋予text   }//获取喜欢的水果function getFruit() {var a = document.getElementsByName('enjoy'); //获取name为enjoy的元素document.getElementById('msg2').innerHTML = "你最喜欢的水果是："; //获取需要输出地方的文本内容//for循环 追加写入水果for (var i = 0; i <= a.length; i++) {if (a[i].checked == true) {document.getElementById('msg2').innerHTML += a[i].value + " ";}}}//创建图片function createImg() {var msg3 = document.getElementById('msg3'); //获取id元素var im = document.createElement('img'); //创建图片im.src = "../img/siteicon/grape.jpg";   //选取想要创建的图片msg3.appendChild(im); //图片挂载到id上}//克隆图片function cloneImg() {var msg4 = document.getElementById('msg4'); //获取id元素var cloneim = document.getElementById('fruit'); //获取图片idmsg4.appendChild(cloneim.cloneNode());  //图片挂载到id上}//改变图片function changeImg() {var msg5 = document.getElementById('fruit'); //获取id元素msg5.src = "../img/siteicon/grape.jpg"; //更改src}//删除图片function removeImg() {var msg6 = document.getElementById('fruit'); //获取id元素msg6.parentNode.removeChild(msg6); //删除父节点}//操作样式1function changeCss1() {var ele = document.getElementById('fruit'); //获取idele.style.border = 'solid 4px red';  //改变border样式}//操作样式2function changeCss2() {var ele = document.getElementsByTagName('fieldset');for (var i = 0; i < ele.length; i++) {ele[i].style.backgroundColor = "green"}}</script></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;&gt;
	&lt;title&gt;练习5：DOM操作&lt;/title&gt;
	
&lt;/head&gt;

&lt;body&gt;
	&lt;div id=&quot;cont_left&quot;&gt;
		&lt;ul&gt;&lt;img src=&quot;../</summary>
      
    
    
    
    <category term="前端js" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%89%8D%E7%AB%AFjs/"/>
    
    
    <category term="前端" scheme="https://wjlgmw-github-io.vercel.app/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/5729df21.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/5729df21.html</id>
    <published>2024-04-13T19:47:57.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是多线程"><a href="#什么是多线程" class="headerlink" title="什么是多线程"></a>什么是多线程</h1><p>线程是操作系统能够进行运行调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。<br>简单理解：应用软件中互相独立，可以同行运行的功能<br><img src='https://pic.imgdb.cn/item/661a934e68eb935713a14d83.png'></p><h1 id="多线程的两个概念"><a href="#多线程的两个概念" class="headerlink" title="多线程的两个概念"></a>多线程的两个概念</h1><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>并发：在同一时刻，有多个指令在单个CPU上<u>交替</u>执行</p><h2 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h2><p>并行：在同一时刻，有多个指令在多个CPU上<u>同时</u>执行</p><h1 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h1><p>1.继承Thread类的方式进行实现<br>2.实现Runnable接口的方式进行实现<br>3.利用Callable接口和Future接口方式实现</p><h2 id="继承Thread类的方式进行实现"><a href="#继承Thread类的方式进行实现" class="headerlink" title="继承Thread类的方式进行实现"></a>继承Thread类的方式进行实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//书写线程要执行代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 多线程的第一种启动方式：</span></span><br><span class="line"><span class="comment">         * 1.自己第一个类继承Thread</span></span><br><span class="line"><span class="comment">         * 2.重写run方法</span></span><br><span class="line"><span class="comment">         * 3.创建子类对象，并启动线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现Runnable接口的方式进行实现"><a href="#实现Runnable接口的方式进行实现" class="headerlink" title="实现Runnable接口的方式进行实现"></a>实现Runnable接口的方式进行实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRun</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//书写线程要执行代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//获取到当前线程的对象</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            System.out.println(t.getName()+<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 多线程的第二钟启动方式：</span></span><br><span class="line"><span class="comment">         * 1.自己定义一个类实现Runnable接口</span></span><br><span class="line"><span class="comment">         * 2.重写里面的run方法</span></span><br><span class="line"><span class="comment">         * 3.创建自己的类的对象</span></span><br><span class="line"><span class="comment">         * 4.创建一个Thread类的对象，并开启线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建MyRun的对象</span></span><br><span class="line">        <span class="comment">//表示多线程要执行的任务</span></span><br><span class="line">        <span class="type">MyRun</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRun</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给线程设置名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用Callable接口和Future接口方式实现"><a href="#利用Callable接口和Future接口方式实现" class="headerlink" title="利用Callable接口和Future接口方式实现"></a>利用Callable接口和Future接口方式实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//求1~100之间的和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum = sum + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 多线程的第三种实现方式：</span></span><br><span class="line"><span class="comment">         * 特点：可以获取到多线程运行的结果</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 1.创建一个类MyCallable实现Callable接口</span></span><br><span class="line"><span class="comment">         * 2.重写call（是有返回值的，表示多线程运行的结果）</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3.创建MyCallable的对象（表示多线程要执行的任务）</span></span><br><span class="line"><span class="comment">         * 4.创建FutureTask的对象（作用管理多线程运行的结果）</span></span><br><span class="line"><span class="comment">         * 5.创建Thread类的对象，并启动（表示线程）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建MyCallable的对象（表示多线程要执行的任务）</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">        <span class="comment">//创建FutureTask的对象（作用管理多线程运行的结果）</span></span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line">        <span class="comment">//创建线程的对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取多线的结果</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> ft.get();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三种方式对比"><a href="#三种方式对比" class="headerlink" title="三种方式对比"></a>三种方式对比</h2><p><img src='https://pic.imgdb.cn/item/661a9e0c68eb935713ad6736.png'></p><h1 id="常见的成员方法"><a href="#常见的成员方法" class="headerlink" title="常见的成员方法"></a>常见的成员方法</h1><p><img src='https://pic.imgdb.cn/item/661aa2f368eb935713b3cfc2.png'></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//书写线程要执行代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  String getName()  返回此线程的名称</span></span><br><span class="line"><span class="comment">         *  void setName（String name） 设置线程的名字（构造方法也可也以）</span></span><br><span class="line"><span class="comment">         *  细节：</span></span><br><span class="line"><span class="comment">         *  1.如果我们没有给线程设置名字,线程也是有默认的名字的</span></span><br><span class="line"><span class="comment">         *          格式：Thread-X(X序号，从0开始的)</span></span><br><span class="line"><span class="comment">         *  2.如果我们要给线程设置名字，可以用set方法进行设置，也可也构造方法设置</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  static Thread currentThread()  获取当前线程的对象</span></span><br><span class="line"><span class="comment">         *  细节：</span></span><br><span class="line"><span class="comment">         *      当JVm虚拟机启动之后，会自动的启动多条线程</span></span><br><span class="line"><span class="comment">         *      其中有一条线程就叫做mian线程</span></span><br><span class="line"><span class="comment">         *      它的作用就是去调用mian方法，并执行里面的代码</span></span><br><span class="line"><span class="comment">         *      在以前，我们写的所有代码，其实都是运行在mian线程当中</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  static void sleep(long time)  让线程休眠指定的时间，单位为毫秒</span></span><br><span class="line"><span class="comment">         *  细节：</span></span><br><span class="line"><span class="comment">         *      1.哪条线程执行到这个方法，那么哪条线程就会在这里停留对应的时间</span></span><br><span class="line"><span class="comment">         *      2.方法的参数：就表示睡眠的时间，单位为毫秒</span></span><br><span class="line"><span class="comment">         *          1秒=1000毫秒</span></span><br><span class="line"><span class="comment">         *      3.当时间到了之后，线程会自动的醒来，继续执行下面的其他代码</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建线程的对象</span></span><br><span class="line">     <span class="comment">/*   MyThread t1 = new MyThread(&quot;飞机&quot;);</span></span><br><span class="line"><span class="comment">        MyThread t2 = new MyThread(&quot;坦克&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //2.开启线程</span></span><br><span class="line"><span class="comment">        t1.start();</span></span><br><span class="line"><span class="comment">        t2.start();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//哪条线程执行到这个方法，此时获取的就是哪条线程的对象</span></span><br><span class="line">       <span class="comment">/* Thread t = Thread.currentThread();</span></span><br><span class="line"><span class="comment">        String name = t.getName();</span></span><br><span class="line"><span class="comment">        System.out.println(name);*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;111111&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;22222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-----&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  setPriority(int newPriority)  设置线程的优先级  默认优先级是5</span></span><br><span class="line"><span class="comment">         *  final int getPriority()  获取线程的优先级</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程要执行的参数对象</span></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;坦克&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*     System.out.println(t1.getPriority());</span></span><br><span class="line"><span class="comment">        System.out.println(t2.getPriority());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println(Thread.currentThread().getPriority());*/</span></span><br><span class="line">        t1.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.setPriority(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">            final void setDaemon(boolean on)    设置为守护线程</span></span><br><span class="line"><span class="comment">            细节：</span></span><br><span class="line"><span class="comment">                当其他的非守护线程执行完毕之后，守护线程会陆续结束</span></span><br><span class="line"><span class="comment">            通俗易懂：</span></span><br><span class="line"><span class="comment">                当女神线程结束了，那么备胎也没有存在的必要了</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;女神&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;备胎&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把第二个线程设置为守护线程（备胎线程）</span></span><br><span class="line">        t2.setDaemon(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应用场景<br><img src='https://pic.imgdb.cn/item/661aa84f68eb935713ba4c0f.png'><br>当线程1取消掉，那么线程2会自动挂掉</p><h2 id="礼让线程"><a href="#礼让线程" class="headerlink" title="礼让线程"></a>礼让线程</h2><p>尽量的让线程CPU的执行权均匀点<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//&quot;飞机&quot;  &quot;坦克&quot;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line">            <span class="comment">//表示出让当前CPU的执行权</span></span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public static void yield()      出让线程/礼让线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;坦克&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入线程"><a href="#插入线程" class="headerlink" title="插入线程"></a>插入线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public final void join()  插入线程/插队线程</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        t.setName(<span class="string">&quot;土豆&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示把t这个线程，插入到当前线程之前。</span></span><br><span class="line">        <span class="comment">//t:土豆</span></span><br><span class="line">        <span class="comment">//当前线程: main线程</span></span><br><span class="line">        t.join();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行在main线程当中的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><p><img src='https://pic.imgdb.cn/item/661de6650ea9cb14039c3c59.png'></p><h1 id="线程的安全问题"><a href="#线程的安全问题" class="headerlink" title="线程的安全问题"></a>线程的安全问题</h1><p>某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示这个类所有的对象，都共享ticket数据</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//0 ~ 99</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">//synchronized (MyThread.class) &#123;</span></span><br><span class="line">                <span class="comment">//同步代码块</span></span><br><span class="line">                <span class="keyword">if</span> (ticket &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    ticket++;</span><br><span class="line">                    System.out.println(getName() + <span class="string">&quot;正在卖第&quot;</span> + ticket + <span class="string">&quot;张票！！！&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">           需求：</span></span><br><span class="line"><span class="comment">                某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//起名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>卖票出现了问题</p><ul><li><p>相同的票出现了多次</p></li><li><p>出现了负数的票</p></li></ul></li><li><p>问题产生原因</p><p>线程执行的随机性导致的,可能在卖票过程中丢失cpu的执行权,导致出现问题</p></li></ul><h1 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h1><p>  <img src="https://img.picgo.net/2024/04/19/HIXT1MRYNXORN2SDU8H6a21f8ecbe10d1e6c.png"></p><ul><li>安全问题出现的条件<ul><li>是多线程环境</li><li>有共享数据</li><li>有多条语句操作共享数据</li></ul></li><li>如何解决多线程安全问题呢?<ul><li>基本思想：让程序没有安全问题的环境</li></ul></li><li>怎么实现呢?<ul><li>把多条语句操作共享数据的代码给锁起来，让任意时刻只能有一个线程执行即可</li><li>Java提供了同步代码块的方式来解决</li></ul></li><li>同步代码块格式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(任意对象) &#123; </span><br><span class="line">多条语句操作共享数据的代码 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>synchronized(任意对象)：就相当于给代码加锁了，任意对象就可以看成是一把锁</li><li>同步的好处和弊端  <ul><li>好处：解决了多线程的数据安全问题</li><li>弊端：当线程很多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率</li></ul></li><li>代码演示<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123; <span class="comment">// 对可能有安全问题的代码加锁,多个线程必须使用同一把锁</span></span><br><span class="line">                <span class="comment">//t1进来后，就会把这段代码给锁起来</span></span><br><span class="line">                <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                        <span class="comment">//t1休息100毫秒</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//窗口1正在出售第100张票</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在出售第&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    tickets--; <span class="comment">//tickets = 99;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//t1出来了，这段代码的锁就被释放了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicketDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SellTicket</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="同步代码块的两个小细节"><a href="#同步代码块的两个小细节" class="headerlink" title="同步代码块的两个小细节"></a>同步代码块的两个小细节</h1><p>1.synchronized锁要放在循环里面<br>2.synchronized锁要是唯一的</p><h1 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h1><p><img src="https://img.picgo.net/2024/04/19/N73VASXR6ZGLG59ZVH8Dc2b1a27fdb01d892.png" alt="N73VASXR6ZGLG59ZVH8Dc2b1a27fdb01d892.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//2.同步代码块（同步方法）</span></span><br><span class="line">            <span class="keyword">if</span> (method()) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//this</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//3.判断共享数据是否到了末尾，如果到了末尾</span></span><br><span class="line">        <span class="keyword">if</span> (ticket == <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//4.判断共享数据是否到了末尾，如果没有到末尾</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            ticket++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在卖第&quot;</span> + ticket + <span class="string">&quot;张票！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">           需求：</span></span><br><span class="line"><span class="comment">                某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票</span></span><br><span class="line"><span class="comment">                利用同步方法完成</span></span><br><span class="line"><span class="comment">                技巧：同步代码块</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="lock锁"><a href="#lock锁" class="headerlink" title="lock锁"></a>lock锁</h1><p><img src="https://img.picgo.net/2024/04/19/D0L_642SR2K_N68B035fd06d7fcd7730.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.循环</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//2.同步代码块</span></span><br><span class="line">            <span class="comment">//synchronized (MyThread.class)&#123;</span></span><br><span class="line">            lock.lock(); <span class="comment">//2 //3</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//3.判断</span></span><br><span class="line">                <span class="keyword">if</span>(ticket == <span class="number">100</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">//4.判断</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    ticket++;</span><br><span class="line">                    System.out.println(getName() + <span class="string">&quot;在卖第&quot;</span> + ticket + <span class="string">&quot;张票！！！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//  &#125;</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">           需求：</span></span><br><span class="line"><span class="comment">                某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票</span></span><br><span class="line"><span class="comment">                用JDK5的lock实现</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p><img src="https://img.picgo.net/2024/04/19/KX758SCPIQ54OBJKX90ba517ccd5a6e039.png"></p><p>出现的情况<br><img src="https://img.picgo.net/2024/04/19/72Z9_Q2ZNHF5O88BJ1796aa77a0e50e04.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">objA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">objB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;线程A&quot;</span>.equals(getName())) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (objA) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程A拿到了A锁，准备拿B锁&quot;</span>);<span class="comment">//A</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (objB) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;线程A拿到了B锁，顺利执行完一轮&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;线程B&quot;</span>.equals(getName())) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;线程B&quot;</span>.equals(getName())) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (objB) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;线程B拿到了B锁，准备拿A锁&quot;</span>);<span class="comment">//B</span></span><br><span class="line">                        <span class="keyword">synchronized</span> (objA) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;线程B拿到了A锁，顺利执行完一轮&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">           需求：</span></span><br><span class="line"><span class="comment">                死锁</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程A&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程B&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="等待唤醒机制的思路分析"><a href="#等待唤醒机制的思路分析" class="headerlink" title="等待唤醒机制的思路分析"></a>等待唤醒机制的思路分析</h1><p>消费者等待<br><img src="https://img.picgo.net/2024/04/19/45L3SWII1S6U7OMFTUJafac6546879ef462.png"><br>生产者等待<br><img src="https://img.picgo.net/2024/04/19/UH0IANI3HYQZCWY9KFIP69a88739f26ab0c8.png"><br>等待唤醒机制<br><img src="https://img.picgo.net/2024/04/19/6ZPLTSMNECT5I52CWDY866623e56dc327eac.png"><br>常见方法<br><img src="https://img.picgo.net/2024/04/19/SBI0F_MKOBXCQN0688fd59ed7b27b0.png"></p><h1 id="等待唤醒机制-消费者代码实现"><a href="#等待唤醒机制-消费者代码实现" class="headerlink" title="等待唤醒机制(消费者代码实现)"></a>等待唤醒机制(消费者代码实现)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Desk</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 作用：控制生产者和消费者的执行</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否有面条  0：没有面条  1：有面条</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">foodFlag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//总个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//锁对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foodie</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 1. 循环</span></span><br><span class="line"><span class="comment">        * 2. 同步代码块</span></span><br><span class="line"><span class="comment">        * 3. 判断共享数据是否到了末尾（到了末尾）</span></span><br><span class="line"><span class="comment">        * 4. 判断共享数据是否到了末尾（没有到末尾，执行核心逻辑）</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Desk.lock)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Desk.count == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//先判断桌子上是否有面条</span></span><br><span class="line">                    <span class="keyword">if</span>(Desk.foodFlag == <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="comment">//如果没有，就等待</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Desk.lock.wait();<span class="comment">//让当前线程跟锁进行绑定</span></span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//把吃的总数-1</span></span><br><span class="line">                        Desk.count--;</span><br><span class="line">                        <span class="comment">//如果有，就开吃</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;吃货在吃面条，还能再吃&quot;</span> + Desk.count + <span class="string">&quot;碗！！！&quot;</span>);</span><br><span class="line">                        <span class="comment">//吃完之后，唤醒厨师继续做</span></span><br><span class="line">                        Desk.lock.notifyAll();</span><br><span class="line">                        <span class="comment">//修改桌子的状态</span></span><br><span class="line">                        Desk.foodFlag = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="等待唤醒机制-生产者代码实现"><a href="#等待唤醒机制-生产者代码实现" class="headerlink" title="等待唤醒机制(生产者代码实现)"></a>等待唤醒机制(生产者代码实现)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cook</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 1. 循环</span></span><br><span class="line"><span class="comment">         * 2. 同步代码块</span></span><br><span class="line"><span class="comment">         * 3. 判断共享数据是否到了末尾（到了末尾）</span></span><br><span class="line"><span class="comment">         * 4. 判断共享数据是否到了末尾（没有到末尾，执行核心逻辑）</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Desk.lock)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Desk.count == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//判断桌子上是否有食物</span></span><br><span class="line">                    <span class="keyword">if</span>(Desk.foodFlag == <span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="comment">//如果有，就等待</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Desk.lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//如果没有，就制作食物</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;厨师做了一碗面条&quot;</span>);</span><br><span class="line">                        <span class="comment">//修改桌子上的食物状态</span></span><br><span class="line">                        Desk.foodFlag = <span class="number">1</span>;</span><br><span class="line">                        <span class="comment">//叫醒等待的消费者开吃</span></span><br><span class="line">                        Desk.lock.notifyAll();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       *    需求：完成生产者和消费者（等待唤醒机制）的代码</span></span><br><span class="line"><span class="comment">       *         实现线程轮流交替执行的效果</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程的对象</span></span><br><span class="line">        <span class="type">Cook</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cook</span>();</span><br><span class="line">        <span class="type">Foodie</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foodie</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给线程设置名字</span></span><br><span class="line">        c.setName(<span class="string">&quot;厨师&quot;</span>);</span><br><span class="line">        f.setName(<span class="string">&quot;吃货&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        c.start();</span><br><span class="line">        f.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阻塞队列实现等待唤醒机制"><a href="#阻塞队列实现等待唤醒机制" class="headerlink" title="阻塞队列实现等待唤醒机制"></a>阻塞队列实现等待唤醒机制</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是多线程&quot;&gt;&lt;a href=&quot;#什么是多线程&quot; class=&quot;headerlink&quot; title=&quot;什么是多线程&quot;&gt;&lt;/a&gt;什么是多线程&lt;/h1&gt;&lt;p&gt;线程是操作系统能够进行运行调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。&lt;br&gt;简单理解：应用</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="多线程" scheme="https://wjlgmw-github-io.vercel.app/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>黑马点评-优惠卷秒杀-redis</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/7f197c2e.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/7f197c2e.html</id>
    <published>2024-04-13T13:22:10.000Z</published>
    <updated>2024-04-21T13:04:10.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h1><p>每个店铺都可以发布优惠券：<br><img src='https://pic.imgdb.cn/item/661a360568eb93571333f0d4.png'></p><p>当用户抢购时，就会生成订单并保存到tb_voucher_order这张表中，而订单表如果使用数据库自增ID就存在一些问题：<br>1.id的规律性太明显(容易让用户猜到一天有多少订单量)<br>2.受单表数据量的限制（随着我们商城规模越来越大，mysql的单表的容量不宜超过500W）</p><p>全局ID生成器，是一种在分布式系统下用来生成全局唯一ID的工具，一般要满足下列特性：<br><img src='https://pic.imgdb.cn/item/661a362b68eb93571334437c.png'></p><p>为了增加ID的安全性，我们可以不直接使用Redis自增的数值，而是拼接一些其它信息：<br><img src='https://pic.imgdb.cn/item/661a36bc68eb935713358967.png'><br>ID的组成部分：<br>1.符号位：1bit，永远为0<br>2.时间戳：31bit，以秒为单位，可以使用69年<br>3.序列号：32bit，秒内的计数器，支持每秒产生2^32个不同ID</p><h2 id="实现全局唯一ID"><a href="#实现全局唯一ID" class="headerlink" title="实现全局唯一ID"></a>实现全局唯一ID</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> BEGIN_TIMESTAMP=<span class="number">1713020400L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> COUNT_BITS=<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisIdWorker</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span>  <span class="title function_">nextId</span><span class="params">(String keyPrefix)</span>&#123;</span><br><span class="line">        <span class="comment">//1.生成时间戳</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowSecond</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> nowSecond - BEGIN_TIMESTAMP;</span><br><span class="line">        <span class="comment">//2.生成序列号</span></span><br><span class="line">        <span class="comment">//2.1.获取当前日期，精确到天</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy:MM:dd&quot;</span>));</span><br><span class="line">        <span class="comment">//2.2.自增长</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;icr:&quot;</span> + keyPrefix + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line">        <span class="comment">//3.拼接并返回</span></span><br><span class="line">        <span class="keyword">return</span> timestamp&lt;&lt;COUNT_BITS | count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        LocalDateTime time = LocalDateTime.of(2024, 4, 13, 15, 0);</span></span><br><span class="line"><span class="comment">        long second = time.toEpochSecond(ZoneOffset.UTC);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;second=&quot;+second);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局唯一ID生成策略：<br>1.UUID<br>2.Redis自增<br>3.snowflake算法<br>4.数据库自增<br>Redis自增ID策略：<br>1.每天一个key，方便统计订单量<br>2.ID构造是 时间戳 + 计数器</p><h1 id="实现优惠券秒杀下单"><a href="#实现优惠券秒杀下单" class="headerlink" title="实现优惠券秒杀下单"></a>实现优惠券秒杀下单</h1><h2 id="添加秒杀优惠卷"><a href="#添加秒杀优惠卷" class="headerlink" title="添加秒杀优惠卷"></a>添加秒杀优惠卷</h2><p>每个店铺都可以发布优惠券，分为平价券和特价券。平价券可以任意购买，而特价券需要秒杀抢购：<br><img src='https://pic.imgdb.cn/item/661a490d68eb935713503095.png'><br>表关系如下：<br>1.tb_voucher：优惠券的基本信息，优惠金额、使用规则等<br>2.tb_seckill_voucher：优惠券的库存、开始抢购时间，结束抢购时间。特价优惠券才需要填写这些信息</p><p>添加秒杀优惠卷<br><img src='https://pic.imgdb.cn/item/661a492268eb9357135038a0.png'></p><p>分析出对应的接口<br><img src='https://pic.imgdb.cn/item/661a493a68eb93571350421b.png'></p><h2 id="实现秒杀下单"><a href="#实现秒杀下单" class="headerlink" title="实现秒杀下单"></a>实现秒杀下单</h2><p>下单时需要判断两点：<br>1.秒杀是否开始或结束，如果尚未开始或已经结束则无法下单<br>2.库存是否充足，不足则无法下单<br><img src='https://pic.imgdb.cn/item/661a4dd868eb93571354a818.png'></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="keyword">implements</span> <span class="title class_">IVoucherOrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ISeckillVoucherService seckillVoucherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询优惠卷</span></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">        <span class="comment">//2.判断秒杀是否开始</span></span><br><span class="line">        <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">//尚未开始</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.判断秒杀是否已经结束</span></span><br><span class="line">        <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="comment">//已经结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.判断库存是否充足</span></span><br><span class="line">        <span class="keyword">if</span> (voucher.getStock()&lt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//库存不足</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.扣减库存</span></span><br><span class="line">       <span class="type">boolean</span> success= seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>,voucherId).update();</span><br><span class="line">        <span class="keyword">if</span> (!success)&#123;</span><br><span class="line">            <span class="comment">//扣减失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">//6.1.订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">//6.2.用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">//6.3. 代金卷id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        save(voucherOrder);</span><br><span class="line">        <span class="comment">//7.返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h1><p><img src='https://pic.imgdb.cn/item/661a523068eb9357135930b3.png'></p><p>超卖问题是典型的多线程安全问题，针对这一问题的常见解决方案就是加锁：<br><img src='https://pic.imgdb.cn/item/661a525368eb935713597230.png'></p><p>乐观锁的关键是判断之前查询得到的数据是否有被修改过，常见的方式有两种：<br><img src='https://pic.imgdb.cn/item/661a527d68eb935713599c79.png'></p><p><img src='https://pic.imgdb.cn/item/661a528b68eb93571359a5f3.png'></p><p>修改地方（使用乐观锁CAS法）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.扣减库存</span></span><br><span class="line">      <span class="type">boolean</span> success= seckillVoucherService.update()</span><br><span class="line">               .setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">               .eq(<span class="string">&quot;voucher_id&quot;</span>,voucherId).gt(<span class="string">&quot;stock&quot;</span>,voucher.getStock())</span><br><span class="line">              .update();</span><br></pre></td></tr></table></figure></p><p>超卖这样的线程安全问题，解决方案有哪些？<br>1.悲观锁：添加同步锁，让线程串行执行<br>    优点：简单粗暴<br>    缺点：性能一般<br>2.乐观锁：不加锁，在更新时判断是否有其它线程在修改<br>    优点：性能好<br>    缺点：存在成功率低的问题</p><h1 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h1><p>需求：修改秒杀业务，要求同一个优惠券，一个用户只能下一单<br><img src='https://pic.imgdb.cn/item/661a661b68eb93571375d80d.png'></p><p>将方法抽取出来<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId, SeckillVoucher voucher)</span> &#123;</span><br><span class="line">    <span class="comment">//5.一人一单</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//5.1.查询订单</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">        <span class="comment">//5.2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//用户已经购买过了</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).gt(<span class="string">&quot;stock&quot;</span>, voucher.getStock())</span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="comment">//扣减失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">//6.1.订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">//6.2.用户id</span></span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">//6.3. 代金卷id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        save(voucherOrder);</span><br><span class="line">        <span class="comment">//7.返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>修改地方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">       <span class="keyword">synchronized</span> (userId.toString().intern()) &#123;<span class="comment">//保证是同一个用户</span></span><br><span class="line">           <span class="comment">//获取代理对象（事务）</span></span><br><span class="line">           <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">           <span class="keyword">return</span> proxy.createVoucherOrder(voucherId, voucher);<span class="comment">//解决事务代理异常问题</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>启动类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.hmdp.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HmDianPingApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HmDianPingApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="一人一单的并发安全问题"><a href="#一人一单的并发安全问题" class="headerlink" title="一人一单的并发安全问题"></a>一人一单的并发安全问题</h2><p>通过加锁可以解决在单机情况下的一人一单安全问题，但是在集群模式下就不行了。<br>1.我们将服务启动两份，端口分别为8081和8082：<br><img src='https://pic.imgdb.cn/item/661a6e0168eb93571380938f.png'><br>2.然后修改nginx的conf目录下的nginx.conf文件，配置反向代理和负载均衡：<br><img src='https://pic.imgdb.cn/item/661a6e1d68eb93571380c2f5.png'><br>现在，用户请求会在这两个节点上负载均衡，再次测试下是否存在线程安全问题。<br><img src='https://pic.imgdb.cn/item/661a6e3f68eb93571380f744.png'></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;全局唯一ID&quot;&gt;&lt;a href=&quot;#全局唯一ID&quot; class=&quot;headerlink&quot; title=&quot;全局唯一ID&quot;&gt;&lt;/a&gt;全局唯一ID&lt;/h1&gt;&lt;p&gt;每个店铺都可以发布优惠券：&lt;br&gt;&lt;img src=&#39;https://pic.imgdb.cn/item/6</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="redis实战项目" scheme="https://wjlgmw-github-io.vercel.app/tags/redis%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>mq初级</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/16d34fdb.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/16d34fdb.html</id>
    <published>2024-04-12T23:35:34.000Z</published>
    <updated>2024-04-21T13:04:10.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ课程介绍"><a href="#RabbitMQ课程介绍" class="headerlink" title="RabbitMQ课程介绍"></a>RabbitMQ课程介绍</h1><ul><li>同步通讯：就如同打视频电话，双方的交互都是实时的。因此同一时刻你只能跟一个人打视频电话。</li><li>异步通讯：就如同发微信聊天，双方的交互不是实时的，你不需要立刻给对方回应。因此你可以多线操作，同时跟多人聊天<br>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发微信可以同时与多个人收发微信，但是往往响应会有延迟。</li></ul><p>例如<br><img src='https://pic.imgdb.cn/item/661955f368eb935713f1af90.png'><br>如上图所示，如果采用同步机制的话，会非常费时间，导致性能变差，所以我们这时候要采用MQ异步消息<br><img src='https://pic.imgdb.cn/item/6619562868eb935713f1e196.png'></p><p>所以，如果我们的业务需要实时得到服务提供方的响应，则应该选择同步通讯（同步调用）。而如果我们追求更高的效率，并且不需要实时响应，则应该选择异步通讯（异步调用）。<br>导学<br><img src="https://pic.imgdb.cn/item/6619568468eb935713f2a5a1.png"></p><h1 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h1><p><img src='https://pic.imgdb.cn/item/661958ab68eb935713f5b713.png'></p><p>同步调用的优势是什么？<br>时效性强，等待到结果才返回</p><p>同步调用的问题是什么？<br>1.括展性差<br>2.性能下降<br>3.级联失败问题</p><h1 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h1><p>异步调用方式其实就是基于消息通知的方式，一般包含三个角色：</p><ul><li>消息发送者：投递消息的人，就是原来的调用方</li><li>消息Broker：管理、暂存、转发消息，你可以把它理解成微信服务器</li><li>消息接收者：接收和处理消息的人，就是原来的服务提供方<br><img src="https://img.picgo.net/2024/04/18/YB0T10RHD6JE9SY01f5a38a1409de94e.png"></li></ul><p><img src="https://img.picgo.net/2024/04/18/VKQ0YPK5CMXX779B4XC86a64eb6b55b7c07.png"></p><p>综上，异步调用的优势包括：</p><ul><li>耦合度更低</li><li>性能更好</li><li>业务拓展性强</li><li>故障隔离，避免级联失败</li></ul><p>当然，异步通信也并非完美无缺，它存在下列缺点：</p><ul><li>完全依赖于Broker的可靠性、安全性和性能</li><li>架构复杂，后期维护和调试麻烦</li></ul><h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><p>消息Broker，目前常见的实现方案就是消息队列（MessageQueue），简称为MQ.<br>目比较常见的MQ实现：</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RocketMQ</li><li>Kafka</li></ul><p>几种常见MQ的对比：<br><img src="https://img.picgo.net/2024/04/18/6KV0TL8BGWF1B6JW1ICW8U78adc1b9ca3b5a20.png"></p><h1 id="RabbitMQ认识和安装"><a href="#RabbitMQ认识和安装" class="headerlink" title="RabbitMQ认识和安装"></a>RabbitMQ认识和安装</h1><p>将资料中的mq.tar放在虚拟机下<br>然后使用docker load -i mq.tar 命令拉取</p><p>我们同样基于Docker来安装RabbitMQ，使用下面的命令即可：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=itheima \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123321 \</span><br><span class="line"> -v mq-plugins:/plugins \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> --network hmall \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3.8-management</span><br></pre></td></tr></table></figure></p><ul><li>15672：RabbitMQ提供的管理控制台的端口<ul><li>5672：RabbitMQ的消息发送处理接口</li></ul></li></ul><ul><li><code>**publisher**</code>：生产者，也就是发送消息的一方</li><li><code>**consumer**</code>：消费者，也就是消费消息的一方</li><li><code>**queue**</code>：队列，存储消息。生产者投递的消息会暂存在消息队列中，等待消费者处理</li><li><code>**exchange**</code>：交换机，负责消息路由。生产者发送的消息由交换机决定投递到哪个队列。</li><li><code>**virtual host**</code>：虚拟主机，起到数据隔离的作用。每个虚拟主机相互独立，有各自的exchange、queue</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RabbitMQ课程介绍&quot;&gt;&lt;a href=&quot;#RabbitMQ课程介绍&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ课程介绍&quot;&gt;&lt;/a&gt;RabbitMQ课程介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;同步通讯：就如同打视频电话，双方的交互都是实时的</summary>
      
    
    
    
    
    <category term="mq" scheme="https://wjlgmw-github-io.vercel.app/tags/mq/"/>
    
  </entry>
  
</feed>
