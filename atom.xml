<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>繁星、博客</title>
  
  <subtitle>所念皆星河，满眼皆是你</subtitle>
  <link href="https://wjlgmw-github-io.vercel.app/atom.xml" rel="self"/>
  
  <link href="https://wjlgmw-github-io.vercel.app/"/>
  <updated>2024-04-15T15:19:11.509Z</updated>
  <id>https://wjlgmw-github-io.vercel.app/</id>
  
  <author>
    <name>繁星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用DOM操纵图片</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/10da5fae.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/10da5fae.html</id>
    <published>2024-04-15T23:03:02.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8"><title>练习5：DOM操作</title></head><body><div id="cont_left"><ul><img src="../img/siteicon/fold.gif"><a onclick="show('menu1')"> 通过DOM获取信息 </a><ul id="menu1"><li onclick="showImg()"><img src="../img/siteicon/doc.gif">获取原始图片路径</li><li onclick="getFruit()"><img src="../img/siteicon/doc.gif">获取我喜欢的水果</li></ul></ul><ul><img src="../img/siteicon/fold.gif"><a onclick="show('menu2')"> 通过DOM操作元素 </a><ul id="menu2"><li onclick="createImg()"><img src="../img/siteicon/doc.gif">创建图片</li><li onclick="cloneImg()"><img src="../img/siteicon/doc.gif">克隆图片</li><li onclick="changeImg()"><img src="../img/siteicon/doc.gif">改变图片</li><li onclick="removeImg()"><img src="../img/siteicon/doc.gif">删除图片</li></ul></ul><ul><img src="../img/siteicon/fold.gif"><a onclick="show('menu3')"> 通过DOM操作样式 </a><ul id="menu3"><li onclick="changeCss1()"><img src="../img/siteicon/doc.gif">为原始图片加上行间样式</li><li onclick="changeCss2()"><img src="../img/siteicon/doc.gif">为所有的fieldset加上内部样式</li></ul></ul></div><fieldset><legend>原始图片</legend><img id="fruit" src="../img/siteicon/fruit.jpg"></fieldset><fieldset><legend>图片路径</legend><p id="msg1">在这里显示</p></fieldset><fieldset><legend>选择你喜欢的水果</legend><ul style="text-align: left;"><li><input name="enjoy" type="checkbox" value="苹果" />苹果</li><li><input name="enjoy" type="checkbox" value="香蕉" checked="checked" />香蕉</li><li><input name="enjoy" type="checkbox" value="葡萄" />葡萄</li><li><input name="enjoy" type="checkbox" value="梨" checked="checked" />梨</li><li><input name="enjoy" type="checkbox" value="西瓜" />西瓜</li></ul><div id="msg2" style="margin-top: 10px;text-align: left;"></div></fieldset><fieldset><legend>创建图片</legend><div id="msg3"></div></fieldset><fieldset><legend>克隆图片</legend><div id="msg4"></div></fieldset><script>//菜单收缩与扩展function show(title) {let currentMenu = document.getElementById(title);let currentStatus = currentMenu.style.display;currentMenu.style.display = currentStatus == "" ? "none" : "";}//获取原始图片路径function showImg() {var text = document.getElementById('msg1'); //获取需要输出地方的文本         var src = document.getElementById('fruit').src;      //获取原始图片的srctext.innerHTML = src;  //将原始图片的src赋予text   }//获取喜欢的水果function getFruit() {var a = document.getElementsByName('enjoy'); //获取name为enjoy的元素document.getElementById('msg2').innerHTML = "你最喜欢的水果是："; //获取需要输出地方的文本内容//for循环 追加写入水果for (var i = 0; i <= a.length; i++) {if (a[i].checked == true) {document.getElementById('msg2').innerHTML += a[i].value + " ";}}}//创建图片function createImg() {var msg3 = document.getElementById('msg3'); //获取id元素var im = document.createElement('img'); //创建图片im.src = "../img/siteicon/grape.jpg";   //选取想要创建的图片msg3.appendChild(im); //图片挂载到id上}//克隆图片function cloneImg() {var msg4 = document.getElementById('msg4'); //获取id元素var cloneim = document.getElementById('fruit'); //获取图片idmsg4.appendChild(cloneim.cloneNode());  //图片挂载到id上}//改变图片function changeImg() {var msg5 = document.getElementById('fruit'); //获取id元素msg5.src = "../img/siteicon/grape.jpg"; //更改src}//删除图片function removeImg() {var msg6 = document.getElementById('fruit'); //获取id元素msg6.parentNode.removeChild(msg6); //删除父节点}//操作样式1function changeCss1() {var ele = document.getElementById('fruit'); //获取idele.style.border = 'solid 4px red';  //改变border样式}//操作样式2function changeCss2() {var ele = document.getElementsByTagName('fieldset');for (var i = 0; i < ele.length; i++) {ele[i].style.backgroundColor = "green"}}</script></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;&gt;
	&lt;title&gt;练习5：DOM操作&lt;/title&gt;
	
&lt;/head&gt;

&lt;body&gt;
	&lt;div id=&quot;cont_left&quot;&gt;
		&lt;ul&gt;&lt;img src=&quot;../</summary>
      
    
    
    
    <category term="前端js" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%89%8D%E7%AB%AFjs/"/>
    
    
    <category term="前端" scheme="https://wjlgmw-github-io.vercel.app/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Freemarker快速入门</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/0.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/0.html</id>
    <published>2024-04-15T15:19:11.509Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<p>转学成在线项目<br>在内容管理接口工层 添加Freemarker与SpringBoot的整合包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot 对结果视图 Freemarker 集成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在nacos为内容管理接口层配置freemarker，公用配置组新加一个freemarker-config-dev.yaml<br><img src='https://s21.ax1x.com/2024/04/08/pFLTE5D.png'><br>配置信息如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span>   <span class="comment">#关闭模板缓存，方便测试</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">template_update_delay:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.ftl</span>   <span class="comment">#页面模板后缀名</span></span><br><span class="line">    <span class="attr">charset:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">template-loader-path:</span> <span class="string">classpath:/templates/</span>   <span class="comment">#页面模板位置(默认为 classpath:/templates/)</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="comment">#关闭项目中的静态资源映射(static、resources文件夹下的资源)</span></span><br></pre></td></tr></table></figure><p>在内容管理接口工程添加freemarker-config-dev.yaml<br><img src='https://s21.ax1x.com/2024/04/09/pFLTZPe.png'></p><p>添加模板，在resources下创建templates目录，添加test.ftl模板文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello $&#123;name&#125;!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写controller方法，准备模型数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.content.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.math.raw.Mod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> freemarker测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/15 19:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreemarkerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testfreemarker&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">//设置模型数据</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        <span class="comment">//设置模板名称</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;test&quot;</span>);<span class="comment">//根据视图名称加.ftl找到模板</span></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动内容管理接口工程，访问<a href="http://localhost:63040/content/testfreemarker">http://localhost:63040/content/testfreemarker</a><br>屏幕输出：Hello 小明！<br>效果如图：<br><img src='https://s21.ax1x.com/2024/04/09/pFLTnxA.png'></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转学成在线项目&lt;br&gt;在内容管理接口工层 添加Freemarker与SpringBoot的整合包&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Freemarker" scheme="https://wjlgmw-github-io.vercel.app/tags/Freemarker/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/5729df21.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/5729df21.html</id>
    <published>2024-04-13T19:47:57.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是多线程"><a href="#什么是多线程" class="headerlink" title="什么是多线程"></a>什么是多线程</h1><p>线程是操作系统能够进行运行调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。<br>简单理解：应用软件中互相独立，可以同行运行的功能<br><img src='https://pic.imgdb.cn/item/661a934e68eb935713a14d83.png'></p><h1 id="多线程的两个概念"><a href="#多线程的两个概念" class="headerlink" title="多线程的两个概念"></a>多线程的两个概念</h1><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>并发：在同一时刻，有多个指令在单个CPU上<u>交替</u>执行</p><h2 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h2><p>并行：在同一时刻，有多个指令在多个CPU上<u>同时</u>执行</p><h1 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h1><p>1.继承Thread类的方式进行实现<br>2.实现Runnable接口的方式进行实现<br>3.利用Callable接口和Future接口方式实现</p><h2 id="继承Thread类的方式进行实现"><a href="#继承Thread类的方式进行实现" class="headerlink" title="继承Thread类的方式进行实现"></a>继承Thread类的方式进行实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//书写线程要执行代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 多线程的第一种启动方式：</span></span><br><span class="line"><span class="comment">         * 1.自己第一个类继承Thread</span></span><br><span class="line"><span class="comment">         * 2.重写run方法</span></span><br><span class="line"><span class="comment">         * 3.创建子类对象，并启动线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现Runnable接口的方式进行实现"><a href="#实现Runnable接口的方式进行实现" class="headerlink" title="实现Runnable接口的方式进行实现"></a>实现Runnable接口的方式进行实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRun</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//书写线程要执行代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//获取到当前线程的对象</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            System.out.println(t.getName()+<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 多线程的第二钟启动方式：</span></span><br><span class="line"><span class="comment">         * 1.自己定义一个类实现Runnable接口</span></span><br><span class="line"><span class="comment">         * 2.重写里面的run方法</span></span><br><span class="line"><span class="comment">         * 3.创建自己的类的对象</span></span><br><span class="line"><span class="comment">         * 4.创建一个Thread类的对象，并开启线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建MyRun的对象</span></span><br><span class="line">        <span class="comment">//表示多线程要执行的任务</span></span><br><span class="line">        <span class="type">MyRun</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRun</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给线程设置名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用Callable接口和Future接口方式实现"><a href="#利用Callable接口和Future接口方式实现" class="headerlink" title="利用Callable接口和Future接口方式实现"></a>利用Callable接口和Future接口方式实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//求1~100之间的和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum = sum + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 多线程的第三种实现方式：</span></span><br><span class="line"><span class="comment">         * 特点：可以获取到多线程运行的结果</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 1.创建一个类MyCallable实现Callable接口</span></span><br><span class="line"><span class="comment">         * 2.重写call（是有返回值的，表示多线程运行的结果）</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3.创建MyCallable的对象（表示多线程要执行的任务）</span></span><br><span class="line"><span class="comment">         * 4.创建FutureTask的对象（作用管理多线程运行的结果）</span></span><br><span class="line"><span class="comment">         * 5.创建Thread类的对象，并启动（表示线程）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建MyCallable的对象（表示多线程要执行的任务）</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">        <span class="comment">//创建FutureTask的对象（作用管理多线程运行的结果）</span></span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line">        <span class="comment">//创建线程的对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取多线的结果</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> ft.get();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三种方式对比"><a href="#三种方式对比" class="headerlink" title="三种方式对比"></a>三种方式对比</h2><p><img src='https://pic.imgdb.cn/item/661a9e0c68eb935713ad6736.png'></p><h1 id="常见的成员方法"><a href="#常见的成员方法" class="headerlink" title="常见的成员方法"></a>常见的成员方法</h1><p><img src='https://pic.imgdb.cn/item/661aa2f368eb935713b3cfc2.png'></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//书写线程要执行代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  String getName()  返回此线程的名称</span></span><br><span class="line"><span class="comment">         *  void setName（String name） 设置线程的名字（构造方法也可也以）</span></span><br><span class="line"><span class="comment">         *  细节：</span></span><br><span class="line"><span class="comment">         *  1.如果我们没有给线程设置名字,线程也是有默认的名字的</span></span><br><span class="line"><span class="comment">         *          格式：Thread-X(X序号，从0开始的)</span></span><br><span class="line"><span class="comment">         *  2.如果我们要给线程设置名字，可以用set方法进行设置，也可也构造方法设置</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  static Thread currentThread()  获取当前线程的对象</span></span><br><span class="line"><span class="comment">         *  细节：</span></span><br><span class="line"><span class="comment">         *      当JVm虚拟机启动之后，会自动的启动多条线程</span></span><br><span class="line"><span class="comment">         *      其中有一条线程就叫做mian线程</span></span><br><span class="line"><span class="comment">         *      它的作用就是去调用mian方法，并执行里面的代码</span></span><br><span class="line"><span class="comment">         *      在以前，我们写的所有代码，其实都是运行在mian线程当中</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  static void sleep(long time)  让线程休眠指定的时间，单位为毫秒</span></span><br><span class="line"><span class="comment">         *  细节：</span></span><br><span class="line"><span class="comment">         *      1.哪条线程执行到这个方法，那么哪条线程就会在这里停留对应的时间</span></span><br><span class="line"><span class="comment">         *      2.方法的参数：就表示睡眠的时间，单位为毫秒</span></span><br><span class="line"><span class="comment">         *          1秒=1000毫秒</span></span><br><span class="line"><span class="comment">         *      3.当时间到了之后，线程会自动的醒来，继续执行下面的其他代码</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建线程的对象</span></span><br><span class="line">     <span class="comment">/*   MyThread t1 = new MyThread(&quot;飞机&quot;);</span></span><br><span class="line"><span class="comment">        MyThread t2 = new MyThread(&quot;坦克&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //2.开启线程</span></span><br><span class="line"><span class="comment">        t1.start();</span></span><br><span class="line"><span class="comment">        t2.start();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//哪条线程执行到这个方法，此时获取的就是哪条线程的对象</span></span><br><span class="line">       <span class="comment">/* Thread t = Thread.currentThread();</span></span><br><span class="line"><span class="comment">        String name = t.getName();</span></span><br><span class="line"><span class="comment">        System.out.println(name);*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;111111&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;22222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-----&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  setPriority(int newPriority)  设置线程的优先级  默认优先级是5</span></span><br><span class="line"><span class="comment">         *  final int getPriority()  获取线程的优先级</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程要执行的参数对象</span></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;坦克&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*     System.out.println(t1.getPriority());</span></span><br><span class="line"><span class="comment">        System.out.println(t2.getPriority());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println(Thread.currentThread().getPriority());*/</span></span><br><span class="line">        t1.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.setPriority(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">            final void setDaemon(boolean on)    设置为守护线程</span></span><br><span class="line"><span class="comment">            细节：</span></span><br><span class="line"><span class="comment">                当其他的非守护线程执行完毕之后，守护线程会陆续结束</span></span><br><span class="line"><span class="comment">            通俗易懂：</span></span><br><span class="line"><span class="comment">                当女神线程结束了，那么备胎也没有存在的必要了</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;女神&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;备胎&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把第二个线程设置为守护线程（备胎线程）</span></span><br><span class="line">        t2.setDaemon(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应用场景<br><img src='https://pic.imgdb.cn/item/661aa84f68eb935713ba4c0f.png'><br>当线程1取消掉，那么线程2会自动挂掉</p><h2 id="礼让线程"><a href="#礼让线程" class="headerlink" title="礼让线程"></a>礼让线程</h2><p>尽量的让线程CPU的执行权均匀点<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//&quot;飞机&quot;  &quot;坦克&quot;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;@&quot;</span> + i);</span><br><span class="line">            <span class="comment">//表示出让当前CPU的执行权</span></span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public static void yield()      出让线程/礼让线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;坦克&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入线程"><a href="#插入线程" class="headerlink" title="插入线程"></a>插入线程</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是多线程&quot;&gt;&lt;a href=&quot;#什么是多线程&quot; class=&quot;headerlink&quot; title=&quot;什么是多线程&quot;&gt;&lt;/a&gt;什么是多线程&lt;/h1&gt;&lt;p&gt;线程是操作系统能够进行运行调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。&lt;br&gt;简单理解：应用</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="多线程" scheme="https://wjlgmw-github-io.vercel.app/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>黑马点评-优惠卷秒杀-redis</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/7f197c2e.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/7f197c2e.html</id>
    <published>2024-04-13T13:22:10.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h1><p>每个店铺都可以发布优惠券：<br><img src='https://pic.imgdb.cn/item/661a360568eb93571333f0d4.png'></p><p>当用户抢购时，就会生成订单并保存到tb_voucher_order这张表中，而订单表如果使用数据库自增ID就存在一些问题：<br>1.id的规律性太明显(容易让用户猜到一天有多少订单量)<br>2.受单表数据量的限制（随着我们商城规模越来越大，mysql的单表的容量不宜超过500W）</p><p>全局ID生成器，是一种在分布式系统下用来生成全局唯一ID的工具，一般要满足下列特性：<br><img src='https://pic.imgdb.cn/item/661a362b68eb93571334437c.png'></p><p>为了增加ID的安全性，我们可以不直接使用Redis自增的数值，而是拼接一些其它信息：<br><img src='https://pic.imgdb.cn/item/661a36bc68eb935713358967.png'><br>ID的组成部分：<br>1.符号位：1bit，永远为0<br>2.时间戳：31bit，以秒为单位，可以使用69年<br>3.序列号：32bit，秒内的计数器，支持每秒产生2^32个不同ID</p><h2 id="实现全局唯一ID"><a href="#实现全局唯一ID" class="headerlink" title="实现全局唯一ID"></a>实现全局唯一ID</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> BEGIN_TIMESTAMP=<span class="number">1713020400L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> COUNT_BITS=<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisIdWorker</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span>  <span class="title function_">nextId</span><span class="params">(String keyPrefix)</span>&#123;</span><br><span class="line">        <span class="comment">//1.生成时间戳</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowSecond</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> nowSecond - BEGIN_TIMESTAMP;</span><br><span class="line">        <span class="comment">//2.生成序列号</span></span><br><span class="line">        <span class="comment">//2.1.获取当前日期，精确到天</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy:MM:dd&quot;</span>));</span><br><span class="line">        <span class="comment">//2.2.自增长</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;icr:&quot;</span> + keyPrefix + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line">        <span class="comment">//3.拼接并返回</span></span><br><span class="line">        <span class="keyword">return</span> timestamp&lt;&lt;COUNT_BITS | count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        LocalDateTime time = LocalDateTime.of(2024, 4, 13, 15, 0);</span></span><br><span class="line"><span class="comment">        long second = time.toEpochSecond(ZoneOffset.UTC);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;second=&quot;+second);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局唯一ID生成策略：<br>1.UUID<br>2.Redis自增<br>3.snowflake算法<br>4.数据库自增<br>Redis自增ID策略：<br>1.每天一个key，方便统计订单量<br>2.ID构造是 时间戳 + 计数器</p><h1 id="实现优惠券秒杀下单"><a href="#实现优惠券秒杀下单" class="headerlink" title="实现优惠券秒杀下单"></a>实现优惠券秒杀下单</h1><h2 id="添加秒杀优惠卷"><a href="#添加秒杀优惠卷" class="headerlink" title="添加秒杀优惠卷"></a>添加秒杀优惠卷</h2><p>每个店铺都可以发布优惠券，分为平价券和特价券。平价券可以任意购买，而特价券需要秒杀抢购：<br><img src='https://pic.imgdb.cn/item/661a490d68eb935713503095.png'><br>表关系如下：<br>1.tb_voucher：优惠券的基本信息，优惠金额、使用规则等<br>2.tb_seckill_voucher：优惠券的库存、开始抢购时间，结束抢购时间。特价优惠券才需要填写这些信息</p><p>添加秒杀优惠卷<br><img src='https://pic.imgdb.cn/item/661a492268eb9357135038a0.png'></p><p>分析出对应的接口<br><img src='https://pic.imgdb.cn/item/661a493a68eb93571350421b.png'></p><h2 id="实现秒杀下单"><a href="#实现秒杀下单" class="headerlink" title="实现秒杀下单"></a>实现秒杀下单</h2><p>下单时需要判断两点：<br>1.秒杀是否开始或结束，如果尚未开始或已经结束则无法下单<br>2.库存是否充足，不足则无法下单<br><img src='https://pic.imgdb.cn/item/661a4dd868eb93571354a818.png'></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="keyword">implements</span> <span class="title class_">IVoucherOrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ISeckillVoucherService seckillVoucherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询优惠卷</span></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">        <span class="comment">//2.判断秒杀是否开始</span></span><br><span class="line">        <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">//尚未开始</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.判断秒杀是否已经结束</span></span><br><span class="line">        <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="comment">//已经结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.判断库存是否充足</span></span><br><span class="line">        <span class="keyword">if</span> (voucher.getStock()&lt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//库存不足</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.扣减库存</span></span><br><span class="line">       <span class="type">boolean</span> success= seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>,voucherId).update();</span><br><span class="line">        <span class="keyword">if</span> (!success)&#123;</span><br><span class="line">            <span class="comment">//扣减失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">//6.1.订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">//6.2.用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">//6.3. 代金卷id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        save(voucherOrder);</span><br><span class="line">        <span class="comment">//7.返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h1><p><img src='https://pic.imgdb.cn/item/661a523068eb9357135930b3.png'></p><p>超卖问题是典型的多线程安全问题，针对这一问题的常见解决方案就是加锁：<br><img src='https://pic.imgdb.cn/item/661a525368eb935713597230.png'></p><p>乐观锁的关键是判断之前查询得到的数据是否有被修改过，常见的方式有两种：<br><img src='https://pic.imgdb.cn/item/661a527d68eb935713599c79.png'></p><p><img src='https://pic.imgdb.cn/item/661a528b68eb93571359a5f3.png'></p><p>修改地方（使用乐观锁CAS法）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.扣减库存</span></span><br><span class="line">      <span class="type">boolean</span> success= seckillVoucherService.update()</span><br><span class="line">               .setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">               .eq(<span class="string">&quot;voucher_id&quot;</span>,voucherId).gt(<span class="string">&quot;stock&quot;</span>,voucher.getStock())</span><br><span class="line">              .update();</span><br></pre></td></tr></table></figure></p><p>超卖这样的线程安全问题，解决方案有哪些？<br>1.悲观锁：添加同步锁，让线程串行执行<br>    优点：简单粗暴<br>    缺点：性能一般<br>2.乐观锁：不加锁，在更新时判断是否有其它线程在修改<br>    优点：性能好<br>    缺点：存在成功率低的问题</p><h1 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h1><p>需求：修改秒杀业务，要求同一个优惠券，一个用户只能下一单<br><img src='https://pic.imgdb.cn/item/661a661b68eb93571375d80d.png'></p><p>将方法抽取出来<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId, SeckillVoucher voucher)</span> &#123;</span><br><span class="line">    <span class="comment">//5.一人一单</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//5.1.查询订单</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">        <span class="comment">//5.2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//用户已经购买过了</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock=stock-1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).gt(<span class="string">&quot;stock&quot;</span>, voucher.getStock())</span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="comment">//扣减失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">//6.1.订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">//6.2.用户id</span></span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">//6.3. 代金卷id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        save(voucherOrder);</span><br><span class="line">        <span class="comment">//7.返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>修改地方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">       <span class="keyword">synchronized</span> (userId.toString().intern()) &#123;<span class="comment">//保证是同一个用户</span></span><br><span class="line">           <span class="comment">//获取代理对象（事务）</span></span><br><span class="line">           <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">           <span class="keyword">return</span> proxy.createVoucherOrder(voucherId, voucher);<span class="comment">//解决事务代理异常问题</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>启动类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.hmdp.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HmDianPingApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HmDianPingApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="一人一单的并发安全问题"><a href="#一人一单的并发安全问题" class="headerlink" title="一人一单的并发安全问题"></a>一人一单的并发安全问题</h2><p>通过加锁可以解决在单机情况下的一人一单安全问题，但是在集群模式下就不行了。<br>1.我们将服务启动两份，端口分别为8081和8082：<br><img src='https://pic.imgdb.cn/item/661a6e0168eb93571380938f.png'><br>2.然后修改nginx的conf目录下的nginx.conf文件，配置反向代理和负载均衡：<br><img src='https://pic.imgdb.cn/item/661a6e1d68eb93571380c2f5.png'><br>现在，用户请求会在这两个节点上负载均衡，再次测试下是否存在线程安全问题。<br><img src='https://pic.imgdb.cn/item/661a6e3f68eb93571380f744.png'></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;全局唯一ID&quot;&gt;&lt;a href=&quot;#全局唯一ID&quot; class=&quot;headerlink&quot; title=&quot;全局唯一ID&quot;&gt;&lt;/a&gt;全局唯一ID&lt;/h1&gt;&lt;p&gt;每个店铺都可以发布优惠券：&lt;br&gt;&lt;img src=&#39;https://pic.imgdb.cn/item/6</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="redis实战项目" scheme="https://wjlgmw-github-io.vercel.app/tags/redis%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>mq初级</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/16d34fdb.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/16d34fdb.html</id>
    <published>2024-04-12T23:35:34.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ课程介绍"><a href="#RabbitMQ课程介绍" class="headerlink" title="RabbitMQ课程介绍"></a>RabbitMQ课程介绍</h1><ul><li>同步通讯：就如同打视频电话，双方的交互都是实时的。因此同一时刻你只能跟一个人打视频电话。</li><li>异步通讯：就如同发微信聊天，双方的交互不是实时的，你不需要立刻给对方回应。因此你可以多线操作，同时跟多人聊天<br>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发微信可以同时与多个人收发微信，但是往往响应会有延迟。</li></ul><p>例如<br><img src='https://pic.imgdb.cn/item/661955f368eb935713f1af90.png'><br>如上图所示，如果采用同步机制的话，会非常费时间，导致性能变差，所以我们这时候要采用MQ异步消息<br><img src='https://pic.imgdb.cn/item/6619562868eb935713f1e196.png'></p><p>所以，如果我们的业务需要实时得到服务提供方的响应，则应该选择同步通讯（同步调用）。而如果我们追求更高的效率，并且不需要实时响应，则应该选择异步通讯（异步调用）。<br>导学<br><img src="https://pic.imgdb.cn/item/6619568468eb935713f2a5a1.png"></p><h1 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h1><p><img src='https://pic.imgdb.cn/item/661958ab68eb935713f5b713.png'></p><p>同步调用的优势是什么？<br>时效性强，等待到结果才返回</p><p>同步调用的问题是什么？<br>1.括展性差<br>2.性能下降<br>3.级联失败问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RabbitMQ课程介绍&quot;&gt;&lt;a href=&quot;#RabbitMQ课程介绍&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ课程介绍&quot;&gt;&lt;/a&gt;RabbitMQ课程介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;同步通讯：就如同打视频电话，双方的交互都是实时的</summary>
      
    
    
    
    
    <category term="mq" scheme="https://wjlgmw-github-io.vercel.app/tags/mq/"/>
    
  </entry>
  
  <entry>
    <title>黑马点评-缓存-redis</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/cf1ce85f.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/cf1ce85f.html</id>
    <published>2024-04-12T12:49:48.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h1><p>缓存就是数据交换的缓冲区（称作Cache [ kæʃ ] ），是存贮数据的临时地方，一般读写性能较高。<br><img src='https://pic.imgdb.cn/item/6618de0368eb9357133ac27e.png'></p><p>优缺点<br><img src='https://pic.imgdb.cn/item/6618de1b68eb9357133adad0.png'></p><h1 id="添加Redis缓存"><a href="#添加Redis缓存" class="headerlink" title="添加Redis缓存"></a>添加Redis缓存</h1><p><img src='https://pic.imgdb.cn/item/6618e21a68eb935713406848.png'></p><h2 id="商铺缓存"><a href="#商铺缓存" class="headerlink" title="商铺缓存"></a>商铺缓存</h2><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据id查询商铺信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 商铺详情数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> shopService.queryById(id);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据id查询商铺信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 商铺详情数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> Result <span class="title function_">queryById</span><span class="params">(Long id)</span></span><br></pre></td></tr></table></figure><p>实现service接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据id查询商铺信息</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 商铺详情数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">       <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">       <span class="comment">//2.判断是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">           <span class="comment">//3.存在，直接返回</span></span><br><span class="line">           <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">           <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//4.不存在，根据id查询数据库</span></span><br><span class="line">       <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">       <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">       <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//6.存在，写入redis</span></span><br><span class="line">       stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop));</span><br><span class="line">       <span class="comment">//7.返回</span></span><br><span class="line">       <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="店铺类型缓存"><a href="#店铺类型缓存" class="headerlink" title="店铺类型缓存"></a>店铺类型缓存</h2><p><img src='https://pic.imgdb.cn/item/6618e53c68eb935713445e64.png'><br>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/shop-type&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopTypeController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IShopTypeService typeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryTypeList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  typeService.queryList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Result <span class="title function_">queryList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></p><p>实现service接口  集合对象list转为json需要一个一个转JSONUtil.toJsonStr    json转为集合对象list也是JSONUtil.toBean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopTypeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShopTypeMapper, ShopType&gt; <span class="keyword">implements</span> <span class="title class_">IShopTypeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.向redis查找数据</span></span><br><span class="line">        List&lt;String&gt; shopTypeJSONList = stringRedisTemplate.opsForList().range(CACHE_SHOP_TYPE_LIST_KEY, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shopTypeJSONList != <span class="literal">null</span> &amp;&amp; shopTypeJSONList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//2.存在，返回数据</span></span><br><span class="line">            List&lt;ShopType&gt; typeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String str : shopTypeJSONList) &#123;</span><br><span class="line">                <span class="type">ShopType</span> <span class="variable">type</span> <span class="operator">=</span> JSONUtil.toBean(str, ShopType.class);</span><br><span class="line">                typeList.add(type);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(typeList);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.不存在，向数据库查询数据</span></span><br><span class="line">        List&lt;ShopType&gt; typeList = query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">        <span class="comment">//4.不存在，返回错误信息</span></span><br><span class="line">        <span class="keyword">if</span> (typeList == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;不存在商品分类信息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.存在，写入缓存</span></span><br><span class="line">        <span class="keyword">for</span> (ShopType shopType : typeList) &#123;</span><br><span class="line">            stringRedisTemplate.opsForList()</span><br><span class="line">                    .leftPushAll(CACHE_SHOP_TYPE_LIST_KEY, JSONUtil.toJsonStr(shopType));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.返回数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(typeList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h1><p><img src='https://pic.imgdb.cn/item/6618fba368eb93571366a11b.png'><br>业务场景：<br>低一致性需求：使用内存淘汰机制。例如店铺类型的查询缓存<br>高一致性需求：主动更新，并以超时剔除作为兜底方案。例如店铺详情查询的缓存</p><h2 id="主动更新策略"><a href="#主动更新策略" class="headerlink" title="主动更新策略"></a>主动更新策略</h2><p><img src='https://pic.imgdb.cn/item/6618fc1a68eb93571367417f.png'></p><div class="tip info"><p>操作缓存和数据库时有三个问题需要考虑：<br>1.删除缓存还是更新缓存？  删除缓存<br>    更新缓存：每次更新数据库都更新缓存，无效写操作较多<br>    删除缓存：更新数据库时让缓存失效，查询时再更新缓存<br>2.如何保证缓存与数据库的操作的同时成功或失败？<br>    单体系统，将缓存与数据库操作放在一个事务<br>    分布式系统，利用TCC等分布式事务方案<br>3.先操作缓存还是先操作数据库？<br>    先删除缓存，再操作数据库<br>    先操作数据库，再删除缓存</p></div><h3 id="先操作缓存还是先操作数据库？"><a href="#先操作缓存还是先操作数据库？" class="headerlink" title="先操作缓存还是先操作数据库？"></a>先操作缓存还是先操作数据库？</h3><p><img src='https://pic.imgdb.cn/item/6618fce368eb935713685e61.png'></p><p>选择先操作数据库因为：条件要恰好缓存失效 在写入缓存时间内，突然来了个线程更新数据库，又去删除缓存 （满足3个巧合，可能性低）</p><h2 id="给查询商铺的缓存添加超时剔除和主动更新的策略"><a href="#给查询商铺的缓存添加超时剔除和主动更新的策略" class="headerlink" title="给查询商铺的缓存添加超时剔除和主动更新的策略"></a>给查询商铺的缓存添加超时剔除和主动更新的策略</h2><p>修改ShopController中的业务逻辑，满足下面的需求：<br>1.根据id查询店铺时，如果缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间<br>2.根据id修改店铺时，先修改数据库，再删除缓存</p><p>第一个条件在查询店铺接口做点修改<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure></p><p>条件2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shop.getId();</span><br><span class="line">    <span class="keyword">if</span> (id==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺id不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.更新数据库</span></span><br><span class="line">    updateById(shop);</span><br><span class="line">    <span class="comment">//2.删除缓存</span></span><br><span class="line">    stringRedisTemplate.delete(CACHE_SHOP_KEY + shop.getId());</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p>缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库<br>常见的解决方案有两种：<br>1.缓存空对象<br>优点：实现简单，维护方便<br>缺点：<br>    额外的内存消耗<br>    可能造成短期的不一致<br>如图所示<br><img src='https://pic.imgdb.cn/item/6619059d68eb9357137a69e1.png'></p><p>2.布隆过滤<br>优点：内存占用较少，没有多余key<br>缺点：<br>    实现复杂<br>    存在误判可能<br>如图所示<br><img src='https://pic.imgdb.cn/item/661905e268eb9357137ae3dd.png'></p><h2 id="解决查询商铺信息的缓存穿透"><a href="#解决查询商铺信息的缓存穿透" class="headerlink" title="解决查询商铺信息的缓存穿透"></a>解决查询商铺信息的缓存穿透</h2><p><img src='https://pic.imgdb.cn/item/6619090468eb9357137ffea3.png'></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">     <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">     <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">     <span class="comment">//2.判断是否存在</span></span><br><span class="line">     <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">         <span class="comment">//3.存在，直接返回</span></span><br><span class="line">         <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">         <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//判断命中的是否是空值</span></span><br><span class="line">     <span class="keyword">if</span> (shopJson!=<span class="literal">null</span>)&#123;   <span class="comment">// &#x27;&#x27;并不为null  null前面的if条件语句判断了</span></span><br><span class="line">         <span class="comment">//返回一个错误信息</span></span><br><span class="line">         <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺信息不存在&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//4.不存在，根据id查询数据库</span></span><br><span class="line">     <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">     <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">     <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">//将空值写入redis</span></span><br><span class="line">         stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>,CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">         <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//6.存在，写入redis</span></span><br><span class="line">     stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">     <span class="comment">//7.返回</span></span><br><span class="line">     <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>缓存穿透的解决方案有哪些？<br>缓存null值(主)<br>布隆过滤(主)<br>增强id的复杂度，避免被猜测id规律<br>做好数据的基础格式校验<br>加强用户权限校验<br>做好热点参数的限流</p><h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p><img src='https://pic.imgdb.cn/item/66190d6968eb935713857a15.png'><br>解决方案：<br>给不同的Key的TTL添加随机值   我采用random这个类解决。 然后添加到redis设置过期时间那里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">TLL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>-<span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>利用Redis集群提高服务的可用性<br>给缓存业务添加降级限流策略<br>给业务添加多级缓存</p><h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><p>缓存击穿问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><p><img src='https://pic.imgdb.cn/item/6619153568eb935713906103.png'><br>常见的解决方案有两种:<br>1.互斥锁<br><img src='https://pic.imgdb.cn/item/6619156068eb935713908251.png'></p><p>2.逻辑过期<br><img src='https://pic.imgdb.cn/item/6619158368eb93571390a85f.png'></p><p>两种方法根据业务需求来选择（CAP理论）是要强一致性还是要可用性<br>如图是两种方法对比<br><img src='https://pic.imgdb.cn/item/661915a268eb93571390c00b.png'></p><h2 id="基于互斥锁方式解决缓存击穿问题"><a href="#基于互斥锁方式解决缓存击穿问题" class="headerlink" title="基于互斥锁方式解决缓存击穿问题"></a>基于互斥锁方式解决缓存击穿问题</h2><p>需求：修改根据id查询商铺的业务，基于互斥锁方式来解决缓存击穿问题</p><p><img src='https://pic.imgdb.cn/item/6619ea4d68eb935713af0e19.png'></p><p>将缓存穿透处理方法提取出来<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓存穿透</span></span><br><span class="line">  <span class="keyword">public</span> Shop <span class="title function_">queryWithPassThrough</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">      <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">      <span class="comment">//2.判断是否存在</span></span><br><span class="line">      <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">          <span class="comment">//3.存在，直接返回</span></span><br><span class="line">          <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断命中的是否是空值</span></span><br><span class="line">      <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">//返回一个错误信息</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//4.不存在，根据id查询数据库</span></span><br><span class="line">      <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">      <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">      <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">//将空值写入redis</span></span><br><span class="line">          stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//6.存在，写入redis</span></span><br><span class="line">      stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">      <span class="comment">//7.返回</span></span><br><span class="line">      <span class="keyword">return</span> shop;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>设置互斥锁 抢锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, LOCK_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(flag); <span class="comment">//避免空指针</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>释放锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">       stringRedisTemplate.delete(key);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>解决缓存击穿的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">       <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">       <span class="comment">//2.判断是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">           <span class="comment">//3.存在，直接返回</span></span><br><span class="line">           <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//判断命中的是否是空值</span></span><br><span class="line">       <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//返回一个错误信息</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.实现缓存重建</span></span><br><span class="line">       <span class="comment">//4.1 获取互斥锁</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">lockkey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">       <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockkey);</span><br><span class="line">           <span class="comment">//4.2判断是否获取成功</span></span><br><span class="line">           <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">               <span class="comment">//4.3失败，则休眠并重试</span></span><br><span class="line">               Thread.sleep(<span class="number">50</span>);</span><br><span class="line">               <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.4成功，根据id查询数据库</span></span><br><span class="line">           shop = getById(id);</span><br><span class="line">           <span class="comment">//模拟重建的延时</span></span><br><span class="line">           Thread.sleep(<span class="number">200</span>);</span><br><span class="line">           <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">           <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="comment">//将空值写入redis</span></span><br><span class="line">               stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//6.存在，写入redis</span></span><br><span class="line">           stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//7.释放互斥锁</span></span><br><span class="line">           unlock(lockkey);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//8.返回</span></span><br><span class="line">       <span class="keyword">return</span> shop;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">     <span class="comment">//缓存穿透</span></span><br><span class="line">     <span class="comment">//Shop shop = queryWithPassThrough(id);</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//互斥锁解决缓存击穿</span></span><br><span class="line">     <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> queryWithMutex(id);</span><br><span class="line">     <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="基于逻辑过期方式解决缓存击穿问题"><a href="#基于逻辑过期方式解决缓存击穿问题" class="headerlink" title="基于逻辑过期方式解决缓存击穿问题"></a>基于逻辑过期方式解决缓存击穿问题</h2><p>需求：修改根据id查询商铺的业务，基于逻辑过期方式来解决缓存击穿问题<br><img src='https://pic.imgdb.cn/item/6619f58c68eb935713c3cb35.png'></p><p>创建一个新的类，防止修改原来的类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisData</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime; <span class="comment">//过期时间</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//万能存数据的属性如可以存shop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>提前设置数据，封装逻辑过期时间<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveShop2Redis</span><span class="params">(Long id,Long expireSeconds)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//1.查询店铺数据</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="comment">//2.封装逻辑过期时间</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    redisData.setData(shop);</span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));</span><br><span class="line">    <span class="comment">//3.写入Redis</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HmDianPingApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ShopServiceImpl shopService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSaveShop</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        shopService.saveShop2Redis(<span class="number">1L</span>,<span class="number">10L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService CACHE_REBUILD_EXECUTOR= Executors.newFixedThreadPool(<span class="number">10</span>);<span class="comment">//线程池，开启10个线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Shop <span class="title function_">queryWithLogicalExpire</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">        <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(shopJson)) &#123;</span><br><span class="line">            <span class="comment">//3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.命中，需要先把json反序列化为对象</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, RedisData.class);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(data, Shop.class);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="comment">//5.判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="comment">//5.1.未过期，直接返回店铺信息</span></span><br><span class="line">            <span class="keyword">return</span> shop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.2.已过期，需要缓存重建</span></span><br><span class="line">        <span class="comment">//6.缓存重建</span></span><br><span class="line">        <span class="comment">//6.1.获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">//6.2.判断是否获取锁成功</span></span><br><span class="line">        <span class="keyword">if</span> (isLock)&#123;</span><br><span class="line">            <span class="comment">//6.3.成功，开启独立线程，实现缓存重建</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//重建缓存</span></span><br><span class="line">                    <span class="built_in">this</span>.saveShop2Redis(id,<span class="number">20L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.4.返回过期的商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="缓存工具类"><a href="#缓存工具类" class="headerlink" title="缓存工具类"></a>缓存工具类</h1><p>基于StringRedisTemplate封装一个缓存工具类，满足下列需求：<br>方法1：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间<br>方法2：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理缓存击穿问题<br>方法3：根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题<br>方法4：根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheClient</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicalExpire</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="comment">//设置逻辑过期</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">        redisData.setData(value);</span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));</span><br><span class="line">        <span class="comment">//写入Redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存穿透</span></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">Json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(Json)) &#123;</span><br><span class="line">            <span class="comment">//3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(Json, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断命中的是否是空值</span></span><br><span class="line">        <span class="keyword">if</span> (Json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//返回一个错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.不存在，根据id查询数据库</span></span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">        <span class="comment">//5.不存在，返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//将空值写入redis</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.存在，写入redis</span></span><br><span class="line">        <span class="built_in">this</span>.set(key, r, time, unit);</span><br><span class="line">        <span class="comment">//7.返回</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);<span class="comment">//线程池，开启10个线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(json)) &#123;</span><br><span class="line">            <span class="comment">//3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.命中，需要先把json反序列化为对象</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean(data, type);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="comment">//5.判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">//5.1.未过期，直接返回店铺信息</span></span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.2.已过期，需要缓存重建</span></span><br><span class="line">        <span class="comment">//6.缓存重建</span></span><br><span class="line">        <span class="comment">//6.1.获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">//6.2.判断是否获取锁成功</span></span><br><span class="line">        <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">            <span class="comment">//6.3.成功，开启独立线程，实现缓存重建</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//查数据库</span></span><br><span class="line">                    <span class="type">R</span> <span class="variable">r1</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">                    <span class="comment">//写入redis</span></span><br><span class="line">                    <span class="built_in">this</span>.setWithLogicalExpire(key, r1, time, unit);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.4.返回过期的商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, LOCK_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(flag); <span class="comment">//避免空指针</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">      <span class="comment">//缓存穿透</span></span><br><span class="line">      <span class="comment">//Shop shop = cacheClient.queryWithPassThrough(CACHE_SHOP_KEY,id,Shop.class,this::getById,CACHE_SHOP_TTL,TimeUnit.MINUTES);</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//互斥锁解决缓存击穿</span></span><br><span class="line">      <span class="comment">//Shop shop = queryWithMutex(id);</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//逻辑过期解决缓存击穿</span></span><br><span class="line">      <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span>cacheClient</span><br><span class="line">              .queryWithLogicalExpire(CACHE_SHOP_KEY,id,Shop.class,<span class="built_in">this</span>::getById,CACHE_SHOP_TTL,TimeUnit.MINUTES) ;</span><br><span class="line">      <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h1 id="缓存总结"><a href="#缓存总结" class="headerlink" title="缓存总结"></a>缓存总结</h1><h2 id="认识缓存"><a href="#认识缓存" class="headerlink" title="认识缓存"></a>认识缓存</h2><p><img src='https://pic.imgdb.cn/item/661a025e68eb935713d9aaf7.png'></p><h2 id="缓存更新策略-1"><a href="#缓存更新策略-1" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h2><p><img src='https://pic.imgdb.cn/item/661a028068eb935713d9eb6f.png'></p><p><img src='https://pic.imgdb.cn/item/661a02cf68eb935713da830b.png'></p><h2 id="缓存穿透-1"><a href="#缓存穿透-1" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p><img src='https://pic.imgdb.cn/item/661a02ec68eb935713dab8fd.png'></p><h2 id="缓存雪崩-1"><a href="#缓存雪崩-1" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p><img src='https://pic.imgdb.cn/item/661a030368eb935713dadc3f.png'></p><h2 id="缓存击穿-1"><a href="#缓存击穿-1" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p><img src='https://pic.imgdb.cn/item/661a032c68eb935713dc3453.png'></p><p><img src='https://pic.imgdb.cn/item/661a034268eb935713dd21b1.png'></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是缓存&quot;&gt;&lt;a href=&quot;#什么是缓存&quot; class=&quot;headerlink&quot; title=&quot;什么是缓存&quot;&gt;&lt;/a&gt;什么是缓存&lt;/h1&gt;&lt;p&gt;缓存就是数据交换的缓冲区（称作Cache [ kæʃ ] ），是存贮数据的临时地方，一般读写性能较高。&lt;br&gt;&lt;im</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="redis实战项目" scheme="https://wjlgmw-github-io.vercel.app/tags/redis%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>黑马点评-bug集合</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/b1dedc50.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/b1dedc50.html</id>
    <published>2024-04-12T12:04:29.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="短信登录bug"><a href="#短信登录bug" class="headerlink" title="短信登录bug"></a>短信登录bug</h1><p>idea连接不到redis<br>启动redis中出现这个警告<br>Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</p><p>描述的是找不到配置文件，我们需要指定相应的配置文件<br>在cmd中redis-server.exe redis.windows-service.conf或者redis-server.exe redis.windows.conf<br>看自己redis配置在哪个文件下就启动哪个配置文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;短信登录bug&quot;&gt;&lt;a href=&quot;#短信登录bug&quot; class=&quot;headerlink&quot; title=&quot;短信登录bug&quot;&gt;&lt;/a&gt;短信登录bug&lt;/h1&gt;&lt;p&gt;idea连接不到redis&lt;br&gt;启动redis中出现这个警告&lt;br&gt;Warning: no con</summary>
      
    
    
    
    
    <category term="黑马点评-bug-redis" scheme="https://wjlgmw-github-io.vercel.app/tags/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-bug-redis/"/>
    
  </entry>
  
  <entry>
    <title>黑马点评-短信登录-redis</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/ac89d550.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/ac89d550.html</id>
    <published>2024-04-11T20:11:37.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导入黑马点评项目"><a href="#导入黑马点评项目" class="headerlink" title="导入黑马点评项目"></a>导入黑马点评项目</h1><p>首先，导入课前资料提供的SQL文件：<br><img src='https://pic.imgdb.cn/item/6617ded968eb935713e063d6.png'></p><p>注意：Mysql的版本采用5.7及以上版本</p><p>其中的表有：<br>tb_user：用户表<br>tb_user_info：用户详情表<br>tb_shop：商户信息表<br>tb_shop_type：商户类型表<br>tb_blog：用户日记表（达人探店日记）<br>tb_follow：用户关注表<br>tb_voucher：优惠券表<br>tb_voucher_order：优惠券的订单表</p><p>结构模式<br><img src='https://pic.imgdb.cn/item/6617df1468eb935713e11c70.png'></p><h2 id="导入后端项目"><a href="#导入后端项目" class="headerlink" title="导入后端项目"></a>导入后端项目</h2><p>1.将hm-dianping导入idea<br>2.将数据资源改为自己的，mysql，redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: hmdp</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/hm_dianping?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    username: root</span><br><span class="line">    password: rongyao1314</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">    password: rongyao1314</span><br><span class="line">    lettuce:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: <span class="number">10</span></span><br><span class="line">        max-idle: <span class="number">10</span></span><br><span class="line">        min-idle: <span class="number">1</span></span><br><span class="line">        time-between-eviction-runs: 10s</span><br><span class="line">  jackson:</span><br><span class="line">    <span class="keyword">default</span>-property-inclusion: non_null # JSON处理时忽略非空字段</span><br></pre></td></tr></table></figure><p>redis-server：启动redis</p><p>启动项目后，在浏览器访问：<a href="http://localhost:8081/shop-type/list">http://localhost:8081/shop-type/list</a> ，如果可以看到数据则证明运行没有问题</p><h2 id="导入前端项目"><a href="#导入前端项目" class="headerlink" title="导入前端项目"></a>导入前端项目</h2><p>将ngix导入没有中文下面的文件夹下，启动ngix  输入命令：start nginx.exe或点图标<br>然后访问: <a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a> ，即可看到页面<br><img src='https://pic.imgdb.cn/item/6617e06668eb935713e3b684.png'></p><h1 id="基于Session实现登录"><a href="#基于Session实现登录" class="headerlink" title="基于Session实现登录"></a>基于Session实现登录</h1><p><img src='https://pic.imgdb.cn/item/6617fb7168eb93571305f922.png'></p><h2 id="发送短信验证码"><a href="#发送短信验证码" class="headerlink" title="发送短信验证码"></a>发送短信验证码</h2><p><img src='https://pic.imgdb.cn/item/661800ac68eb9357130cacd9.png'></p><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送手机验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//发送短信验证码并保存验证码</span></span><br><span class="line">    <span class="keyword">return</span>  userService.sendCode(phone,session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 发送短信验证码并保存验证码</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span>;</span><br></pre></td></tr></table></figure><p>实现service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 发送短信验证码并保存验证码</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">      <span class="comment">//1.校验手机号</span></span><br><span class="line">      <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">          <span class="comment">//2.如果不符合，返回错误信息</span></span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//3.符合，生成验证码</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);  <span class="comment">//第三方类生成</span></span><br><span class="line">      <span class="comment">//4.保存验证码到session</span></span><br><span class="line">      session.setAttribute(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line">      <span class="comment">//5.发送验证码</span></span><br><span class="line">      log.debug(<span class="string">&quot;发送短信验证码成功，验证码&#123;&#125;&quot;</span>,code);</span><br><span class="line">      <span class="comment">//返回ok</span></span><br><span class="line">      <span class="keyword">return</span> Result.ok();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="短信验证码登录，注册"><a href="#短信验证码登录，注册" class="headerlink" title="短信验证码登录，注册"></a>短信验证码登录，注册</h2><p><img src='https://pic.imgdb.cn/item/661807f968eb935713184e87.png'></p><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 登录功能</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> loginForm 登录参数，包含手机号、验证码；或者手机号、密码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginFormDTO loginForm, HttpSession session)</span>&#123;</span><br><span class="line">       <span class="comment">//实现登录功能</span></span><br><span class="line">       <span class="keyword">return</span> userService.login(loginForm,session);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>servicer接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 短信验证码登录</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> loginForm</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span>;</span><br></pre></td></tr></table></figure><p>实现service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 短信验证码登录</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> loginForm</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">       <span class="comment">//1.校验手机号</span></span><br><span class="line">       <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">           <span class="comment">//2.如果不符合，返回错误信息</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//2.校验验证码</span></span><br><span class="line">       <span class="type">Object</span> <span class="variable">Cachecode</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">       <span class="keyword">if</span> (Cachecode == <span class="literal">null</span> || !Cachecode.toString().equals(code)) &#123;</span><br><span class="line">           <span class="comment">//3.不一致，报错</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.一致，根据手机号查询用户 select * from tb_user wher phone=?</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line">       <span class="comment">//5.判断用户是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//6.不存在，创建新用户并保存</span></span><br><span class="line">           user = createUserWithPhone(phone);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//7.保存用户信息到session中</span></span><br><span class="line">       session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">       <span class="keyword">return</span> Result.ok();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建新用户</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> User <span class="title function_">createUserWithPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">       <span class="comment">//1.创建用户</span></span><br><span class="line">       User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setPhone(phone);</span><br><span class="line">       user.setNickName(USER_NICK_NAME_PREFIX+RandomUtil.randomString(<span class="number">10</span>));</span><br><span class="line">       <span class="comment">//2.保存用户</span></span><br><span class="line">       save(user);</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="登录验证功能"><a href="#登录验证功能" class="headerlink" title="登录验证功能"></a>登录验证功能</h2><p>请求并携带cookie 画圈的就是登录凭证<br><img src='https://pic.imgdb.cn/item/6618115a68eb93571324b8d1.png'></p><p>拦截器：减少登录校验，只有登录才能访问其他的，在拦截器中写登录校验的方法<br><img src='https://pic.imgdb.cn/item/6618119068eb935713250b52.png'></p><p>拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">//调用时间：Controller方法处理之前</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//2.获取session中的用户</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">//3.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//4.不存在，拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.存在，保存用户信息到ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser((User) user);</span><br><span class="line">        <span class="comment">//6.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">//调用时间：DispatcherServlet进行视图的渲染之后</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//移除用户</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将拦截器注册到配置中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">       registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">               .excludePathPatterns(</span><br><span class="line">                       <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">               );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ThreadLocal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;User&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        tl.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细用户界面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/me&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">me</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//获取当前登录的用户并返回</span></span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">      <span class="keyword">return</span> Result.ok(user);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="隐藏用户敏感信息"><a href="#隐藏用户敏感信息" class="headerlink" title="隐藏用户敏感信息"></a>隐藏用户敏感信息</h1><p>由于后端传入的数据直接是Uer数据,我们创建了UserDto类只传入用户的部分数据上去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将session中的存入的数据类型修改为UserDto和ThreadLocal中的方法数据类型也修改为UserDto类型</p><h1 id="集群的session共享问题"><a href="#集群的session共享问题" class="headerlink" title="集群的session共享问题"></a>集群的session共享问题</h1><p>session共享问题：多台Tomcat并不共享session存储空间，当请求切换到不同tomcat服务时导致数据丢失的问题。</p><p><img src='https://pic.imgdb.cn/item/6618911c68eb935713bba321.png'><br>session的替代方案应该满足：<br>数据共享<br>内存存储<br>key、value结构</p><h1 id="基于Redis实现共享session登录"><a href="#基于Redis实现共享session登录" class="headerlink" title="基于Redis实现共享session登录"></a>基于Redis实现共享session登录</h1><p>保存登录的用户信息，可以使用String结构，以JSON字符串来保存，比较直观：<br><img src='https://pic.imgdb.cn/item/6618949268eb935713c0ce1b.png'></p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD，并且内存占用更少：<br><img src='https://pic.imgdb.cn/item/661894a368eb935713c0e514.png'></p><p>各个阶段修改的地方<br><img src='https://pic.imgdb.cn/item/661894d568eb935713c12e44.png'></p><p><img src='https://pic.imgdb.cn/item/661894e568eb935713c145b7.png'></p><p>redis数据要保证：唯一性，方便提取</p><h2 id="发送短信验证码-1"><a href="#发送短信验证码-1" class="headerlink" title="发送短信验证码"></a>发送短信验证码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">      ......</span><br><span class="line">       <span class="comment">//4.保存验证码到redis //set key value ex 120  设置超时时间防止redis挂掉</span></span><br><span class="line">      stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY+phone,code,LOGIN_CODE_TTL, TimeUnit.MINUTES); <span class="comment">//跟其他业务可以区分开</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="短信验证码登录、注册"><a href="#短信验证码登录、注册" class="headerlink" title="短信验证码登录、注册"></a>短信验证码登录、注册</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">       <span class="comment">//1.校验手机号</span></span><br><span class="line">       <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">           <span class="comment">//2.如果不符合，返回错误信息</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//3.从redis获取校验验并校验</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">Cachecode</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);</span><br><span class="line">       <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">       <span class="keyword">if</span> (Cachecode == <span class="literal">null</span> || !Cachecode.equals(code)) &#123;</span><br><span class="line">           <span class="comment">//不一致，报错</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.一致，根据手机号查询用户 select * from tb_user wher phone=?</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line">       <span class="comment">//5.判断用户是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//6.不存在，创建新用户并保存</span></span><br><span class="line">           user = createUserWithPhone(phone);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//7.保存用户信息到redis中</span></span><br><span class="line">       <span class="comment">//7.1 随机生成token，作为登录令牌</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line">       <span class="comment">//7.2将User对象转为HashMap存储</span></span><br><span class="line">       <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">       Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(),</span><br><span class="line">               CopyOptions.create()</span><br><span class="line">                       .setIgnoreNullValue(<span class="literal">true</span>)</span><br><span class="line">                       .setFieldValueEditor((fieldName, fieldValue) -&gt; fieldValue.toString()));  <span class="comment">//因为有字段是Long类型而stringRedisTemplate要求的字段都是string类型的</span></span><br><span class="line">       <span class="comment">//7.3 存储</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">       stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);</span><br><span class="line">       <span class="comment">//7.4 设置token有效期</span></span><br><span class="line">       stringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">       <span class="comment">//8. 返回token</span></span><br><span class="line">       <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>登录拦截器修改  由Spring构建的类才能够依赖注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">LoginInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//1.获取请求头中的token</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (StrUtil.isBlank(token))&#123;</span><br><span class="line">           <span class="comment">//不存在，拦截,返回401状态码</span></span><br><span class="line">           response.setStatus(<span class="number">401</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       String key=LOGIN_USER_KEY+ token;</span><br><span class="line">       <span class="comment">//2.基于TOKEN获取redis中的用户</span></span><br><span class="line">       Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (userMap.isEmpty())&#123;</span><br><span class="line">           <span class="comment">//4.不存在，拦截</span></span><br><span class="line">           response.setStatus(<span class="number">401</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//5.将查询到的Hash数据转为UserDto对象</span></span><br><span class="line">       <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">       <span class="comment">//6.存在，保存用户信息到ThreadLocal</span></span><br><span class="line">       UserHolder.saveUser(userDTO);</span><br><span class="line">       <span class="comment">//7.刷新token有效期</span></span><br><span class="line">       stringRedisTemplate.expire(key,LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">       <span class="comment">//8..放行</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">       registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>(stringRedisTemplate))</span><br><span class="line">               .excludePathPatterns(</span><br><span class="line">                       <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">               );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登录拦截器优化"><a href="#登录拦截器优化" class="headerlink" title="登录拦截器优化"></a>登录拦截器优化</h2><p>因为token有效期有限，如果用户一直在首页的话（没有经过拦截器）就不会刷新token有效期，会导致token过期，让用户体验不好<br><img src='https://pic.imgdb.cn/item/6618b7fe68eb935713033a83.png'></p><p>刷新token的拦截器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefreshTokenInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String key=LOGIN_USER_KEY+ token;</span><br><span class="line">        <span class="comment">//2.基于TOKEN获取redis中的用户</span></span><br><span class="line">        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.判断用户是否存在</span></span><br><span class="line">         <span class="keyword">if</span> (userMap.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//4.不存在，拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.将查询到的Hash数据转为UserDto对象</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//6.存在，保存用户信息到ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line">        <span class="comment">//7.刷新token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(key,LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//8..放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//移除用户</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>登录拦截器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.判断是否需要拦截(ThreadLocal中是否有用户)</span></span><br><span class="line">        <span class="keyword">if</span> (UserHolder.getUser()==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//没有，需要拦截，设置状态码</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="comment">//拦截</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>配置器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">       <span class="comment">//登录拦截器  order值越小越先执行</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">               .excludePathPatterns(</span><br><span class="line">                       <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">               ).order(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//token刷新的拦截器</span></span><br><span class="line">       registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">RefreshTokenInterceptor</span>(stringRedisTemplate)).addPathPatterns(<span class="string">&quot;/**&quot;</span>).order(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;导入黑马点评项目&quot;&gt;&lt;a href=&quot;#导入黑马点评项目&quot; class=&quot;headerlink&quot; title=&quot;导入黑马点评项目&quot;&gt;&lt;/a&gt;导入黑马点评项目&lt;/h1&gt;&lt;p&gt;首先，导入课前资料提供的SQL文件：&lt;br&gt;&lt;img src=&#39;https://pic.im</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="redis实战项目" scheme="https://wjlgmw-github-io.vercel.app/tags/redis%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>redis面试</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/18180af4.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/18180af4.html</id>
    <published>2024-04-11T15:46:45.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总概括"><a href="#总概括" class="headerlink" title="总概括"></a>总概括</h1><p><img src='https://s21.ax1x.com/2024/04/11/pFXtlND.png'></p><p><img src='https://s21.ax1x.com/2024/04/11/pFXt89H.png'></p><h1 id="redis使用场景"><a href="#redis使用场景" class="headerlink" title="redis使用场景"></a>redis使用场景</h1><u>我看你做的项目中，都用到了redis，你在最近的项目中哪些场景使用了redis呢？</u><p>一是验证你的项目场景的真实性，二是为了作为深入发问的切入点<br>缓存  缓存三兄弟（穿透、击穿、雪崩）、双写一致、持久化、数据过期策略，数据淘汰策略<br>分布式锁  setnx、redisson<br>消息队列、延迟队列  何种数据类型<br><u>如果发生了缓存穿透、击穿、雪崩，该如何解决？</u></p><h2 id="缓存三兄弟"><a href="#缓存三兄弟" class="headerlink" title="缓存三兄弟"></a>缓存三兄弟</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>例：<br>一个get请求：api/news/getById/1   -1更明显（出错点，恶意攻击DB）<br><img src='https://s21.ax1x.com/2024/04/11/pFXNws1.png'></p><p>缓存穿透：查询一个不存在的数据，mysql查询不到数据也不会直接写入缓存，就会导致每次请求都查数据库<br>解决方案一：缓存空数据，查询返回的数据为空，仍把这个空结果进行缓存   {key:1,value:null}<br>优点：简单<br>缺点：消耗内存，可能会发生不一致的问题(我们将空结果缓存到redis中，如果该请求的时候数据新增了，不再是空数据的时候，这时候就会发送DB和redis数据不一致的问题)</p><p><img src='https://s21.ax1x.com/2024/04/11/pFXN6iD.png'><br>解决方案二：布隆过滤器<br>优点：内存占用较少，没有多余key<br>缺点：实现复杂，存在误判(必定存在误判的)</p><h4 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h4><p>bitmap（位图）：相当于是一个以（bit）位为单位的数组，数组中每个单元只能存储二进制数0或1<br>布隆过滤器作用：布隆过滤器可以用于检索一个元素是否在一个集合中。<br><img src='https://s21.ax1x.com/2024/04/11/pFXNgRH.png'></p><p>误差存在情况<br><img src='https://s21.ax1x.com/2024/04/11/pFXNqzj.png'><br>误判率：数组越小误判率就越大，数组越大误判率就越小，但是同时带来了更多的内存消耗。</p><p>实现布隆过滤器<br><img src='https://s21.ax1x.com/2024/04/11/pFXNXyn.png'></p><p>问答例子：<br><img src='https://s21.ax1x.com/2024/04/11/pFXUMfe.png'></p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿：给某一个key设置了过期时间，当key过期的时候，恰好这时间点对这个key有大量的并发请求过来，这些并发的请求可能会瞬间把DB压垮.如图所示：<br><img src='https://pic.imgdb.cn/item/6617c3ba68eb935713a809ed.png'></p><p>解决方案一：互斥锁<br>解决方案二：逻辑过期</p><p>互斥锁：<img src='https://pic.imgdb.cn/item/6617c42468eb935713a8e62c.png'><br>可以保证强一致性，但性能差</p><p>逻辑过期：<img src='https://pic.imgdb.cn/item/6617c49068eb935713a9d244.png'><br>高可用，性能优，不能保证数据绝对一致</p><p>面试：<img src='https://pic.imgdb.cn/item/6617c54868eb935713aaf65a.png'></p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。<br><img src='https://pic.imgdb.cn/item/6617c78a68eb935713ada779.png'><br>给不同的Key的TTL添加随机值 (设置不同的过期时间)</p><p>当redis宕机时候的解决方案：<br>利用Redis集群提高服务的可用性   哨兵模式、集群模式<br>给缓存业务添加降级限流策略    ngxin或spring cloud gateway   （保底策略，穿透，击穿都可以用）<br>给业务添加多级缓存  Guava或Caffeine</p><p>面试：<br><img src='https://pic.imgdb.cn/item/6617c83868eb935713af483c.png'></p><p>记忆技巧<br><img src='https://pic.imgdb.cn/item/6617c85668eb935713af9c65.png'></p><h2 id="双写一致性"><a href="#双写一致性" class="headerlink" title="双写一致性"></a>双写一致性</h2><p>分为两种情况：1.一致性要求高  2.允许延迟一致</p><p>后续再更新，超标了，等做个项目来，头疼<br><img src='https://pic.imgdb.cn/item/6617d19c68eb935713c5df9b.gif'></p><p>… …</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;总概括&quot;&gt;&lt;a href=&quot;#总概括&quot; class=&quot;headerlink&quot; title=&quot;总概括&quot;&gt;&lt;/a&gt;总概括&lt;/h1&gt;&lt;p&gt;&lt;img src=&#39;https://s21.ax1x.com/2024/04/11/pFXtlND.png&#39;&gt;&lt;/p&gt;
&lt;p&gt;&lt;im</summary>
      
    
    
    
    <category term="面试" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="redis面试" scheme="https://wjlgmw-github-io.vercel.app/tags/redis%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>学成在线项目(八) 课程发布模块</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/12dbdeec.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/12dbdeec.html</id>
    <published>2024-04-09T14:52:38.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h2><h4 id="定义课程预览接口"><a href="#定义课程预览接口" class="headerlink" title="定义课程预览接口"></a>定义课程预览接口</h4><div class="tip info"><p>1、请求参数接口进行分析：传入课程id，表示要预览哪一门课程。<br>2、响应结果输出课程详情页面到浏览器。<br>响应页面到浏览器使用freemarker模板引擎技术实现，首先从课程资料目录下获取课程预览页面course_template.html，拷贝至内容管理的接口工程的resources/templates下，并将其在本目录复制一份命名为course_template.ftl </p></div><p>开始定义接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 课程预览，发布</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/9 16:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoursePublishController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CoursePublishService coursePublishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/coursepreview/&#123;courseId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">preview</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">//查询课程的信息作为模型数据</span></span><br><span class="line">        <span class="type">CoursePreviewDto</span> <span class="variable">coursePreviewDto</span> <span class="operator">=</span>coursePublishService.getCoursePreviewInfo(courseId);</span><br><span class="line">        <span class="comment">//指定模型</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;model&quot;</span>,coursePreviewDto);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;course_template&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>测试：访问<a href="http://localhost:63040/content/coursepreview/74">http://localhost:63040/content/coursepreview/74</a><br>访问页面内容没有样式，稍后做处理</p><h3 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h3><div class="tip cogs"><p>样式静态资源全在门户下，我们需要由Nginx反向代理访问课程预览接口，通过门户的URL去访问课程预览。</p><p>1、在Nginx下配置：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#后台网关</span><br><span class="line"> upstream gatewayserver&#123;</span><br><span class="line">   server 127.0.0.1:63010 weight=10;</span><br><span class="line"> &#125; </span><br><span class="line"> server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  www.51xuecheng.cn localhost;</span><br><span class="line">       ....</span><br><span class="line">       #api</span><br><span class="line">       location /api/ &#123;</span><br><span class="line">               proxy_pass http://gatewayserver/;</span><br><span class="line">       &#125; </span><br></pre></td></tr></table></figure><br>2配置完后重新加载nginx<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s reload</span><br></pre></td></tr></table></figure><br>3、启动微服务网关<br>4、此时访问新地址： <a href="http://www.51xuecheng.cn/api/content/coursepreview/74">http://www.51xuecheng.cn/api/content/coursepreview/74</a> </p></div><p>页面虽然正常，但是里边的内容都是静态内容，稍后接口层调用service方式获取模型数据并进行页面渲染。<br>目前的方式是通过Nginx访问网关，由网关再将请求转发到微服务，Nginx是整个的项目最前方的代理服务器，如下图：<br><img src='https://s21.ax1x.com/2024/04/09/pFOmUN6.png'></p><h2 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h2><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>课程预览就是把课程基本信息、营销信息、课程计划、师资等课程的相关信息进行整合，在预览页面进行展示。如下图：<br><img src='https://s21.ax1x.com/2024/04/09/pFOmw9O.png'><br>在使用freemarker渲染生成视图时需要数据模型，此数据模型包括了基本信息、营销信息、课程计划、师资等信息。<br>所以首先定义一个数据模型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 课程预览数据模型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Data</span></span><br><span class="line"> <span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoursePreviewDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//课程基本信息,课程营销信息</span></span><br><span class="line">    CourseBaseInfoDto courseBase;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//课程计划信息</span></span><br><span class="line">    List&lt;TeachplanDto&gt; teachplans;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//师资信息暂时不加...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h3><p>Service负责从数据库查询基本信息、营销信息、课程计划等课程相关信息，组成CoursePreviewDto 对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 课程预览、发布接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CoursePublishService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span> 获取课程预览信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> courseId 课程id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> com.xuecheng.content.model.dto.CoursePreviewDto</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">   <span class="keyword">public</span> CoursePreviewDto <span class="title function_">getCoursePreviewInfo</span><span class="params">(Long courseId)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接口实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoursePublishServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CoursePublishService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CourseBaseInfoService courseBaseInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TeachplanService teachplanService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CoursePreviewDto <span class="title function_">getCoursePreviewInfo</span><span class="params">(Long courseId)</span> &#123;</span><br><span class="line">        <span class="type">CoursePreviewDto</span> <span class="variable">coursePreviewDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoursePreviewDto</span>();</span><br><span class="line">        <span class="comment">//课程基本信息，营销信息</span></span><br><span class="line">        <span class="type">CourseBaseInfoDto</span> <span class="variable">courseBaseInfo</span> <span class="operator">=</span> courseBaseInfoService.getCourseBaseInfo(courseId);</span><br><span class="line">        coursePreviewDto.setCourseBase(courseBaseInfo);</span><br><span class="line">        <span class="comment">//课程计划信息</span></span><br><span class="line">        List&lt;TeachplanDto&gt; teachplanTree = teachplanService.findTeachplanTree(courseId);</span><br><span class="line">        coursePreviewDto.setTeachplans(teachplanTree);</span><br><span class="line">        <span class="keyword">return</span> coursePreviewDto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="接口层完善"><a href="#接口层完善" class="headerlink" title="接口层完善"></a>接口层完善</h3><p>接口层Controller调用Service方法获取模板引擎需要的模型数据 前面的接口已经是完善的了</p><h3 id="前后端联调"><a href="#前后端联调" class="headerlink" title="前后端联调"></a>前后端联调</h3><p>原来前端直接指向后台网关地址，现在要更改为Nginx的地址，如下：<br><img src='https://s21.ax1x.com/2024/04/09/pFOn9bR.png'><br>重启前端工程，进入课程列表点击”预览”按钮，正常打开课程预览页面</p><h3 id="编写模板"><a href="#编写模板" class="headerlink" title="编写模板"></a>编写模板</h3><p>模型数据准备好后下一步将模型数据填充到course_template.ftl上，填充时注意不要一次填充太多，一边填充一边刷新调试。<br>freemarker提供很多指令用于解析各种类型的数据模型，<br>参考地址：<a href="http://freemarker.foofun.cn/ref_directives.html">http://freemarker.foofun.cn/ref_directives.html</a><br>修改模板后需要编译，如下图：<br><img src='https://s21.ax1x.com/2024/04/09/pFOnMVI.png'></p><h3 id="视频播放页面接口"><a href="#视频播放页面接口" class="headerlink" title="视频播放页面接口"></a>视频播放页面接口</h3><p>从课程详情页面进入视频播放页面，如下图：<br><img src='https://s21.ax1x.com/2024/04/09/pFOn8G8.png'><br>在此页面需要从后台获取课程信息、根据课程计划获取对应的视频地址，下边编写这两个接口：<br>获取课程信息接口：/open/content/course/whole/{courseId} 响应：同课程预览service接口返回数据</p><p>根据课程计划获取视频地址接口：/open/media/preview/{mediaId}<br>响应：{“code”:0,”msg”:”success”,”result”:”视频的url”,”successful”:true}</p><p>在nginx配置如下地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#openapi</span></span><br><span class="line">location /open/content/ &#123;</span><br><span class="line">        proxy_pass http://gatewayserver/content/open/;</span><br><span class="line">&#125; </span><br><span class="line">location /open/media/ &#123;</span><br><span class="line">        proxy_pass http://gatewayserver/media/open/;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>配置运行nginx.exe -s reload加载nginx的配置文件 </p><p>在内容管理接口层定义CourseOpenController类，<br>并定义接口：获取课程信息接口：/open/content/course/whole/{courseId}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(value = &quot;课程公开查询接口&quot;,tags = &quot;课程公开查询接口&quot;)</span></span><br><span class="line"> <span class="meta">@RestController</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/open&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseOpenController</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> CourseBaseInfoService courseBaseInfoService;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> CoursePublishService coursePublishService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/course/whole/&#123;courseId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CoursePreviewDto <span class="title function_">getPreviewInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span> &#123;</span><br><span class="line">    <span class="comment">//获取课程预览信息</span></span><br><span class="line">    <span class="type">CoursePreviewDto</span> <span class="variable">coursePreviewInfo</span> <span class="operator">=</span> coursePublishService.getCoursePreviewInfo(courseId);</span><br><span class="line">    <span class="keyword">return</span> coursePreviewInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在媒资管理服务media-api工程定义MediaOpenController类，并定义接口/open/media/preview/{mediaId}<br>理解：前端界面点击课程计划，会显示出视频。因为前端课程计划绑定了相应的媒资。会传递给后端相应的媒资id<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(value = &quot;媒资文件管理接口&quot;,tags = &quot;媒资文件管理接口&quot;)</span></span><br><span class="line"> <span class="meta">@RestController</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/open&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediaOpenController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  MediaFileService mediaFileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;预览文件&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/preview/&#123;mediaId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestResponse&lt;String&gt; <span class="title function_">getPlayUrlByMediaId</span><span class="params">(<span class="meta">@PathVariable</span> String mediaId)</span>&#123;</span><br><span class="line">        <span class="comment">//查询媒资文件信息</span></span><br><span class="line">        <span class="type">MediaFiles</span> <span class="variable">mediaFiles</span> <span class="operator">=</span> mediaFileService.getFileById(mediaId);</span><br><span class="line">       <span class="keyword">if</span> (mediaFiles==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> RestResponse.validfail(<span class="string">&quot;找不到视频&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//取出视频播放地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> mediaFiles.getUrl();</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isEmpty(url))&#123;</span><br><span class="line">           <span class="keyword">return</span> RestResponse.validfail(<span class="string">&quot;该视频正在处理中&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> RestResponse.success(mediaFiles.getUrl());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据媒资id查询文件信息</span></span><br><span class="line">    MediaFiles <span class="title function_">getFileById</span><span class="params">(String mediaId)</span>;</span><br></pre></td></tr></table></figure><br>实现service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> MediaFiles <span class="title function_">getFileById</span><span class="params">(String mediaId)</span> &#123;</span><br><span class="line">      <span class="type">MediaFiles</span> <span class="variable">mediaFiles</span> <span class="operator">=</span> mediaFilesMapper.selectById(mediaId);</span><br><span class="line">      <span class="keyword">return</span> mediaFiles;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>测试<br>定义好后，启动内容管理、媒资管理、后台服务网关服务，测试视频播放页面是否可以正常获取课程计划，点击具体的课程计划是否正常可以播放视频。</p><h1 id="课程审核"><a href="#课程审核" class="headerlink" title="课程审核"></a>课程审核</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h3><p>根据模块需求分析，课程发布前要先审核，审核通过方可发布。下图是课程审核及发布的流程图：<br><img src='https://s21.ax1x.com/2024/04/10/pFObbge.png'></p><div class="tip info"><p>为什么课程审核通过才可以发布呢？<br>这样做为了防止课程信息有违规情况，课程信息不完善对网站用户体验也不好，课程审核不仅起到监督作用，也是帮助教学机构规范使用平台的手段。<br>如何控制课程审核通过才可以发布课程呢？<br>在课程基本表course_base表设置课程审核状态字段，包括：未提交、已提交(未审核)、审核通过、审核不通过。</p></div><p>下边是课程状态的转化关系：<br><img src='https://s21.ax1x.com/2024/04/10/pFOq8bR.png'></p><div class="tip info"><p>说明如下：<br>1、一门课程新增后它的审核状为”未提交“，发布状态为”未发布“。<br>2、课程信息编辑完成，教学机构人员执行”提交审核“操作。此时课程的审核状态为”已提交“。<br>3、当课程状态为已提交时运营平台人员对课程进行审核。<br>4、运营平台人员审核课程，结果有两个：审核通过、审核不通过。<br>5、课程审核过后不管状态是通过还是不通过，教学机构可以再次修改课程并提交审核，此时课程状态为”已提交“。此时运营平台人员再次审核课程。<br>6、课程审核通过，教学机构人员可以发布课程，发布成功后课程的发布状态为”已发布“。<br>7、课程发布后通过”下架“操作可以更改课程发布状态为”下架“<br>8、课程下架后通过”上架“操作可以再次发布课程，上架后课程发布状态为“发布”。</p></div><h3 id="数据模型-1"><a href="#数据模型-1" class="headerlink" title="数据模型"></a>数据模型</h3><div class="tip key"><p>通过业务流程的分析，现在我们思考：<br>1、 <u>课程提交审核后还允许修改课程吗？</u><br>如果不允许修改是不合理的，因为提交审核后可以继续做下一个阶段的课程内容，比如添加课程计划，上传课程视频等。<br>如果允许修改那么课程审核时看到的课程内容从哪里来？如果也从课程基本信息表、课程营销表、课程计划表查询那么存在什么问题呢？</p></div><p>如下图：<br><img src='https://s21.ax1x.com/2024/04/10/pFOqWRS.png'><br>运营人员审核课程和教学机构编辑课程操作的数据是同一份，此时会导致冲突。比如：运营人员正在审核时教学机构把数据修改了。<br>为了解决这个问题，专门设计<u>课程预发布表</u> 。<br><img src='https://s21.ax1x.com/2024/04/10/pFOqfxg.png'></p><p>提交课程审核，将课程信息汇总后写入课程预发布表，课程预发布表记录了教学机构在某个时间点要发布的课程信息。<br>课程审核人员从预发布表查询信息进行审核。<br>课程审核的同时可以对课程进行修改，修改的内容不会写入课程预发布表。<br>课程审核通过执行课程发布，将课程预发布表的信息写入课程发布表。</p><p>2、<u>提交审核课程后，也修改了课程信息，可以再次提交审核吗？</u><br>这个问题在上边分析课程审核状态时已经有了答案，如下图：<br><img src='https://s21.ax1x.com/2024/04/10/pFOqTZn.png'><br>提交审核课程后，必须等到课程审核完成才可以再次提交课程。</p><p>提交审核将信息写入课程预发布表，课程预发布表结构如下： 具体字段属性见数据库表<br><img src='https://s21.ax1x.com/2024/04/10/pFOqXzF.png'></p><p>更新课程基本信息表的课程审核状态为：已经提交<br>课程审核后更新课程基本信息表的审核状态、课程预发布表的审核状态，并将审核结果写入课程审核记录。<br>审核记录表结构如下：<br><img src='https://s21.ax1x.com/2024/04/10/pFOLAzD.png'></p><h2 id="接口定义-1"><a href="#接口定义-1" class="headerlink" title="接口定义"></a>接口定义</h2><p>下边定义提交课程审核的接口，在课程发布Controller中定义接口如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping</span> (<span class="string">&quot;/courseaudit/commit/&#123;courseId&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commitAudit</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h2 id="接口开发-1"><a href="#接口开发-1" class="headerlink" title="接口开发"></a>接口开发</h2><h3 id="Dao开发"><a href="#Dao开发" class="headerlink" title="Dao开发"></a>Dao开发</h3><div class="tip cogs"><p>1、查询课程基本信息、课程营销信息、课程计划信息等课程相关信息，整合为课程预发布信息。<br>2、向课程预发布表course_publish_pre插入一条记录，如果已经存在则更新，审核状态为：已提交。<br>3、更新课程基本表course_base课程审核状态为：已提交。<br>约束：<br>1、对已提交审核的课程不允许提交审核。<br>2、本机构只允许提交本机构的课程。<br>3、没有上传图片不允许提交审核。<br>4、没有添加课程计划不允许提交审核。</p><p>使用代码生成器生成课程发布表、课程预发布表的PO、Mpper，并拷贝到相应的工程下。</p></div><h3 id="Service开发"><a href="#Service开发" class="headerlink" title="Service开发"></a>Service开发</h3><p>在课程发布Service类中定义接口如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 提交审核</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> courseId  课程id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commitAudit</span><span class="params">(Long companyId,Long courseId)</span>;</span><br></pre></td></tr></table></figure><br>实现service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commitAudit</span><span class="params">(Long companyId, Long courseId)</span> &#123;</span><br><span class="line">        <span class="type">CourseBaseInfoDto</span> <span class="variable">courseBaseInfo</span> <span class="operator">=</span> courseBaseInfoService.getCourseBaseInfo(courseId);</span><br><span class="line">        <span class="keyword">if</span> (courseBaseInfo==<span class="literal">null</span>)&#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;课程找不到&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//审核状态</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auditStatus</span> <span class="operator">=</span> courseBaseInfo.getAuditStatus();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果课程的审核状态为已提交则不允许提交</span></span><br><span class="line">        <span class="keyword">if</span> (auditStatus.equals(<span class="string">&quot;202003&quot;</span>))&#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;课程已提交请等待审核&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//本机构只能提交本机构的课程</span></span><br><span class="line">        <span class="comment">//todo:本机构只能提交本机构的课程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//课程的图片、计划信息没有填写也不允许提交</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pic</span> <span class="operator">=</span> courseBaseInfo.getPic();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(pic))&#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;请上传课程图片&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询课程计划</span></span><br><span class="line">        <span class="comment">//课程计划信息</span></span><br><span class="line">        List&lt;TeachplanDto&gt; teachplanTree = teachplanService.findTeachplanTree(courseId);</span><br><span class="line">        <span class="keyword">if</span> (teachplanTree==<span class="literal">null</span>||teachplanTree.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;请编写课程计划&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查询到课程基本信息、营销信息、计划等信息插入到课程预发布表</span></span><br><span class="line">        <span class="type">CoursePublishPre</span> <span class="variable">coursePublishPre</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoursePublishPre</span>();</span><br><span class="line">        BeanUtils.copyProperties(courseBaseInfo,coursePublishPre);</span><br><span class="line">        <span class="comment">//设置机构id</span></span><br><span class="line">        coursePublishPre.setCompanyId(companyId);</span><br><span class="line">        <span class="comment">//营销信息</span></span><br><span class="line">        <span class="type">CourseMarket</span> <span class="variable">courseMarket</span> <span class="operator">=</span> courseMarketMapper.selectById(courseId);</span><br><span class="line">        <span class="comment">//转json</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">courseMarketJson</span> <span class="operator">=</span> JSON.toJSONString(courseMarket);</span><br><span class="line">        coursePublishPre.setMarket(courseMarketJson);</span><br><span class="line">        <span class="comment">//计划信息</span></span><br><span class="line">        <span class="comment">//转json</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">teachplanTreeJson</span> <span class="operator">=</span> JSON.toJSONString(teachplanTree);</span><br><span class="line">        coursePublishPre.setTeachplan(teachplanTreeJson);</span><br><span class="line">        <span class="comment">//状态为已提交</span></span><br><span class="line">        coursePublishPre.setStatus(<span class="string">&quot;202003&quot;</span>);</span><br><span class="line">        <span class="comment">//提交时间</span></span><br><span class="line">        coursePublishPre.setCreateDate(LocalDateTime.now());</span><br><span class="line">        <span class="comment">//查询预发布表，如果有记录则更新，没有则插入</span></span><br><span class="line">        <span class="type">CoursePublishPre</span> <span class="variable">coursePublishPreObj</span> <span class="operator">=</span> coursePublishPreMapper.selectById(courseId);</span><br><span class="line">        <span class="keyword">if</span> (coursePublishPreObj==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//插入</span></span><br><span class="line">            coursePublishPreMapper.insert(coursePublishPre);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//更新</span></span><br><span class="line">            coursePublishPreMapper.updateById(coursePublishPre);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新课程基本信息表的审核状态为已提交</span></span><br><span class="line">        <span class="type">CourseBase</span> <span class="variable">courseBase</span> <span class="operator">=</span> courseBaseMapper.selectById(courseId);</span><br><span class="line">        courseBase.setAuditStatus(<span class="string">&quot;202003&quot;</span>); <span class="comment">//审核状态为已提交</span></span><br><span class="line"></span><br><span class="line">        courseBaseMapper.updateById(courseBase);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="接口完善"><a href="#接口完善" class="headerlink" title="接口完善"></a>接口完善</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping</span> (<span class="string">&quot;/courseaudit/commit/&#123;courseId&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commitAudit</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span>&#123;</span><br><span class="line">     <span class="type">Long</span> <span class="variable">companyId</span> <span class="operator">=</span> <span class="number">1232141425L</span>;</span><br><span class="line">     coursePublishService.commitAudit(companyId,courseId);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p>使用前端提前课程审核：<br>1、找一门信息不全的课程，测试各各约束条件。<br>2、正常提交后，观察数据库中课程预发布表记录的内容是否完整。<br>3、测试审核过后再次提交，提交后观察数据库中课程预发布表记录的内容是否正确。<br>审核通过需手动修改数据库：<br>1、修改课程预发布表的状态为审核通过202004。<br>2、修改课程基本表的审核状态为审核通过202004。</p><h1 id="课程发布"><a href="#课程发布" class="headerlink" title="课程发布"></a>课程发布</h1><h2 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="数据模型-2"><a href="#数据模型-2" class="headerlink" title="数据模型"></a>数据模型</h3><p>教学机构人员在课程审核通过后即可发布课程，课程发布后会公开展示在网站上供学生查看、选课和学习。<br>在网站上展示课程信息需要解决课程信息显示的性能问题，如果速度慢(排除网速)会影响用户的体验性。</p><u>如何去快速搜索课程？</u><u>打开课程详情页面仍然去查询数据库可行吗？</u><p>为了提高网站的速度需要将课程信息进行缓存，并且要将课程信息加入索引库方便搜索，下图显示了课程发布后课程信息的流转情况：<br><img src='https://s21.ax1x.com/2024/04/10/pFOOWuQ.png'></p><div class="tip bell"><p>1、向内容管理数据库的课程发布表存储课程发布信息，更新课程基本信息表中发布状态为已发布。<br>2、向Redis存储课程缓存信息。<br>3、向Elasticsearch存储课程索引信息。<br>4、请求分布文件系统存储课程静态化页面(即html页面)，实现快速浏览课程详情页面。</p></div><p>课程发布表的数据来源于课程预发布表，它们的结构基本一样，只是课程发布表中的状态是课程发布状态，如下图：<br><img src='https://pic.imgdb.cn/item/66164fc268eb9357134b054c.png'></p><p>redis中的课程缓存信息是将课程发布表中的数据转为json进行存储。<br>elasticsearch中的课程索引信息是根据搜索需要将课程名称、课程介绍等信息进行索引存储。<br>MinIO中存储了课程的静态化页面文件（html网页），查看课程详情是通过文件系统去浏览课程详情页面。</p><h2 id="分布式事务技术方案"><a href="#分布式事务技术方案" class="headerlink" title="分布式事务技术方案"></a>分布式事务技术方案</h2><h3 id="什么是分布式事务"><a href="#什么是分布式事务" class="headerlink" title="什么是分布式事务"></a>什么是分布式事务</h3><p>一次课程发布操作需要向数据库、redis、elasticsearch、MinIO写四份数据，这里存在分布式事务问题。<br><u>什么是分布式事务？</u><br><u>首先理解什么是本地事务？</u></p><div class="tip info"><p>平常我们在程序中通过spring去控制事务是利用数据库本身的事务特性来实现的，因此叫数据库事务，由于应用主要靠关系数据库来控制事务，此数据库只属于该应用，所以基于本应用自己的关系型数据库的事务又被称为本地事务。 </p><p>本地事务具有ACID四大特性，数据库事务在实现时会将一次事务涉及的所有操作全部纳入到一个不可分割的执行单元，该执行单元中的所有操作 要么都成功，要么都失败，只要其中任一操作执行失败，都将导致整个事务的回滚。</p></div><u>理解了本地事务，什么是分布式事务？</u><div class="tip info"><p>现在的需求是课程发布操作后将数据写入数据库、redis、elasticsearch、MinIO四个地方，这四个地方已经不限制在一个数据库内，是由四个分散的服务去提供，与这四个服务去通信需要网络通信，而网络存在不可到达性，这种分布式系统环境下，通过与不同的服务进行网络通信去完成事务称之为分布式事务。</p></div><p>在分布式系统中分布式事务的场景很多：<br>例如用户注册送积分，银行转账，创建订单减库存，这些都是分布式事务。<br>拿转账举例：<br>我们知道本地事务依赖数据库本身提供的事务特性来实现，因此以下逻辑可以控制本地事务：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin transaction； </span><br><span class="line"><span class="comment">//1.本地数据库操作：张三减少金额 </span></span><br><span class="line"><span class="comment">//2.本地数据库操作：李四增加金额 </span></span><br><span class="line">commit transation; </span><br></pre></td></tr></table></figure></p><p>但是在分布式环境下，会变成下边这样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">begin transaction； </span><br><span class="line"><span class="comment">//1.本地数据库操作：张三减少金额 </span></span><br><span class="line"><span class="comment">//2.远程调用：让李四增加金额 </span></span><br><span class="line"></span><br><span class="line">commit transation;</span><br></pre></td></tr></table></figure><br>可以设想，当远程调用让李四增加金额成功了，由于网络问题远程调用并没有返回，此时本地事务提交失败就回滚了张三减少金额的操作，此时张三和李四的数据就不一致了。<br>因此在分布式架构的基础上，传统数据库事务就无法使用了，张三和李四的账户不在一个数据库中甚至不在一个应 用系统里，实现转账事务需要通过远程调用，由于网络问题就会导致分布式事务问题。 </p><p>下边的场景都会产生分布式事务：<br>微服务架构下：<br><img src='https://pic.imgdb.cn/item/6616544b68eb9357135b3699.png'></p><p>单服务多数据库：<br><img src='https://pic.imgdb.cn/item/6616552368eb9357135ee26f.png'></p><p>多服务单数据库:<br><img src='https://pic.imgdb.cn/item/6616557c68eb93571360b826.png'></p><h3 id="什么是CAP理论"><a href="#什么是CAP理论" class="headerlink" title="什么是CAP理论"></a>什么是CAP理论</h3><p>控制分布式事务首先需要理解CAP理论，什么是CAP理论？<br>CAP是 Consistency、Availability、Partition tolerance三个词语的缩写，分别表示一致性、可用性、分区容忍性。<br>使用下边的分布式系统结构 进行说明：</p><p><img src='https://pic.imgdb.cn/item/66165c6268eb9357137823f5.png'></p><div class="tip key"><p>客户端经过网关访问用户服务的两个结点，一致性是指用户不管访问哪一个结点拿到的数据都是最新的，比如查询小明的信息，不能出现在数据没有改变的情况下两次查询结果不一样。<br>可用性是指任何时候查询用户信息都可以查询到结果，但不保证查询到最新的数据。<br>分区容忍性也叫分区容错性，当系统采用分布式架构时由于网络通信异常导致请求中断、消息丢失，但系统依然对外提供服务。<br>CAP理论要强调的是在分布式系统中这三点不可能全部满足，由于是分布式系统就要满足分区容忍性，因为服务之间难免出现网络异常，不能因为局部网络异常导致整个系统不可用。<br>满足P那么C和A不能同时满足：<br>比如我们添加一个用户小明的信息，该信息先添加到结点1中，再同步到结点2中</p></div><p>如下图：<br><img src='https://pic.imgdb.cn/item/66165cf368eb9357137aadbd.png'></p><p>如果要满足C一致性，必须等待小明的信息同步完成系统才可用（否则会出现请求到结点2时查询不到数据，违反了一致性），在信息同步过程中系统是不可用的，所以满足C的同时无法满足A。<br>如果要满足A可用性，要时刻保证系统可用就不用等待信息同步完成，此时系统的一致性无法满足。</p><p>所以在分布式系统中进行分布式事务控制，要么保证CP、要么保证AP。</p><h3 id="分布式事务控制方案"><a href="#分布式事务控制方案" class="headerlink" title="分布式事务控制方案"></a>分布式事务控制方案</h3><div class="tip success"><p><u>学习了CAP理论该如何控制分布式事务呢？</u></p><p>学习了CAP理论我们知道进行分布式事务控制要在C和A中作出取舍，保证一致性就不要保证可用性，保证可用性就不要保证一致，首先你确认是要CP还是AP，具体要根据应用场景进行判断。<br>CP的场景：满足C舍弃A，强调一致性。<br>跨行转账：一次转账请求要等待双方银行系统都完成整个事务才算完成，只要其中一个失败另一方执行回滚操作。<br>开户操作：在业务系统开户同时要在运营商开户，任何一方开户失败该用户都不可使用，所以要满足CP。<br>AP的场景：满足A舍弃C，强调可用性。<br>订单退款，今日退款成功，明日账户到账，只要用户可以接受在一定时间内到账即可。<br>注册送积分，注册成功积分在24分到账。<br>支付短信通信，支付成功发短信，短信发送可以有延迟，甚至没有发送成功。<br>在实际应用中符合AP的场景较多，其实虽然AP舍弃C一致性，实际上最终数据还是达到了一致，也就满足了最终一致性，所以业界定义了BASE理论。</p><p><u>什么是BASE理论？</u><br>BASE 是 Basically Available(基本可用)、Soft state(软状态)和 Eventually consistent (最终一致性)三个短语的缩写。<br>基本可用：当系统无法满足全部可用时保证核心服务可用即可，比如一个外卖系统，每到中午12点左右系统并发量很高，此时要保证下单流程涉及的服务可用，其它服务暂时不可用。<br>软状态：是指可以存在中间状态，比如：打印自己的社保统计情况，该操作不会立即出现结果，而是提示你打印中，请在XXX时间后查收。虽然出现了中间状态，但最终状态是正确的。<br>最终一致性：退款操作后没有及时到账，经过一定的时间后账户到账，舍弃强一致性，满足最终一致性。</p><p><u>分布式事务控制有哪些常用的技术方案？</u><br>实现CP就是要实现强一致性:<br>使用Seata框架基于AT模式实现<br>使用Seata框架基于TCC模式实现。<br>实现AP则要保证最终数据一致性:<br>使用消息队列通知的方式去实现，通知失败自动重试，达到最大失败次数需要人工处理；<br>使用任务调度的方案，启动任务调度将课程信息由数据库同步到elasticsearch、MinIO、redis中。</p></div><h3 id="课程发布的事务控制方案"><a href="#课程发布的事务控制方案" class="headerlink" title="课程发布的事务控制方案"></a>课程发布的事务控制方案</h3><u>学习了这么多的理论，回到课程发布，执行课程发布操作后要向数据库、redis、elasticsearch、MinIO写四份数据，这个场景用哪种方案？</u><p>满足CP？<br>如果要满足CP就表示课程发布操作后向数据库、redis、elasticsearch、MinIO写四份数据，只要有一份写失败其它的全部回滚。<br>满足AP？<br>课程发布操作后，先更新数据库中的课程发布状态，更新后向redis、elasticsearch、MinIO写课程信息，只要在一定时间内最终向redis、elasticsearch、MinIO写数据成功即可。<br>目前我们已经有了任务调度的技术积累，这里选用任务调度的方案去实现分布式事务控制，课程发布满足AP即可。<br>下图是具体的技术方案：<br><img src='https://s21.ax1x.com/2024/04/10/pFOziFA.png'></p><p>1、在内容管理服务的数据库中添加一个消息表，消息表和课程发布表在同一个数据库。<br>2、点击课程发布通过本地事务向课程发布表写入课程发布信息，同时向消息表写课程发布的消息。通过数据库进行控制，只要课程发布表插入成功消息表也插入成功，消息表的数据就记录了某门课程发布的任务。<br>3、启动任务调度系统定时调度内容管理服务去定时扫描消息表的记录。<br>4、当扫描到课程发布的消息时即开始完成向redis、elasticsearch、MinIO同步数据的操作。<br>5、同步数据的任务完成后删除消息表记录。</p><p>时序图如下：<br>下图是课程发布操作的流程：</p><p><img src='https://s21.ax1x.com/2024/04/10/pFOzkWt.png'><br>1、执行发布操作，内容管理服务存储课程发布表的同时向消息表添加一条“课程发布任务”。这里使用本地事务保证课程发布信息保存成功，同时消息表也保存成功。<br>2、任务调度服务定时调度内容管理服务扫描消息表，由于课程发布操作后向消息表插入一条课程发布任务，此时扫描到一条任务。<br>3、拿到任务开始执行任务，分别向redis、elasticsearch及文件系统存储数据。<br>4、任务完成后删除消息表记录。</p><p>假如网络中断，会进行定时调度，重新执行该任务。如果服务器死掉，会有相应的运维人员来处理（他们不是吃干饭的！！！）</p><h2 id="课程发布接口"><a href="#课程发布接口" class="headerlink" title="课程发布接口"></a>课程发布接口</h2><h3 id="接口定义-2"><a href="#接口定义-2" class="headerlink" title="接口定义"></a>接口定义</h3><p>根据课程发布的分布式事务控制方案，课程发布操作首先通过本地事务向课程发布表写入课程发布信息并向消息表插入一条消息，这里定义的课程发布接口要实现该功能。<br>在内容管理接口工程中定义课程发布接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 课程预览，发布</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Api(value = &quot;课程预览发布接口&quot;,tags = &quot;课程预览发布接口&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoursePublishController</span> &#123;</span><br><span class="line">...</span><br><span class="line"> <span class="meta">@ApiOperation(&quot;课程发布&quot;)</span></span><br><span class="line"> <span class="meta">@ResponseBody</span></span><br><span class="line"> <span class="meta">@PostMapping</span> (<span class="string">&quot;/coursepublish/&#123;courseId&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coursepublish</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="接口开发-2"><a href="#接口开发-2" class="headerlink" title="接口开发"></a>接口开发</h3><h4 id="DAO开发"><a href="#DAO开发" class="headerlink" title="DAO开发"></a>DAO开发</h4><p>课程发布操作对数据库操作如下：<br>1、向课程发布表course_publish插入一条记录,记录来源于课程预发布表，如果存在则更新，发布状态为：已发布。<br>2、更新course_base表的课程发布状态为：已发布<br>3、删除课程预发布表的对应记录。<br>4、向mq_message消息表插入一条消息，消息类型为：course_publish<br>约束：<br>1、课程审核通过方可发布。<br>2、本机构只允许发布本机构的课程。</p><p>以上功能使用自动生成的mapper接口即可完成。</p><p>1、在内容管理数据库创建mq_message消息表及消息历史消息表（历史表存储已经完成的消息）。<br>消息表结构如下：<br><img src='https://pic.imgdb.cn/item/66166d0268eb935713a3e1cf.png'><br>2、生成mq_message消息表、course_publish课程发布表的po和mapper接口<br>稍后会开发一个通用的消息处理组件</p><h4 id="Service开发-1"><a href="#Service开发-1" class="headerlink" title="Service开发"></a>Service开发</h4><p>定义Service接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 课程发布接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> companyId 机构id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> courseId 课程id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/20 16:23</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">(Long companyId,Long courseId)</span>;</span><br></pre></td></tr></table></figure><br>编写课程发布的Service方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">(Long companyId, Long courseId)</span> &#123;</span><br><span class="line">       <span class="comment">//查询预发布表</span></span><br><span class="line">       <span class="type">CoursePublishPre</span> <span class="variable">coursePublishPre</span> <span class="operator">=</span> coursePublishPreMapper.selectById(courseId);</span><br><span class="line">       <span class="keyword">if</span> (coursePublishPre==<span class="literal">null</span>)&#123;</span><br><span class="line">           XueChengPlusException.cast(<span class="string">&quot;课程没有审核记录，无法发布&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//状态</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> coursePublishPre.getStatus();</span><br><span class="line">       <span class="comment">//课程如果没有审核通过不允许发布</span></span><br><span class="line">       <span class="keyword">if</span> (!status.equals(<span class="string">&quot;202004&quot;</span>))&#123;</span><br><span class="line">           XueChengPlusException.cast(<span class="string">&quot;课程没有审核通过不允许发布&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//向课程发布表写入数据</span></span><br><span class="line">       <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoursePublish</span>();</span><br><span class="line">       BeanUtils.copyProperties(coursePublishPre,coursePublish);</span><br><span class="line">       <span class="comment">//先查询课程发布，如果有则更新，没有再添加</span></span><br><span class="line">       <span class="type">CoursePublish</span> <span class="variable">coursePublishObj</span> <span class="operator">=</span> coursePublishMapper.selectById(courseId);</span><br><span class="line">       <span class="keyword">if</span> (coursePublishObj==<span class="literal">null</span>)&#123;</span><br><span class="line">           coursePublishMapper.insert(coursePublish);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           coursePublishMapper.updateById(coursePublish);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//向消息表写入数据</span></span><br><span class="line">       <span class="comment">//todo</span></span><br><span class="line">       <span class="comment">//将发布表数据删除</span></span><br><span class="line">       coursePublishPreMapper.deleteById(courseId);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="接口完善-1"><a href="#接口完善-1" class="headerlink" title="接口完善"></a>接口完善</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@ApiOperation(&quot;课程发布&quot;)</span></span><br><span class="line"> <span class="meta">@ResponseBody</span></span><br><span class="line"> <span class="meta">@PostMapping</span> (<span class="string">&quot;/coursepublish/&#123;courseId&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coursepublish</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span>&#123;</span><br><span class="line">     <span class="type">Long</span> <span class="variable">companyId</span> <span class="operator">=</span> <span class="number">1232141425L</span>;</span><br><span class="line">     coursePublishService.publish(companyId,courseId);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="接口测试-1"><a href="#接口测试-1" class="headerlink" title="接口测试"></a>接口测试</h3><div class="tip warning"><p>先测试约束条件：<br>1、在未提交审核时进行课程发布测试。<br>2、在课程未审核通过时进行发布。<br>正常流程测试：<br>1、提交审核课程<br>2、手动修改课程预发布表与课程基本信息的审核状态为审核通过。<br>3、执行课程发布<br>4、观察课程发布表记录是否正常，课程预发布表记录已经删除，课程基本信息表与课程发布表的发布状态为”发布“。<br>使用前后端联调方式测试。</p></div><h2 id="消息处理SDK"><a href="#消息处理SDK" class="headerlink" title="消息处理SDK"></a>消息处理SDK</h2><h3 id="消息模块技术方案"><a href="#消息模块技术方案" class="headerlink" title="消息模块技术方案"></a>消息模块技术方案</h3><p>课程发布操作执行后需要扫描消息表的记录，有关消息表处理的有哪些？<br><img src='https://s21.ax1x.com/2024/04/10/pFXCe9s.png'></p><p>上图中红色框内的都是与消息处理相关的操作：<br>1、新增消息表<br>2、扫描消息表。<br>3、更新消息表。<br>4、删除消息表。</p><p>使用消息表这种方式实现最终事务一致性的地方除了课程发布还有其它业务场景。<br><img src='https://s21.ax1x.com/2024/04/10/pFXCuj0.png'><br>如果在每个地方都实现一套针对消息表定时扫描、处理的逻辑基本上都是重复的，软件的可复用性太低，成本太高。</p><u>如何解决这个问题？</u><p>针对这个问题可以想到将消息处理相关的逻辑做成一个通用的东西。<br>是做成通用的服务，还是做成通用的代码组件呢？<br>通用的服务是完成一个通用的独立功能，并提供独立的网络接口，比如：项目中的文件系统服务，提供文件的分布式存储服务。<br>代码组件也是完成一个通用的独立功能，通常会提供API的方式供外部系统使用，比如：fastjson、Apache commons工具包等。<br>如果将消息处理做成一个通用的服务，该服务需要连接多个数据库，因为它要扫描微服务数据库下的消息表，并且要提供与微服务通信的网络接口，单就针对当前需求而言开发成本有点高。<br>如果将消息处理做一个SDK工具包相比通用服务不仅可以解决将消息处理通用化的需求，还可以降低成本。<br>所以，本项目确定将对消息表相关的处理做成一个SDK组件供各微服务使用,如下图<br><img src='https://s21.ax1x.com/2024/04/10/pFXC3EF.png'><br><div class="tip info"><p>下边对消息SDK的设计内容进行说明：<br><u>sdk需要提供执行任务的逻辑吗？</u><br>拿课程发布任务举例，执行课程发布任务是要向redis、索引库等同步数据，其它任务的执行逻辑是不同的，所以执行任务在sdk中不用实现任务逻辑，只需要提供一个抽象方法由具体的执行任务方去实现。</p><p><u>如何保证任务的幂等性？</u><br>在视频处理章节介绍的视频处理的幂等性方案，这里可以采用类似方案，任务执行完成后会从消息表删除，如果消息的状态是完成或不存在消息表中则不用执行。</p><p><u>如何保证任务不重复执行？</u><br>采用和视频处理章节一致方案，除了保证任务的幂等性外，任务调度采用分片广播，根据分片参数去获取任务，另外阻塞调度策略为丢弃任务。<br>注意：这里是信息同步类任务，即使任务重复执行也没有关系，不再使用抢占任务的方式保证任务不重复执行。</p><p><u>还有一个问题，根据消息表记录是否存在或消息表中的任务状态去保证任务的幂等性，如果一个任务有好几个小任务，比如：课程发布任务需要执行三个同步操作：存储课程到redis、存储课程到索引库，存储课程页面到文件系统。如果其中一个小任务已经完成也不应该去重复执行。这里该如何设计？</u></p></div></p><p>将小任务作为任务的不同的阶段，在消息表中设计阶段状态。<br><img src="https://pic.imgdb.cn/item/66168b2168eb935713dee51c.png"><br>每完成一个阶段在相应的阶段状态字段打上完成标记，即使这个大任务没有完成再重新执行时，如果小阶段任务完成了也不会重复执行某个小阶段的任务。</p><p>完善service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//保存消息表</span></span><br><span class="line"> saveCoursePublishMessage(courseId);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span> 保存消息表记录</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> courseId  课程id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@date</span> 2022/9/20 16:32</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveCoursePublishMessage</span><span class="params">(Long courseId)</span>&#123;</span><br><span class="line"> <span class="type">MqMessage</span> <span class="variable">mqMessage</span> <span class="operator">=</span> mqMessageService.addMessage(<span class="string">&quot;course_publish&quot;</span>, String.valueOf(courseId), <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"> <span class="keyword">if</span>(mqMessage==<span class="literal">null</span>)&#123;</span><br><span class="line">  XueChengPlusException.cast(CommonError.UNKOWN_ERROR);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;接口定义&quot;&gt;&lt;a href=&quot;#接口定义&quot; class=&quot;headerlink&quot; title=&quot;接口定义&quot;&gt;&lt;/a&gt;接口定义&lt;/h2&gt;&lt;h4 id=&quot;定义课程预览接口&quot;&gt;&lt;a href=&quot;#定义课程预览接口&quot; class=&quot;headerlink&quot; title=&quot;定</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="学成在线项目" scheme="https://wjlgmw-github-io.vercel.app/tags/%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>学成在线项目(七)</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/d1cf35.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/d1cf35.html</id>
    <published>2024-04-08T19:42:26.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><div class="tip info"><p>二.如何保证任务不重复执行？<br>1.调度中心按分片广播的方式去下发任务<br>2.执行器收到作业分片广播的参数：分片总数(shardTotal)和分片序号(shardIndex)，计算任务id % 分片总数(taskId % shardTotal)，如果结果等于分片序号，就去执行这个任务(taskId % shardTotal = shardIndex)。这样就可以保证不同的执行器执行不同的任务<br>3.配置调度过期策略为忽略，避免同一个执行器多次重复执行同一个任务<br>4.配置任务阻塞处理策略为丢弃后续调度，注意：丢弃也没事，下一次调度还可以执行<br>5.另外还要保证任务处理的幂等性，执行过的任务可以打一个状态标记已完成（上面的代码设置status=2即为完成），下次再次调度该任务时，判断该任务已完成，就不再执行</p><p>三.任务幂等性如何保证？<br>幂等性描述的是一次和多次请求某一个资源，对于资源本身，应该返回同样的结果<br>幂等性是为了解决重复提交问题，例如：恶意刷单，重复支付等<br>解决幂等性的常用方案:<br>1.数据库约束，例如：唯一索引、主键<br>2.乐观锁：常用于数据库，更新数据时，根据乐观锁的状态去更新<br>3.唯一序列号，请求前生成的唯一序列号，携带序列号去请求，执行时在redis记录该序列号，用于表示该序列号请求已经执行过了，如果相同的序列号再次来执行，则说明是重复执行。这里的解决方式是在数据库中添加状态处理字段，视频处理完成，则更新该字段为已完成，执行视频处理之前判断状态是否为已完成，若已完成则不处理</p></div><h1 id="绑定媒资"><a href="#绑定媒资" class="headerlink" title="绑定媒资"></a>绑定媒资</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="业务流程（省略）"><a href="#业务流程（省略）" class="headerlink" title="业务流程（省略）"></a>业务流程（省略）</h3><p>教育机构用户进入课程管理页面并编辑某一个课程，在”课程大纲”标签页的某一小节后可点击”添加视频“。然后进行相应的视频选择绑定上去，已有视频的要先删除掉才能上传<br><img src='https://s21.ax1x.com/2024/04/08/pFLWTjf.png'></p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>课程计划绑定媒资文件后存储至课程计划绑定媒资表。即是<wavy>teachplan_media</wavy>表<br><img src='https://s21.ax1x.com/2024/04/08/pFL4cuV.png'></p><h2 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h2><p>根据业务流程，用户进入课程计划列表，首先确定向哪个课程计划添加视频，点击”添加视频“后用户选择视频，选择视频，点击提交，前端以json格式请求以下参数：提交媒资文件id、文件名称、教学计划id</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mediaId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;70a98b4a2fffc89e50b101f959cc33ca&quot;</span><span class="punctuation">,</span>  <span class="comment">//md5值</span></span><br><span class="line">  <span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;22-Hmily实现TCC事务-开发bank2的confirm方法.avi&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;teachplanId&quot;</span><span class="punctuation">:</span> <span class="number">257</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在内容管理模块定义请求参数模型类型： com.xuecheng.content.model.dto.BindTeachplanMediaDto //路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value=&quot;BindTeachplanMediaDto&quot;, description=&quot;教学计划-媒资绑定提交数据&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BindTeachplanMediaDto</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;媒资文件id&quot;, required = true)</span></span><br><span class="line"><span class="keyword">private</span> String mediaId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;媒资文件名称&quot;, required = true)</span></span><br><span class="line"><span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@ApiModelProperty(value = &quot;课程计划标识&quot;, required = true)</span></span><br><span class="line"> <span class="keyword">private</span> Long teachplanId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在TeachplanController类中定义接口如下：(没完善版)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;课程计划和媒资信息绑定&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/teachplan/association/media&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">associationMedia</span><span class="params">(<span class="meta">@RequestBody</span> BindTeachplanMediaDto bindTeachplanMediaDto)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h2><h3 id="DAO开发"><a href="#DAO开发" class="headerlink" title="DAO开发"></a>DAO开发</h3><p>对teachplanMedia表自动生成Mapper。</p><h3 id="Service开发"><a href="#Service开发" class="headerlink" title="Service开发"></a>Service开发</h3><p>根据需求定义service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> bindTeachplanMediaDto</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> com.xuecheng.content.model.po.TeachplanMedia</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span> 教学计划绑定媒资</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> fx</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span> 2022/9/14 22:20</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">associationMedia</span><span class="params">(BindTeachplanMediaDto bindTeachplanMediaDto)</span>;</span><br></pre></td></tr></table></figure><p>定义接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">associationMedia</span><span class="params">(BindTeachplanMediaDto bindTeachplanMediaDto)</span> &#123;</span><br><span class="line">    <span class="comment">//课程计划id</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">teachplanId</span> <span class="operator">=</span> bindTeachplanMediaDto.getTeachplanId();</span><br><span class="line">     <span class="type">Teachplan</span> <span class="variable">teachplan</span> <span class="operator">=</span> teachplanMapper.selectById(teachplanId);</span><br><span class="line">     <span class="keyword">if</span> (teachplan==<span class="literal">null</span>)&#123;</span><br><span class="line">         XueChengPlusException.cast(<span class="string">&quot;课程计划不存在&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//删除原有记录，根据课程计划id删除它绑定的媒资</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">delete</span> <span class="operator">=</span> teachplanMediaMapper.delete(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;TeachplanMedia&gt;().eq(TeachplanMedia::getTeachplanId, bindTeachplanMediaDto.getTeachplanId()));</span><br><span class="line"></span><br><span class="line">     <span class="comment">//再添加新记录</span></span><br><span class="line">     <span class="type">TeachplanMedia</span> <span class="variable">teachplanMedia</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TeachplanMedia</span>();</span><br><span class="line">     BeanUtils.copyProperties(bindTeachplanMediaDto,teachplanMedia);</span><br><span class="line">     teachplanMedia.setCourseId(teachplan.getCourseId());</span><br><span class="line">     teachplanMedia.setMediaFilename(bindTeachplanMediaDto.getFileName());</span><br><span class="line">     teachplanMediaMapper.insert(teachplanMedia);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="接口完善"><a href="#接口完善" class="headerlink" title="接口完善"></a>接口完善</h3><p>完善接口层调用Service层的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;课程计划和媒资信息绑定&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/teachplan/association/media&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">associationMedia</span><span class="params">(<span class="meta">@RequestBody</span> BindTeachplanMediaDto bindTeachplanMediaDto)</span>&#123;</span><br><span class="line">    teachplanService.associationMedia(bindTeachplanMediaDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h3><p>测试结果<br><img src='https://s21.ax1x.com/2024/04/08/pFL5AUg.png'></p><p><img src='https://s21.ax1x.com/2024/04/08/pFL5QbT.png'></p><h1 id="课程发布模块需求"><a href="#课程发布模块需求" class="headerlink" title="课程发布模块需求"></a>课程发布模块需求</h1><p>课程发布模块共包括三块功能：<br>1、课程预览<br>2、课程审核<br>3、课程发布</p><h1 id="课程预览"><a href="#课程预览" class="headerlink" title="课程预览"></a>课程预览</h1><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><h3 id="什么是模板引擎"><a href="#什么是模板引擎" class="headerlink" title="什么是模板引擎"></a>什么是模板引擎</h3><p>早期我们采用的jsp技术就是一种模板引擎技术，如下图：<br><img src='https://s21.ax1x.com/2024/04/08/pFLomn0.png'></p><div class="tip info"><p>1、浏览器请求web服务器<br>2、服务器渲染页面，渲染的过程就是向jsp页面(模板)内填充数据(模型)。<br>3、服务器将渲染生成的页面返回给浏览器。<br>所以模板引擎就是：模板+数据=输出，Jsp页面就是模板，页面中嵌入的jsp标签就是数据，两者相结合输出html网页。</p><p>常用的java模板引擎还有哪些？<br>Jsp、Freemarker、Thymeleaf 、Velocity 等。<br>本项目采用Freemarker作为模板引擎技术。<br>Freemarker官方地址：<a href="http://freemarker.foofun.cn/">http://freemarker.foofun.cn/</a><br>FreeMarker 是一款 模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。FreeMarker 是 免费的， 基于Apache许可证2.0版本发布。</p></div><h3 id="Freemarker快速入门-转移到Freemarker快速入门文章中"><a href="#Freemarker快速入门-转移到Freemarker快速入门文章中" class="headerlink" title="Freemarker快速入门(转移到Freemarker快速入门文章中)"></a>Freemarker快速入门(转移到Freemarker快速入门文章中)</h3><h2 id="测试静态页面"><a href="#测试静态页面" class="headerlink" title="测试静态页面"></a>测试静态页面</h2><h3 id="部署网站门户"><a href="#部署网站门户" class="headerlink" title="部署网站门户"></a>部署网站门户</h3><p>在课程预览界面上要加载css、js、图片等内容，这里部署nginx来访问这些静态资源，对于SpringBoot服务的动态资源由Nginx去代理请求，如下图：<br><img src='https://s21.ax1x.com/2024/04/09/pFL7YTK.png'></p><div class="tip info"><p>1、在本机安装 Nginx ，从课程资料目录获取nginx-1.23.1.zip并解压。<br>2、运行nginx-1.23.1目录下的nginx.exe。<br>默认端口为80，如果本机80端口被占用，则需要杀掉占用进程后再启动nginx。<br>如果无法杀掉80端口占用进程则需要修改nginx-1.23.1目录下conf/nginx.conf配置文件</p></div><p><img src='https://s21.ax1x.com/2024/04/09/pFL7NFO.png'></p><p>将80端口修改为空闲端口。<br>启动nginx，访问<a href="http://localhost">http://localhost</a> 出现下边的网页表示启动成功</p><p><img src='https://s21.ax1x.com/2024/04/09/pFL7UYD.png'></p><div class="tip info"><p>下边开始部署前端工程：<br>1、从课程资料目录获取xc-ui-pc-static-portal.zip 并解压。<br>2、修改本机hosts文件，加入127.0.0.1 www.51xuecheng.cn 51xuecheng.cn ucenter.51xuecheng.cn teacher.51xuecheng.cn file.51xuecheng.cn。<br>window10操作系统hosts文件在C:\Windows\System32\drivers\etc下<br>Centos7操作系统的hosts文件在/etc目录下。<br>在hosts文件加入如下配置</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.51xuecheng.cn 51xuecheng.cn ucenter.51xuecheng.cn teacher.51xuecheng.cn file.51xuecheng.cn</span><br></pre></td></tr></table></figure><p>3、在nginx-1.23.1目录中找到conf目录，配置目录下的nginx.conf文件。<br>配置内容如下，注意更改xc-ui-pc-static-portal目录的路径：  都修改为本地的路径 后面的视频也顺带修改了<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.51xuecheng.cn localhost;</span><br><span class="line">        #rewrite ^(.*) https://$server_name$1 permanent;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        ssi on;</span><br><span class="line">        ssi_silent_errors on;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            alias   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        #静态资源</span><br><span class="line">        location /static/img/ &#123;  </span><br><span class="line">                alias  D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/img/;</span><br><span class="line">        &#125; </span><br><span class="line">        location /static/css/ &#123;  </span><br><span class="line">                alias   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/css/;</span><br><span class="line">        &#125; </span><br><span class="line">        location /static/js/ &#123;  </span><br><span class="line">                alias   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/js/;</span><br><span class="line">        &#125; </span><br><span class="line">        location /static/plugins/ &#123;  </span><br><span class="line">                alias   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/plugins/;</span><br><span class="line">                add_header Access-Control-Allow-Origin http://ucenter.51xuecheng.cn;  </span><br><span class="line">                add_header Access-Control-Allow-Credentials true;  </span><br><span class="line">                add_header Access-Control-Allow-Methods GET;</span><br><span class="line">        &#125; </span><br><span class="line">        location /plugins/ &#123;  </span><br><span class="line">                alias   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/plugins/;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        location /course/preview/learning.html &#123;</span><br><span class="line">                alias D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal/course/learning.html;</span><br><span class="line">        &#125; </span><br><span class="line">        location /course/search.html &#123;  </span><br><span class="line">                root   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal;</span><br><span class="line">        &#125; </span><br><span class="line">        location /course/learning.html &#123;  </span><br><span class="line">                root   D:/IdeaProjects/xuecheng-project/xc-ui-pc-static-portal;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>启动成功访问<a href="http://www.51xuecheng.cn">http://www.51xuecheng.cn</a><br>课程详情页：<a href="http://www.51xuecheng.cn/course/course_template.html">http://www.51xuecheng.cn/course/course_template.html</a><br>有相应的画面表示配置成功</p><h3 id="文件服务器"><a href="#文件服务器" class="headerlink" title="文件服务器"></a>文件服务器</h3><p>在进行课程预览时需要展示课程的图片，在线插放课程视频，课程图片、视频这些都在MinIO文件系统存储，下边统一由Nginx代理，通过文件服务域名统一访问。如下图：<img src='https://s21.ax1x.com/2024/04/09/pFL7afe.png'><br>在hosts文件配置如下内容，如果已存在不要重复配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.51xuecheng.cn file.51xuecheng.cn</span><br></pre></td></tr></table></figure><p>在nginx.conf中配置文件服务器的代理地址<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#文件服务</span><br><span class="line"> upstream fileserver&#123;</span><br><span class="line">   server 192.168.101.65:9000 weight=10;</span><br><span class="line"> &#125; </span><br><span class="line">  server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  file.51xuecheng.cn;</span><br><span class="line">       #charset koi8-r;</span><br><span class="line">       ssi on;</span><br><span class="line">       ssi_silent_errors on;</span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line">       location /video &#123;</span><br><span class="line">           proxy_pass   http://fileserver;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       location /mediafiles &#123;</span><br><span class="line">           proxy_pass   http://fileserver;</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>配置完毕，重新加载nginx配置文件。<br>通过<a href="http://file.51xuecheng.cn/mediafiles/图片文件地址">http://file.51xuecheng.cn/mediafiles/图片文件地址</a>  访问图片<br>在媒资数据库的文件表中找一个图片的地址进行测试。 通过minio中图片路径来访问-&gt;这个就是图片文件地址  mediafiles-&gt;bucket库名</p><h3 id="视频播放页面"><a href="#视频播放页面" class="headerlink" title="视频播放页面"></a>视频播放页面</h3><p>首先在nginx.conf中配置视频播放页面的地址。前面server地址已经配过，在部署网站门户下</p><p>下边需要配置learning.html页面的视频播放路径来测试视频播放页面，找到learning.html页面中videoObject对象的定义处，配置视频的播放地址。<br><img src='https://s21.ax1x.com/2024/04/09/pFL7B6A.png'><br>videoObject下面的video修改成自己的视频路径即可</p><p>后续会再更新<br><img src='\img\siteicon\5371.jpg'></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试&quot;&gt;&lt;a href=&quot;#面试&quot; class=&quot;headerlink&quot; title=&quot;面试&quot;&gt;&lt;/a&gt;面试&lt;/h1&gt;&lt;div class=&quot;tip info&quot;&gt;&lt;p&gt;二.如何保证任务不重复执行？&lt;br&gt;1.调度中心按分片广播的方式去下发任务&lt;br&gt;2.执行器收到</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="学成在线项目" scheme="https://wjlgmw-github-io.vercel.app/tags/%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/f1601c3e.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/f1601c3e.html</id>
    <published>2024-04-08T08:34:45.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式的定义"><a href="#单例模式的定义" class="headerlink" title="单例模式的定义"></a>单例模式的定义</h1><div class="tip info"><p>单例模式：确保一个类只有一个<span class='p red'>实例</span>（对象）（私有构造函数）,并提供一个<span class='p red'>全局访问点</span>（公有静态的工厂方法）来访问这个唯一实例（私有静态自身类型的成员变量）。</p></div><h1 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h1><div class="tip info"><p>1.私有构造函数<br>2.私有静态自身类型的成员变量<br>3.公有静态的工厂方法</p></div><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="查找bug"><a href="#查找bug" class="headerlink" title="查找bug"></a>查找bug</h2><div class="tip warning"><p>1.语法类<br>2.编译类<br>3.运行/逻辑<br>4.业务类</p></div><p>后续再更新<br><img src='https://s21.ax1x.com/2024/04/08/pFLm9IK.jpg'></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单例模式的定义&quot;&gt;&lt;a href=&quot;#单例模式的定义&quot; class=&quot;headerlink&quot; title=&quot;单例模式的定义&quot;&gt;&lt;/a&gt;单例模式的定义&lt;/h1&gt;&lt;div class=&quot;tip info&quot;&gt;&lt;p&gt;单例模式：确保一个类只有一个&lt;span class=&#39;p</summary>
      
    
    
    
    <category term="设计模式" scheme="https://wjlgmw-github-io.vercel.app/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="单例模式" scheme="https://wjlgmw-github-io.vercel.app/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Thymeleaf初步认识与快速开始</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/b12a1160.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/b12a1160.html</id>
    <published>2024-04-07T22:01:27.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初步认识Thymeleaf"><a href="#初步认识Thymeleaf" class="headerlink" title="初步认识Thymeleaf"></a>初步认识Thymeleaf</h1><div class="tip info"><p><span class='p red'>Thymeleaf</span>是一种用于Web和和独立环境的现代服务器端的<span class='p red'>Java模板引擎</span>，其主要目标是将优雅的Java模板带到开发工作流程中，并且可以作为<span class='p red'>Java静态原型</span>，让开发团队能更容易的协作。Thymeleaf能够处理HTML、XML、JavaScript、CSS甚至纯文本。</p></div><h1 id="Thymeleaf的页面"><a href="#Thymeleaf的页面" class="headerlink" title="Thymeleaf的页面"></a>Thymeleaf的页面</h1><p><img src='https://s21.ax1x.com/2024/04/07/pFLF75Q.png'></p><h1 id="Thymeleaf的标签属性与内置对象"><a href="#Thymeleaf的标签属性与内置对象" class="headerlink" title="Thymeleaf的标签属性与内置对象"></a>Thymeleaf的标签属性与内置对象</h1><p><img src='https://s21.ax1x.com/2024/04/07/pFLFOvq.png'></p><p><img src='https://s21.ax1x.com/2024/04/07/pFLkfJJ.png'></p><p><img src='https://s21.ax1x.com/2024/04/07/pFLkhW9.png'></p><h1 id="在springboot中集成Thymeleaf"><a href="#在springboot中集成Thymeleaf" class="headerlink" title="在springboot中集成Thymeleaf"></a>在springboot中集成Thymeleaf</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置yml"><a href="#配置yml" class="headerlink" title="配置yml"></a>配置yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">      <span class="attr">thymeleaf:</span></span><br><span class="line">        <span class="attr">cache:</span> <span class="literal">false</span>  <span class="comment">#模板缓存</span></span><br><span class="line">        <span class="attr">encoding:</span> <span class="string">UTF-8</span> <span class="comment">#模板编码</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">HTML5</span>  <span class="comment">#模板样式</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span> <span class="comment">#指定模板页面存放路径</span></span><br><span class="line">        <span class="attr">suffix:</span> <span class="string">.html</span> <span class="comment">#指定模板页面名称的后缀</span></span><br></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><img src='https://s21.ax1x.com/2024/04/07/pFLk1xI.png'></p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">userList</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        List&lt;User&gt; list =userService.list();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;userList&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Thymeleaf页面userList-html"><a href="#Thymeleaf页面userList-html" class="headerlink" title="Thymeleaf页面userList.html"></a>Thymeleaf页面userList.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Table goes in the document BODY --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;hovertable&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;8&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>出生日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">&quot;background-color: rgb(212, 227, 229);&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;user,status:$&#123;list&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status.count&#125;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.username&#125;&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user.sex eq 1&#125;&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user.sex eq 0&#125;&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span>25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(user.birthDate,&#x27;yyyy-MM-dd&#x27;)&#125;&quot;</span>&gt;</span>2015-07-12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src='https://s21.ax1x.com/2024/04/07/pFLkQGd.png'></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初步认识Thymeleaf&quot;&gt;&lt;a href=&quot;#初步认识Thymeleaf&quot; class=&quot;headerlink&quot; title=&quot;初步认识Thymeleaf&quot;&gt;&lt;/a&gt;初步认识Thymeleaf&lt;/h1&gt;&lt;div class=&quot;tip info&quot;&gt;&lt;p&gt;&lt;spa</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Thymeleaf" scheme="https://wjlgmw-github-io.vercel.app/tags/Thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>打印图形</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/b9cfe67b.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/b9cfe67b.html</id>
    <published>2024-04-05T18:32:08.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打印三角形"><a href="#打印三角形" class="headerlink" title="打印三角形"></a>打印三角形</h1><p>代码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (a=<span class="number">1</span>;a&lt;=<span class="number">5</span>;a++)&#123; <span class="comment">//列数</span></span><br><span class="line">           <span class="keyword">for</span> (b=<span class="number">1</span>;b&lt;<span class="number">7</span>-a;b++)&#123;<span class="comment">//每一行的空格</span></span><br><span class="line">               <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&amp;emsp;&quot;</span>) ;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span> (c=<span class="number">1</span>;c&lt;=a;c++)&#123;</span><br><span class="line">               <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;* &amp;emsp;&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><br>效果如下：<br><img src='https://s21.ax1x.com/2024/04/06/pFqBPpQ.png'></p><h1 id="打印平行四边形"><a href="#打印平行四边形" class="headerlink" title="打印平行四边形"></a>打印平行四边形</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;=<span class="number">5</span>;a++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (b=<span class="number">1</span>;b&lt;<span class="number">7</span>-a;b++)&#123;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&amp;emsp;&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (c=<span class="number">1</span>;c&lt;=<span class="number">5</span>;c++)&#123;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;* &amp;emsp;&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src='https://s21.ax1x.com/2024/04/06/pFqBlc9.png'></p><h1 id="打印菱形"><a href="#打印菱形" class="headerlink" title="打印菱形"></a>打印菱形</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;=<span class="number">3</span>;a++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (b=<span class="number">1</span>;b&lt;<span class="number">7</span>-a;b++)&#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&amp;emsp;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(c=<span class="number">1</span>;c&lt;=a*<span class="number">2</span>-<span class="number">1</span>;c++)&#123;</span><br><span class="line">           <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;* &quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;=<span class="number">2</span>;a++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (b=<span class="number">1</span>;b&lt;=a+<span class="number">3</span>;b++)&#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&amp;emsp;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(c=<span class="number">1</span>;c&lt;=<span class="number">5</span>-a*<span class="number">2</span>;c++)&#123;</span><br><span class="line">           <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;* &quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src='https://s21.ax1x.com/2024/04/06/pFqB1XR.png'></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;打印三角形&quot;&gt;&lt;a href=&quot;#打印三角形&quot; class=&quot;headerlink&quot; title=&quot;打印三角形&quot;&gt;&lt;/a&gt;打印三角形&lt;/h1&gt;&lt;p&gt;代码如下:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="前端js" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%89%8D%E7%AB%AFjs/"/>
    
    
    <category term="前端" scheme="https://wjlgmw-github-io.vercel.app/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>阳光不燥，微风正好</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/9520.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/9520.html</id>
    <published>2024-04-05T02:52:50.000Z</published>
    <updated>2024-04-15T15:19:11.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="夏至"><a href="#夏至" class="headerlink" title="夏至"></a>夏至</h1><blockquote><p>一生的时间很短<br>  短到不过是两颗心之间的距离<br>  一生的时间也很长<br>  不如我们试着走走看<br>  所念皆星河<br>  满眼皆是你</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;夏至&quot;&gt;&lt;a href=&quot;#夏至&quot; class=&quot;headerlink&quot; title=&quot;夏至&quot;&gt;&lt;/a&gt;夏至&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一生的时间很短&lt;br&gt;  短到不过是两颗心之间的距离&lt;br&gt;  一生的时间也很长&lt;br&gt;  不如我们试着走走看&lt;b</summary>
      
    
    
    
    <category term="生活" scheme="https://wjlgmw-github-io.vercel.app/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://wjlgmw-github-io.vercel.app/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
