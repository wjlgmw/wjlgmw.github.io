<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>繁星、博客</title>
  
  <subtitle>所念皆星河，满眼皆是你</subtitle>
  <link href="https://wjlgmw-github-io.vercel.app/atom.xml" rel="self"/>
  
  <link href="https://wjlgmw-github-io.vercel.app/"/>
  <updated>2024-05-08T01:31:03.029Z</updated>
  <id>https://wjlgmw-github-io.vercel.app/</id>
  
  <author>
    <name>繁星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Security安全框架</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/e592b38b.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/e592b38b.html</id>
    <published>2024-05-07T14:41:48.000Z</published>
    <updated>2024-05-08T01:31:03.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security安全管理入门"><a href="#Spring-Security安全管理入门" class="headerlink" title="Spring Security安全管理入门"></a>Spring Security安全管理入门</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Spring Security是一个高度自定义的安全框架，基于SpringIOC/DI和AOP功能，为系统提供了声明式安全访问控制功能，减少了为系统安全而编写大量重复代码的工作。<br>解释“声明式”：通过配置或者注解的方式实现相应的功能，比如Spring声明式事务的实现。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>Spring Security安全管理框架主要解决系统中用户“认证”和“授权”的问题，这也是Security框架的核心功能。<br>认证：用户登录，用户输入用户名和密码之后，经过系统认证用户能够登录成功。<br>授权：用户访问控制，系统判断用户是否有权限去完成某个操作。<br>攻击防护：Spring Security 还可以保护我们的应用程序免受未经授权的访问和攻击。在比如身份欺骗、会话劫持、跨站点脚本和 SQL 注入等。<br>因此基于SpringSecurity框架，我们可以很轻松的在项目中实现安全管理功能。</p><h2 id="其他安全框架比较"><a href="#其他安全框架比较" class="headerlink" title="其他安全框架比较"></a>其他安全框架比较</h2><p>Shiro是一个轻量、简单、易于集成的老牌安全框架，使用流程简单清晰，依赖性低，不需要任何框架和容器，可以独立运行，上手很容易。<br>而SpringSecurity则必须依赖Spring容器才能运行，但是和SpringBoot集成非常简单。<br>两个框架都实现了认证和授权的功能，在开发的时候，如果项目使用了SpringBoot，建议使用Security，如果没有使用，则可以集成Shiro。</p><h2 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h2><ol><li>创建一个SpringBoot项目，引入Web场景启动器</li><li>在项目中创建一个HelloController，定义方法返回“Hello，Spring Security”</li><li>在项目中引入spring-boot-starter-security场景启动器，不需要任何配置，自动为项目提供登录认证功能<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>效果如下，当访问HelloController时，自动跳转到/login登陆地址<br><img src="https://img.picgo.net/2024/05/07/TFQDGP21NLIPXOLP1CRcfdda4452c9c4dc7.png"></li></ol><p>【总结】</p><ol><li>引入Security启动器后，不需要任何配置，自动提供登录认证功能。</li><li>默认情况下，除了/login能够正常访问，访问系统其他任意资源时，都需要登录认证</li><li>security默认提供了用户名和密码，用户名是user，密码是在控制台中输出的一个UUID字符串</li><li>登录成功后，就可以正常访问系统资源</li><li>如果登录失败，会自动跳转到/login?error，并提示用户名和密码错误</li><li>通过/logout地址可以退出登录，跳转到登录地址/login?logout</li><li>用户名和密码也可以在全局配置文件中进行配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">mgy</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h1 id="Spring-Security自定义用户认证"><a href="#Spring-Security自定义用户认证" class="headerlink" title="Spring Security自定义用户认证"></a>Spring Security自定义用户认证</h1><h2 id="案例1：基于RBAC模型使用Security实现自定义用户认证功能。"><a href="#案例1：基于RBAC模型使用Security实现自定义用户认证功能。" class="headerlink" title="案例1：基于RBAC模型使用Security实现自定义用户认证功能。"></a>案例1：基于RBAC模型使用Security实现自定义用户认证功能。</h2></li><li>定义密码解析器（PasswordEncoder）<br>在Security框架中强制要求，必须在Spring容器中存在密码解析器（PasswordEncoder），因为Security要使用密码解析器完成密码的加密和校验。</li></ol><p>密码解析器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPasswordEncoder</span> <span class="keyword">implements</span> <span class="title class_">PasswordEncoder</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rawPassword 密码明文，用户登录时输入的密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密后的密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(CharSequence rawPassword)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rawPassword.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码校验方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rawPassword 密码明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encodedPassword 加密后的密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否校验通过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> encode(rawPassword).equals(encodedPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将密码解析器注册到Spring容器中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySecurityConfig</span> &#123;</span><br><span class="line">    <span class="comment">//将密码加密器配置到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>通过定义用户登录服务组件（UserDetailsService）自定义登录认证逻辑<br>在UserDetailsService接口中有一个方法，根据用户名获取用户详情<br>UserDetailsService接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException</span><br></pre></td></tr></table></figure>Security框架在登录认证的时候会自动调用这个组件完成认证功能，因此，需要实现这个方法来自定义认证逻辑<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUsername,username);</span><br><span class="line">        <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;该用户在系统中不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        UserDetails userDetails=<span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.core.userdetails.User(</span><br><span class="line">                user.getUsername(),</span><br><span class="line">                user.getPassword(),</span><br><span class="line">                AuthorityUtils.NO_AUTHORITIES</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> userDetails;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>将UserDetailsService组件注册到容器中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySecurityConfig</span> &#123;</span><br><span class="line">    <span class="comment">//将密码加密器配置到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyUserDetailsService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Security运行流程总结<br><img src="https://img.picgo.net/2024/05/07/7FIZCI3ZKJ9YAQZQB743b472e48f0e06c.png"></p><ol><li>用户请求当前项目的任意资源地址，除/login外。Security框架都要检查是否已登录，如果未登录则重定向到/login页面</li><li>用户在/login页面输入用户名和密码之后，提交post请求到/login进行登录验证</li><li>Security框架收集到用户名和密码后，从Spring容器中获取UserDetailsService类型的用户服务对象。</li><li>Security框架调用UserDetailsService对象的loadUserByUsername方法查询用户详情信息。</li><li>如果loadUserByUsername抛出异常，则直接跳转到/login?error页面，登录失败</li><li>如果loadUserByUsername未抛出异常，则获取到UserDetails对象。</li><li>Security框架从Spring容器中获取密码加密器（PasswordEncoder）</li><li>Security框架调用PasswordEncoder的matches方法比较用户输入的明文密码和UserDetails对象中的密码是否匹配，如果匹配，则登录成功，否则，登录失败，重定向到/login?error页面</li></ol><h2 id="案例2：基于案例1进行修改密码加密器进行认证安全强化"><a href="#案例2：基于案例1进行修改密码加密器进行认证安全强化" class="headerlink" title="案例2：基于案例1进行修改密码加密器进行认证安全强化"></a>案例2：基于案例1进行修改密码加密器进行认证安全强化</h2><p>BCryptPasswordEncoder密码加密器<br>目前数据库里存储的密码都是明文密码，这在正式的开发中显然是不允许的，我们保存在数据库里的密码必须经过加密处理，不然会存在很大的安全隐患，在Securtiy中提供了很多的密码加密器，通过Ctrl+H调出PasswordEncoder的实现类<br><img src="https://img.picgo.net/2024/05/07/QFTEPPLSW_6SW8G_HG5H44222a1b00d9e2db.png"></p><p>这里给大家介绍一下BCryptPasswordEncoder（强散列密码加密），这个密码加密器采用哈希算法 SHA-256 +随机盐+密钥对密码进行加密得到加密结果，可以保证相同的明文，多次加密后，密文有相同的散列数据，而不是相同的结果，并且加密过程不可逆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        BCryptPasswordEncoder passwordEncoder=<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        System.out.println(passwordEncoder.encode(<span class="string">&quot;123&quot;</span>));</span><br><span class="line">        System.out.println(passwordEncoder.encode(<span class="string">&quot;123&quot;</span>));</span><br><span class="line">        System.out.println(passwordEncoder.encode(<span class="string">&quot;123&quot;</span>));</span><br><span class="line">        System.out.println(passwordEncoder.matches(<span class="string">&quot;123&quot;</span>,<span class="string">&quot;$2a$10$KHWtAjfEqnOEb6LXQCD2re3Mw52wuCppvAcusFy3B87A3RR/HO5fu&quot;</span>));</span><br><span class="line">        System.out.println(passwordEncoder.matches(<span class="string">&quot;123&quot;</span>,<span class="string">&quot;$2a$10$I1beLn5gqw0LqdHO2pEZDefex3lMQ8/Z8G0wz0F5urumd3WyZw6lS&quot;</span>));</span><br><span class="line">        System.out.println(passwordEncoder.matches(<span class="string">&quot;123&quot;</span>,<span class="string">&quot;$2a$10$P2r5/TG764Zbb5vq0VdJQO8zwVmfXAA3QQj588sbjAbIM/E5w0jse&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span>2a<span class="built_in">$</span>10<span class="built_in">$</span>lJG.OC7HtQnkomdvq8.ojePZ46JEY6mAkMNI5W4bSlfNWFHKeG.nq</span><br><span class="line"><span class="built_in">$</span>2a<span class="built_in">$</span>10<span class="built_in">$</span>YocDKp9dlMCHykLRVnwy2OkqXaN1GgZC5itEToVritXGnh4Y3IkHm</span><br><span class="line"><span class="built_in">$</span>2a<span class="built_in">$</span>10<span class="built_in">$</span>qmeoaUBO6403p8dyMASeQe97l58OEe3TiTojhba8Z6kCBiLaMmIh6</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>从测试结果可以看出</p><ol><li>对相同的明文，最后加密结果不同，从结果中无法解析出明文</li><li>虽然结果不同，但是相同明文的散列数据是相同的，所以校验通过</li></ol><p>修改容器中的密码加密器，使用BCryptPasswordEncoder加密器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="案例3：在Spring-Security框架中自定义登录功能"><a href="#案例3：在Spring-Security框架中自定义登录功能" class="headerlink" title="案例3：在Spring Security框架中自定义登录功能"></a>案例3：在Spring Security框架中自定义登录功能</h2><h3 id="步骤1：将素材引入到项目中，并定义好控制器UserController，需要引入Thymeleaf依赖"><a href="#步骤1：将素材引入到项目中，并定义好控制器UserController，需要引入Thymeleaf依赖" class="headerlink" title="步骤1：将素材引入到项目中，并定义好控制器UserController，需要引入Thymeleaf依赖"></a>步骤1：将素材引入到项目中，并定义好控制器UserController，需要引入Thymeleaf依赖</h3><p>定义页面访问方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">loginPage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/loginFail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">loginFail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;loginFail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/main&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="步骤2：自定义登陆页面配置，通过配置类完成SecurityFilterChain的配置"><a href="#步骤2：自定义登陆页面配置，通过配置类完成SecurityFilterChain的配置" class="headerlink" title="步骤2：自定义登陆页面配置，通过配置类完成SecurityFilterChain的配置"></a>步骤2：自定义登陆页面配置，通过配置类完成SecurityFilterChain的配置</h3><p>SecurityFilterChain是一个过滤器链，管理着所有过滤器以及过滤器执行的顺序，我们通过过滤器链提供的配置可以实现自定义配置认证与授权。<br>放到security配置类中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册Security过滤器链</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity security)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//配置用户认证(登录相关配置)</span></span><br><span class="line">        security.formLogin(configurer -&gt; &#123;</span><br><span class="line">            configurer</span><br><span class="line">                    <span class="comment">//配置登录页面地址</span></span><br><span class="line">                    .loginPage(<span class="string">&quot;/user/login&quot;</span>)</span><br><span class="line">                    <span class="comment">//配置登录请求处理地址（Post）</span></span><br><span class="line">                    .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)</span><br><span class="line">                    <span class="comment">//配置登录请求的用户名和密码参数</span></span><br><span class="line">                    .usernameParameter(<span class="string">&quot;uname&quot;</span>)</span><br><span class="line">                    .passwordParameter(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">                    <span class="comment">//配置登录成功后默认跳转的页面</span></span><br><span class="line">                    .defaultSuccessUrl(<span class="string">&quot;/user/main&quot;</span>)</span><br><span class="line">                    <span class="comment">//配置登录失败后默认重定向的页面</span></span><br><span class="line">                    .failureForwardUrl(<span class="string">&quot;/user/loginFail&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//配置用户退出</span></span><br><span class="line">        security.logout(configurer -&gt; &#123;</span><br><span class="line">            <span class="comment">//配置退出请求处理地址</span></span><br><span class="line">           configurer.logoutUrl(<span class="string">&quot;/user/logout&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//配置用户权限</span></span><br><span class="line">        security.authorizeHttpRequests(registry -&gt; &#123;</span><br><span class="line">            registry</span><br><span class="line">                    <span class="comment">//不需要认证的路径</span></span><br><span class="line">                    .requestMatchers(</span><br><span class="line">                            <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;/img/**&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;/css/**&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;/user/loginFail&quot;</span>).permitAll()</span><br><span class="line">                    <span class="comment">//除了上面的路径，其他请求都需要认证登录</span></span><br><span class="line">                    .anyRequest().authenticated();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//配置CSRF防御</span></span><br><span class="line">        security.csrf(configurer -&gt; &#123;</span><br><span class="line">            configurer.disable();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> security.build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Security安全管理入门&quot;&gt;&lt;a href=&quot;#Spring-Security安全管理入门&quot; class=&quot;headerlink&quot; title=&quot;Spring Security安全管理入门&quot;&gt;&lt;/a&gt;Spring Security安全管理入门&lt;/</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Spring Security" scheme="https://wjlgmw-github-io.vercel.app/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/f255ffad.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/f255ffad.html</id>
    <published>2024-05-06T14:56:59.000Z</published>
    <updated>2024-05-08T01:31:03.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h1><h2 id="卸载旧版"><a href="#卸载旧版" class="headerlink" title="卸载旧版"></a>卸载旧版</h2><p>首先如果系统中已经存在旧的Docker，则先卸载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure><h2 id="配置Docker的yum库"><a href="#配置Docker的yum库" class="headerlink" title="配置Docker的yum库"></a>配置Docker的yum库</h2><p>首先要安装一个yum工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><p>安装成功后，执行命令，配置Docker的yum源：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>最后，执行命令，安装Docker<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure></p><h2 id="启动和校验"><a href="#启动和校验" class="headerlink" title="启动和校验"></a>启动和校验</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止Docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行docker ps命令，如果不报错，说明安装启动成功</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h2 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h2><p>这里以阿里云镜像加速为例。</p><h3 id="注册阿里云账号"><a href="#注册阿里云账号" class="headerlink" title="注册阿里云账号"></a>注册阿里云账号</h3><p>首先访问阿里云网站:<br><a href="https://www.aliyun.com/">https://www.aliyun.com/</a><br>注册一个账号。</p><h3 id="开通镜像服务"><a href="#开通镜像服务" class="headerlink" title="开通镜像服务"></a>开通镜像服务</h3><p>在首页的产品中，找到阿里云的容器镜像服务：<br><img src="https://img.picgo.net/2024/05/06/Y4T46U1U55O0YZGZQ1496c2531ae52e1e.png"><br>点击后进入控制台：<br><img src="https://img.picgo.net/2024/05/06/LVNYYEBOVXP_BBS_QDOb84e8d26e7d8154b.png"><br>首次可能需要选择立刻开通，然后进入控制台。</p><h3 id="配置镜像加速-1"><a href="#配置镜像加速-1" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><p>找到镜像工具下的镜像加速器：<br><img src="https://img.picgo.net/2024/05/06/14AFXP4NMMZNKK862d3f1b92d118334.png"><br>页面向下滚动，即可找到配置的文档说明：<br><img src="https://img.picgo.net/2024/05/06/XDL588KHYP2_0A3N9IB40c390f7ca3e5614.png"></p><p>具体命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制内容，注意把其中的镜像加速地址改成你自己的</span></span><br><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://xxxx.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p><h1 id="docker的快速入门"><a href="#docker的快速入门" class="headerlink" title="docker的快速入门"></a>docker的快速入门</h1><h2 id="部署MySQL"><a href="#部署MySQL" class="headerlink" title="部署MySQL"></a>部署MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p>docker的简介<br><img src="https://img.picgo.net/2024/05/06/Q3REP2MEB6W7VXEIIPXHLYG783f64200ffc8cc5.png"></p><p>Docker官方提供了一个专门管理、存储镜像的网站，并对外开放了镜像上传、下载的权利。Docker官方提供了一些基础镜像，然后各大软件公司又在基础镜像基础上，制作了自家软件的镜像，全部都存放在这个网站。这个网站就成了Docker镜像交流的社区：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>Docker是做什么的？</p><ul><li>Docker可以帮助我们下载应用镜像，创建并运行镜像的容器，从而快速部署应用<br>什么是镜像？</li><li>将应用所需的函数库、依赖、配置等与应用一起打包得到的就是镜像<br>什么是容器?</li><li>为每个镜像的应用进程创建的隔离运行环境就是容器<br>什么是镜像仓库?</li><li>存储和管理镜像的服务就是镜像仓库，</li><li>DockerHub是目前最大的镜像仓库，其中包含各种常见的应用镜像</li></ul><h1 id="docker命令解读"><a href="#docker命令解读" class="headerlink" title="docker命令解读"></a>docker命令解读</h1><p><img src="https://img.picgo.net/2024/05/06/2V9A__4F1BNXATR3QCJde392bb26d444c4e.png"><br>第一个port是宿主机的port，第二个是镜像的port</p><p><img src="https://img.picgo.net/2024/05/06/LI8QLJ1UQWC8WWLGMI5B5338ab62324dc9583.png"></p><p><img src="https://img.picgo.net/2024/05/06/WU1RZG58PB8DL5WL41005bcd239c5153.png"></p><h1 id="docker基础-常见命令"><a href="#docker基础-常见命令" class="headerlink" title="docker基础-常见命令"></a>docker基础-常见命令</h1><p><img src="https://img.picgo.net/2024/05/06/Q05S7CX94_IGS91KA73c54f03cf097c44.png"><br>补充：<br>默认情况下，每次重启虚拟机我们都需要手动启动Docker和Docker中的容器。通过命令可以实现开机自启：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker开机自启</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker容器开机自启</span></span><br><span class="line">docker update <span class="literal">--restart</span>=always [容器名/容器<span class="type">id</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img.picgo.net/2024/05/06/YM47IVDSTYW385SXEY7b319dcc1b680ad4d.png"></p><p>教学环节说明：我们以Nginx为例给大家演示上述命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1步，去DockerHub查看nginx镜像仓库及相关信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2步，拉取Nginx镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第3步，查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果如下：</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        latest    605c77e624dd   16 months ago   141MB</span><br><span class="line">mysql        latest    3218b38490ce   17 months ago   516MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第4步，创建并允许Nginx容器</span></span><br><span class="line">docker run -d --name nginx -p 80:80 nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第5步，查看运行中容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 也可以加格式化方式访问，格式会更加清爽</span></span><br><span class="line">docker ps --format <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第6步，访问网页，地址：http://虚拟机地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第7步，停止容器</span></span><br><span class="line">docker stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第8步，查看所有容器</span></span><br><span class="line">docker ps -a --format <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第9步，再次启动nginx容器</span></span><br><span class="line">docker start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第10步，再次查看容器</span></span><br><span class="line">docker ps --format <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第11步，查看容器详细信息</span></span><br><span class="line">docker inspect nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第12步，进入容器,查看容器内目录</span></span><br><span class="line">docker <span class="built_in">exec</span> -it nginx bash</span><br><span class="line"><span class="comment"># 或者，可以进入MySQL</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第13步，删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br><span class="line"><span class="comment"># 发现无法删除，因为容器运行中，强制删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f nginx</span><br></pre></td></tr></table></figure></p><h1 id="docker-命令别名"><a href="#docker-命令别名" class="headerlink" title="docker-命令别名"></a>docker-命令别名</h1><p>给常用Docker命令起别名，方便我们访问：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改/root/.bashrc文件</span></span><br><span class="line">vi /root/.bashrc</span><br><span class="line">内容如下：</span><br><span class="line"><span class="comment"># .bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">rm</span>=<span class="string">&#x27;rm -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">cp</span>=<span class="string">&#x27;cp -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">mv</span>=<span class="string">&#x27;mv -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dps=<span class="string">&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dis=<span class="string">&#x27;docker images&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/bashrc ]; <span class="keyword">then</span></span><br><span class="line">        . /etc/bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><br>按ESC 然后输入:wq 退出并保存<br>然后，执行命令使别名生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /root/.bashrc</span><br></pre></td></tr></table></figure><h1 id="docker-数据卷挂载"><a href="#docker-数据卷挂载" class="headerlink" title="docker-数据卷挂载"></a>docker-数据卷挂载</h1><p>数据卷（volume）是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁。<br>以Nginx为例，我们知道Nginx中有两个关键的目录：</p><ul><li>html：放置一些静态资源</li><li>conf：放置配置文件<br>如果我们要让Nginx代理我们的静态资源，最好是放到html目录；如果我们要修改Nginx的配置，最好是找到conf下的nginx.conf文件。<br>但遗憾的是，容器运行的Nginx所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：<br><img src="https://img.picgo.net/2024/05/06/GR2DPTYFNRSLOGQ8F8052a3812e0771c7.png"></li></ul><p>在上图中：</p><ul><li>我们创建了两个数据卷：conf、html</li><li>Nginx容器内部的conf目录和html目录分别与两个数据卷关联。</li><li>而数据卷conf和html分别指向了宿主机的/var/lib/docker/volumes/conf/_data目录和/var/lib/docker/volumes/html/_data目录<br>这样以来，容器内的conf和html目录就 与宿主机的conf和html目录关联起来，我们称为挂载。此时，我们操作宿主机的/var/lib/docker/volumes/html/_data就是在操作容器内的/usr/share/nginx/html/_data目录。只要我们将静态资源放入宿主机对应目录，就可以被Nginx代理了。</li></ul><p>小提示：<br>/var/lib/docker/volumes这个目录就是默认的存放所有容器数据卷的目录，其下再根据数据卷名称创建新目录，格式为/数据卷名/_data。</p><p>为什么不让容器目录直接指向宿主机目录呢？</p><ul><li>因为直接指向宿主机目录就与宿主机强耦合了，如果切换了环境，宿主机目录就可能发生改变了。由于容器一旦创建，目录挂载就无法修改，这样容器就无法正常工作了。</li><li>但是容器指向数据卷，一个逻辑名称，而数据卷再指向宿主机目录，就不存在强耦合。如果宿主机目录发生改变，只要改变数据卷与宿主机目录之间的映射关系即可。</li></ul><p>不过，我们通过由于数据卷目录比较深，不好寻找，通常我们也允许让容器直接与宿主机目录挂载而不使用数据卷。</p><p><img src="https://img.picgo.net/2024/05/06/J7SM5AZNNA3J77J7d60c7e6ab3bcfea.png"><br>注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且创建容器的过程中，数据卷会自动创建。</p><p>演示一下nginx的html目录挂载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span></span><br><span class="line">docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后查看数据卷</span></span><br><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</span><br><span class="line"><span class="built_in">local</span>     html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看数据卷详情</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2024-05-17T19:57:08+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看/var/lib/docker/volumes/html/_data目录</span></span><br><span class="line">ll /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="comment"># 可以看到与nginx的html目录内容一样，结果如下：</span></span><br><span class="line">总用量 8</span><br><span class="line">-rw-r--r--. 1 root root 497 12月 28 2021 50x.html</span><br><span class="line">-rw-r--r--. 1 root root 615 12月 28 2021 index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.进入该目录，并随意修改index.html内容</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/html/_data</span><br><span class="line">vi index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.打开页面，查看效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化</span></span><br><span class="line">docker <span class="built_in">exec</span> -it nginx bash</span><br></pre></td></tr></table></figure><br>总结：<br>什么是数据卷？</p><ul><li>数据卷是一个虚拟目录，它将宿主机目录映射到容器内目录，方便我们操作容器内文件，或者方便迁移容器产生的数据<br>如何挂载数据卷？</li><li>在创建容器时，利用 -v 数据卷名：容器内目录完成挂载</li><li>容器创建时，如果发现挂载的数据卷不存在时，会自动创建<br>数据卷的常见命令有哪些？</li><li>docker volume ls: 查看数据卷</li><li>docker volume rm: 删除数据卷</li><li>docker volume inspect: 查看数据卷详情</li><li>docker volume prune:  删除未使用的数据卷</li></ul><h1 id="docker-本地目录挂载"><a href="#docker-本地目录挂载" class="headerlink" title="docker-本地目录挂载"></a>docker-本地目录挂载</h1><p>可以发现，数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 挂载本地目录</span></span><br><span class="line">-v 本地目录:容器内目录</span><br><span class="line"><span class="comment"># 挂载本地文件</span></span><br><span class="line">-v 本地文件:容器内文件</span><br></pre></td></tr></table></figure><br>注意：本地目录或文件必须以 / 或 ./开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-v mysql:/var/lib/mysql <span class="comment"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span></span><br><span class="line">-v ./mysql:/var/lib/mysql <span class="comment"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span></span><br></pre></td></tr></table></figure><br>删除并重新创建mysql容器，并完成本地目录挂载：</p><ul><li>挂载/root/mysql/data到容器内的/var/lib/mysql目录</li><li>挂载/root/mysql/init到容器内的/docker-entrypoint-initdb.d目录（初始化的SQL脚本目录）</li><li>挂载/root/mysql/conf到容器内的/etc/mysql/conf.d目录（这个是MySQL配置文件目录）<br>在课前资料中已经准备好了mysql的init目录和conf目录：<br><img src="https://img.picgo.net/2024/05/06/RHNTUHO7LJTQ74JIERX02cd70f3e6f09704.png"></li></ul><p>以及对应的初始化SQL脚本和配置文件：<br><img src="https://img.picgo.net/2024/05/06/QMNN0QHM4WBHX92K34d97b2f52035054.png"></p><p><img src="https://img.picgo.net/2024/05/06/9VJTVO4_LUMO9B9I64a706a07187d980d.png"></p><p>其中，hm.cnf主要是配置了MySQL的默认编码，改为utf8mb4；而hmall.sql则是后面我们要用到的黑马商城项目的初始化SQL脚本。</p><p>我们直接将整个mysql目录上传至虚拟机的/root目录下：<br><img src="https://img.picgo.net/2024/05/06/K67LWWJCLSKOVY9af88fcb5e8c49099.png"></p><p>接下来，我们演示本地目录挂载：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.删除原来的MySQL容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.进入root目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建并运行新mysql容器，挂载本地目录</span></span><br><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  -v ./mysql/data:/var/lib/mysql \</span><br><span class="line">  -v ./mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">  -v ./mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">  mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看root目录，可以发现~/mysql/data目录已经自动创建好了</span></span><br><span class="line"><span class="built_in">ls</span> -l mysql</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">总用量 4</span><br><span class="line">drwxr-xr-x. 2 root    root   20 5月  19 15:11 conf</span><br><span class="line">drwxr-xr-x. 7 polkitd root 4096 5月  19 15:11 data</span><br><span class="line">drwxr-xr-x. 2 root    root   23 5月  19 15:11 init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看data目录，会发现里面有大量数据库数据，说明数据库完成了初始化</span></span><br><span class="line"><span class="built_in">ls</span> -l data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.查看MySQL容器内数据</span></span><br><span class="line"><span class="comment"># 5.1.进入MySQL</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql mysql -uroot -p123</span><br><span class="line"><span class="comment"># 5.2.查看编码表</span></span><br><span class="line">show variables like <span class="string">&quot;%char%&quot;</span>;</span><br><span class="line"><span class="comment"># 5.3.结果，发现编码是utf8mb4没有问题</span></span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| Variable_name            | Value                          |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| character_set_client     | utf8mb4                        |</span><br><span class="line">| character_set_connection | utf8mb4                        |</span><br><span class="line">| character_set_database   | utf8mb4                        |</span><br><span class="line">| character_set_filesystem | binary                         |</span><br><span class="line">| character_set_results    | utf8mb4                        |</span><br><span class="line">| character_set_server     | utf8mb4                        |</span><br><span class="line">| character_set_system     | utf8mb3                        |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查看数据</span></span><br><span class="line"><span class="comment"># 6.1.查看数据库</span></span><br><span class="line">show databases;</span><br><span class="line"><span class="comment"># 结果，hmall是黑马商城数据库</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| hmall              |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment"># 6.2.切换到hmall数据库</span></span><br><span class="line">use hmall;</span><br><span class="line"><span class="comment"># 6.3.查看表</span></span><br><span class="line">show tables;</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_hmall |</span><br><span class="line">+-----------------+</span><br><span class="line">| address         |</span><br><span class="line">| cart            |</span><br><span class="line">| item            |</span><br><span class="line">| order           |</span><br><span class="line">| order_detail    |</span><br><span class="line">| order_logistics |</span><br><span class="line">| pay_order       |</span><br><span class="line">| user            |</span><br><span class="line">+-----------------+</span><br><span class="line"><span class="comment"># 6.4.查看address表数据</span></span><br><span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span><br><span class="line">| <span class="built_in">id</span> | user_id | province | city   | town     | mobile      | street        | contact   | is_default | notes |</span><br><span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span><br><span class="line">| 59 |       1 | 北京     | 北京   | 朝阳区    | 13900112222 | 金燕龙办公楼   | 李佳诚    | 0          | NULL  |</span><br><span class="line">| 60 |       1 | 北京     | 北京   | 朝阳区    | 13700221122 | 修正大厦       | 李佳红    | 0          | NULL  |</span><br><span class="line">| 61 |       1 | 上海     | 上海   | 浦东新区  | 13301212233 | 航头镇航头路   | 李佳星    | 1          | NULL  |</span><br><span class="line">| 63 |       1 | 广东     | 佛山   | 永春      | 13301212233 | 永春武馆       | 李晓龙    | 0          | NULL  |</span><br><span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p><h1 id="docker-Dockerfile语法"><a href="#docker-Dockerfile语法" class="headerlink" title="docker-Dockerfile语法"></a>docker-Dockerfile语法</h1><p>前面我们一直在使用别人准备好的镜像，那如果我要部署一个Java项目，把它打包为一个镜像该怎么做呢？</p><p>要想自己构建镜像，必须先了解镜像的结构。<br>之前我们说过，镜像之所以能让我们快速跨操作系统部署应用而忽略其运行环境、配置，就是因为镜像中包含了程序运行需要的系统函数库、环境、配置、依赖。<br>因此，自定义镜像本质就是依次准备好程序运行的基础环境、依赖、应用本身、运行配置等文件，并且打包而成。</p><p>举个例子，我们要从0部署一个Java应用，大概流程是这样：</p><ul><li>准备一个linux服务（CentOS或者Ubuntu均可）</li><li>安装并配置JDK</li><li>上传Jar包</li><li>运行jar包</li></ul><p>那因此，我们打包镜像也是分成这么几步：</p><ul><li>准备Linux运行环境（java项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li><li>安装并配置JDK</li><li>拷贝jar包</li><li>配置启动脚本<br>上述步骤中的每一次操作其实都是在生产一些文件（系统运行环境、函数库、配置最终都是磁盘文件），所以镜像就是一堆文件的集合。<br>但需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一id，称为Layer（层）。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。</li></ul><p>例如，第一步中需要的Linux运行环境，通用性就很强，所以Docker官方就制作了这样的只包含Linux运行环境的镜像。我们在制作java镜像时，就无需重复制作，直接使用Docker官方提供的CentOS或Ubuntu镜像作为基础镜像。然后再搭建其它层即可，这样逐层搭建，最终整个Java项目的镜像结构如图所示：</p><p><img src="https://img.picgo.net/2024/05/07/1EG26LRMW87HIM26Z9daed2571e9eb53bb.png"></p><p>由于制作镜像的过程中，需要逐层处理和打包，比较复杂，所以Docker就提供了自动打包镜像的功能。我们只需要将打包的过程，每一层要做的事情用固定的语法写下来，交给Docker去执行即可。<br>而这种记录镜像结构的文件就称为Dockerfile，其对应的语法可以参考官方文档：<br><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><p>其中的语法比较多，比较常用的有：<br><img src="https://img.picgo.net/2024/05/07/BF6J3TRU0VBMN2JW1OR0X6a59be89704c72c50.png"></p><p>例如，要基于Ubuntu镜像来构建一个Java应用，其Dockerfile内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line">FROM ubuntu:16.04</span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录、容器内时区</span></span><br><span class="line">ENV JAVA_DIR=/usr/local</span><br><span class="line">ENV TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line">COPY ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span><br><span class="line">COPY ./docker-demo.jar /tmp/app.jar</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line">RUN <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line">RUN <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span><br><span class="line"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span><br><span class="line"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">ENV JAVA_HOME=<span class="variable">$JAVA_DIR</span>/java8</span><br><span class="line">ENV PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="comment"># 指定项目监听的端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure></p><p>同学们思考一下：以后我们会有很多很多java项目需要打包为镜像，他们都需要Linux系统环境、JDK环境这两层，只有上面的3层不同（因为jar包不同）。如果每次制作java镜像都重复制作前两层镜像，是不是很麻烦。</p><p>所以，就有人提供了基础的系统加JDK环境，我们在此基础上制作java镜像，就可以省去JDK的配置了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line">FROM openjdk:11.0-jre-buster</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line">ENV TZ=Asia/Shanghai</span><br><span class="line">RUN <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span><br><span class="line"><span class="comment"># 拷贝jar包</span></span><br><span class="line">COPY docker-demo.jar /app.jar</span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure></p><h1 id="docker-自定义镜像"><a href="#docker-自定义镜像" class="headerlink" title="docker-自定义镜像"></a>docker-自定义镜像</h1><p><img src="https://img.picgo.net/2024/05/07/WSBICCLXXG4GDJ8H45818b2e60cf137fd0.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入镜像目录</span></span><br><span class="line"><span class="built_in">cd</span> /root/demo</span><br><span class="line"><span class="comment"># 开始构建</span></span><br><span class="line">docker build -t docker-demo:1.0 .</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>docker build : 就是构建一个docker镜像</li><li>-t docker-demo:1.0 ：-t参数是指定镜像的名称（repository和tag）</li><li>. : 最后的点是指构建时Dockerfile所在路径，由于我们进入了demo目录，所以指定的是.代表当前目录，也可以直接指定Dockerfile目录：</li></ul><p>查看镜像列表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看镜像列表：</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">docker-demo   1.0       d6ab0b9e64b9   27 minutes ago   327MB</span><br><span class="line">nginx         latest    605c77e624dd   16 months ago    141MB</span><br><span class="line">mysql         latest    3218b38490ce   17 months ago    516MB</span><br></pre></td></tr></table></figure></p><p>然后尝试运行该镜像：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建并运行容器</span></span><br><span class="line">docker run -d --name <span class="built_in">dd</span> -p 8080:8080 docker-demo:1.0</span><br><span class="line"><span class="comment"># 2.查看容器</span></span><br><span class="line">dps</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">CONTAINER ID   IMAGE             PORTS                                                  STATUS         NAMES</span><br><span class="line">78a000447b49   docker-demo:1.0   0.0.0.0:8080-&gt;8080/tcp, :::8090-&gt;8090/tcp              Up 2 seconds   <span class="built_in">dd</span></span><br><span class="line">f63cfead8502   mysql             0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   Up 2 hours     mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.访问</span></span><br><span class="line">curl localhost:8080/hello/count</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">&lt;h5&gt;欢迎访问黑马商城, 这是您第1次访问&lt;h5&gt;</span><br></pre></td></tr></table></figure></p><p>总结<br>镜像的结构是怎样的？</p><ul><li>镜像中包含了应用程序所需要的运行环境、函数库、配置、以及应用本身等各种文件，这些文件分层打包而成。<br>Dockerfile是做什么的？</li><li>Dockerfile就是利用固定的指令来描述镜像的结构和构建过程，这样Docker才可以依次来构建镜像<br>构建镜像的命令是什么？</li><li>docker build -t 镜像名 Dockerfile目录</li></ul><h1 id="docker-容器网络互连"><a href="#docker-容器网络互连" class="headerlink" title="docker-容器网络互连"></a>docker-容器网络互连</h1><p>上节课我们创建了一个Java项目的容器，而Java项目往往需要访问其它各种中间件，例如MySQL、Redis等。现在，我们的容器之间能否互相访问呢？我们来测试一下</p><p>首先，我们查看下MySQL容器的详细信息，重点关注其中的网络IP地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.用基本命令，寻找Networks.bridge.IPAddress属性</span></span><br><span class="line">docker inspect mysql</span><br><span class="line"><span class="comment"># 也可以使用format过滤结果</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> mysql</span><br><span class="line"><span class="comment"># 得到IP地址如下：</span></span><br><span class="line">172.17.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后通过命令进入dd容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="built_in">dd</span> bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.在容器内，通过ping命令测试网络</span></span><br><span class="line">ping 172.17.0.2</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.053 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.059 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.058 ms</span><br></pre></td></tr></table></figure></p><p>发现可以互联，没有问题。</p><p>但是，容器的网络IP其实是一个虚拟的IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个IP，而在部署时很可能MySQL容器的IP会发生变化，连接会失败。</p><p>所以，我们必须借助于docker的网络功能来解决这个问题，官方文档：<br><a href="https://docs.docker.com/engine/reference/commandline/network/">https://docs.docker.com/engine/reference/commandline/network/</a><br>常见命令有：<br><img src="https://img.picgo.net/2024/05/07/09OUEB6D9I9MQRIP45ff58d44a73a030a4.png"><br>自定义网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.首先通过命令创建一个网络</span></span><br><span class="line">docker network create hmall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后查看网络</span></span><br><span class="line">docker network <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">639bc44d0a87   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">403f16ec62a2   hmall     bridge    <span class="built_in">local</span></span><br><span class="line">0dc0f72a0fbb   host      host      <span class="built_in">local</span></span><br><span class="line">cd8d3e8df47b   none      null      <span class="built_in">local</span></span><br><span class="line"><span class="comment"># 其中，除了hmall以外，其它都是默认的网络</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名</span></span><br><span class="line"><span class="comment"># 这样该网络内的其它容器可以用别名互相访问！</span></span><br><span class="line"><span class="comment"># 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span></span><br><span class="line">docker network connect hmall mysql --<span class="built_in">alias</span> db</span><br><span class="line"><span class="comment"># 3.2.db容器，也就是我们的java项目</span></span><br><span class="line">docker network connect hmall <span class="built_in">dd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.进入dd容器，尝试利用别名访问db</span></span><br><span class="line"><span class="comment"># 4.1.进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="built_in">dd</span> bash</span><br><span class="line"><span class="comment"># 4.2.用db别名访问</span></span><br><span class="line">ping db</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">PING db (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms</span><br><span class="line"><span class="comment"># 4.3.用容器名访问</span></span><br><span class="line">ping mysql</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">PING mysql (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms</span><br></pre></td></tr></table></figure><p>OK，现在无需记住IP地址也可以实现容器互联了。</p><p>总结：</p><ul><li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li><li>在同一个自定义网络中的容器，可以通过别名互相访问</li></ul><h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><p>项目说明：</p><ul><li>hmall：商城的后端代码</li><li>hmall-portal：商城用户端的前端代码</li><li>hmall-admin：商城管理端的前端代码<br>部署的容器及端口说明：<br><img src="https://img.picgo.net/2024/05/07/TUGWA7NCSZ1XE04W8152ba3a78510ef86.png"></li></ul><p>在正式部署前，我们先删除之前的nginx、dd两个容器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f nginx <span class="built_in">dd</span></span><br></pre></td></tr></table></figure><br>mysql容器中已经准备好了商城的数据，所以就不再删除了。</p><h2 id="部署Java应用"><a href="#部署Java应用" class="headerlink" title="部署Java应用"></a>部署Java应用</h2><p>hmall项目是一个maven聚合项目，使用IDEA打开hmall项目，查看项目结构如图：<br><img src="https://img.picgo.net/2024/05/07/OAE3UZFFP8ECJN50FI0e5785676f282bc7f.png"></p><p>我们要部署的就是其中的hm-service，其中的配置文件采用了多环境的方式：<br><img src="https://img.picgo.net/2024/05/07/GHXDFXZ7IBZXM4TMEUae22b943011c26fe.png" ></p><p>其中的application-dev.yaml是部署到开发环境的配置，application-local.yaml是本地运行时的配置。</p><p>查看application.yaml，你会发现其中的JDBC地址并未写死，而是读取变量：<br><img src="https://img.picgo.net/2024/05/07/WONN445CKLQ60_SUAM7Wc2639e8df9d07fbc.png"></p><p>这两个变量在application-dev.yaml和application-local.yaml中并不相同：<br><img src="https://img.picgo.net/2024/05/07/Y1J6DABV7RKDRV93D1ddd8dc7a1d96037.png"></p><p>在dev开发环境（也就是Docker部署时）采用了mysql作为地址，刚好是我们的mysql容器名，只要两者在一个网络，就一定能互相访问。</p><p>我们将项目打包：<br><img src="https://img.picgo.net/2024/05/07/55T83IUIYWDRDC1O6Wc78ef045fe3583b1.png"></p><p>结果：<br><img src="https://img.picgo.net/2024/05/07/L6NIKLW04LKLRVD8PPB0c23f0723b05b380f.png"></p><p>将hm-service目录下的Dockerfile和hm-service/target目录下的hm-service.jar一起上传到虚拟机的root目录：<br><img src="https://img.picgo.net/2024/05/07/LIHZQR1Z1QLRAASPRIa4a008bf7ab8d628.png"><br>部署项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.构建项目镜像，不指定tag，则默认为latest</span></span><br><span class="line">docker build -t hmall .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">hmall         latest    0bb07b2c34b9   43 seconds ago   362MB</span><br><span class="line">docker-demo   1.0       49743484da68   24 hours ago     327MB</span><br><span class="line">nginx         latest    605c77e624dd   16 months ago    141MB</span><br><span class="line">mysql         latest    3218b38490ce   17 months ago    516MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建并运行容器，并通过--network将其加入hmall网络，这样才能通过容器名访问mysql(我使用heima这个network)</span></span><br><span class="line">docker run -d --name hmall --network hmall -p 8080:8080 hmall</span><br></pre></td></tr></table></figure><p>测试，通过浏览器访问：<a href="http://你的虚拟机地址:8080/search/list">http://你的虚拟机地址:8080/search/list</a></p><h2 id="部署前端"><a href="#部署前端" class="headerlink" title="部署前端"></a>部署前端</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker的安装&quot;&gt;&lt;a href=&quot;#docker的安装&quot; class=&quot;headerlink&quot; title=&quot;docker的安装&quot;&gt;&lt;/a&gt;docker的安装&lt;/h1&gt;&lt;h2 id=&quot;卸载旧版&quot;&gt;&lt;a href=&quot;#卸载旧版&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="docker" scheme="https://wjlgmw-github-io.vercel.app/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>IO流</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/fed4c017.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/fed4c017.html</id>
    <published>2024-04-28T20:11:20.000Z</published>
    <updated>2024-05-08T01:31:03.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fie、IO流概述"><a href="#Fie、IO流概述" class="headerlink" title="Fie、IO流概述"></a>Fie、IO流概述</h1><p>File是java.io包下的类，File类的对象，用于代表当前操作系统的文件（可以是文件、或文件夹）<br>注意：File类只能对文件本身进行操作，不能读写文件里面存储的数据</p><p>IO流用于读写数据的（可以读写文件，或网络中的数据）<br><img src="https://img.picgo.net/2024/04/29/6I9C9SLXH8Q3JUXD5abb695d2e4d1efb.png"></p><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><p><img src="https://img.picgo.net/2024/04/29/RVH5CBZ3XNZANDPP27Y05b3dfcd6babd4b6.png"></p><p><img src="https://img.picgo.net/2024/04/29/R6_CBN5H_3ONZM_A9WVcad4ed4701b1a8ba.png"></p><p><img src="https://img.picgo.net/2024/04/29/NVTUX_6OVFJ9TWIBQCOc3f26c19a895646d.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fie、IO流概述&quot;&gt;&lt;a href=&quot;#Fie、IO流概述&quot; class=&quot;headerlink&quot; title=&quot;Fie、IO流概述&quot;&gt;&lt;/a&gt;Fie、IO流概述&lt;/h1&gt;&lt;p&gt;File是java.io包下的类，File类的对象，用于代表当前操作系统的文件（可以</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="IO流" scheme="https://wjlgmw-github-io.vercel.app/tags/IO%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Stream流</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/657e9de6.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/657e9de6.html</id>
    <published>2024-04-26T11:06:59.000Z</published>
    <updated>2024-05-08T01:31:03.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h1><h2 id="1-不可变集合"><a href="#1-不可变集合" class="headerlink" title="1.不可变集合"></a>1.不可变集合</h2><h3 id="1-1-什么是不可变集合"><a href="#1-1-什么是不可变集合" class="headerlink" title="1.1 什么是不可变集合"></a>1.1 什么是不可变集合</h3><p>​    是一个长度不可变，内容也无法修改的集合</p><h3 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a>1.2 使用场景</h3><p>​    如果某个数据不能被修改，把它防御性地拷贝到不可变集合中是个很好的实践。</p><p>​    当集合对象被不可信的库调用时，不可变形式是安全的。</p><p>简单理解：</p><p>​    不想让别人修改集合中的内容</p><p>比如说：</p><p>1，斗地主的54张牌，是不能添加，不能删除，不能修改的</p><p>2，斗地主的打牌规则：单张，对子，三张，顺子等，也是不能修改的</p><p>3，用代码获取的操作系统硬件信息，也是不能被修改的</p><h3 id="1-4-不可变的list集合"><a href="#1-4-不可变的list集合" class="headerlink" title="1.4 不可变的list集合"></a>1.4 不可变的list集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            创建不可变的List集合</span></span><br><span class="line"><span class="comment">            &quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一旦创建完毕之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span></span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(list.get(<span class="number">2</span>));</span><br><span class="line">        System.out.println(list.get(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//list.remove(&quot;李四&quot;);</span></span><br><span class="line">        <span class="comment">//list.add(&quot;aaa&quot;);</span></span><br><span class="line">        list.set(<span class="number">0</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-不可变的Set集合"><a href="#1-5-不可变的Set集合" class="headerlink" title="1.5 不可变的Set集合"></a>1.5 不可变的Set集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           创建不可变的Set集合</span></span><br><span class="line"><span class="comment">           &quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           细节：</span></span><br><span class="line"><span class="comment">                当我们要获取一个不可变的Set集合时，里面的参数一定要保证唯一性</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一旦创建完毕之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span></span><br><span class="line">        Set&lt;String&gt; set = Set.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//set.remove(&quot;王五&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-不可变的Map集合"><a href="#1-6-不可变的Map集合" class="headerlink" title="1.6 不可变的Map集合"></a>1.6 不可变的Map集合</h3><h4 id="1-6-1：键值对个数小于等于10"><a href="#1-6-1：键值对个数小于等于10" class="headerlink" title="1.6.1：键值对个数小于等于10"></a>1.6.1：键值对个数小于等于10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        创建Map的不可变集合</span></span><br><span class="line"><span class="comment">            细节1：</span></span><br><span class="line"><span class="comment">                键是不能重复的</span></span><br><span class="line"><span class="comment">            细节2：</span></span><br><span class="line"><span class="comment">                Map里面的of方法，参数是有上限的，最多只能传递20个参数，10个键值对</span></span><br><span class="line"><span class="comment">            细节3：</span></span><br><span class="line"><span class="comment">                如果我们要传递多个键值对对象，数量大于10个，在Map接口中还有一个方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一旦创建完毕之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span></span><br><span class="line">        Map&lt;String, String&gt; map = Map.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;南京&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;北京&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;上海&quot;</span>,</span><br><span class="line">                <span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;广州&quot;</span>, <span class="string">&quot;孙七&quot;</span>, <span class="string">&quot;深圳&quot;</span>, <span class="string">&quot;周八&quot;</span>, <span class="string">&quot;杭州&quot;</span>,</span><br><span class="line">                <span class="string">&quot;吴九&quot;</span>, <span class="string">&quot;宁波&quot;</span>, <span class="string">&quot;郑十&quot;</span>, <span class="string">&quot;苏州&quot;</span>, <span class="string">&quot;刘一&quot;</span>, <span class="string">&quot;无锡&quot;</span>,</span><br><span class="line">                <span class="string">&quot;陈二&quot;</span>, <span class="string">&quot;嘉兴&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-6-2：键值对个数大于10"><a href="#1-6-2：键值对个数大于10" class="headerlink" title="1.6.2：键值对个数大于10"></a>1.6.2：键值对个数大于10</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            创建Map的不可变集合,键值对的数量超过10个</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一个普通的Map集合</span></span><br><span class="line">        HashMap&lt;String, String&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hm.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;南京&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;孙七&quot;</span>, <span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;周八&quot;</span>, <span class="string">&quot;杭州&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;吴九&quot;</span>, <span class="string">&quot;宁波&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;郑十&quot;</span>, <span class="string">&quot;苏州&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;刘一&quot;</span>, <span class="string">&quot;无锡&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;陈二&quot;</span>, <span class="string">&quot;嘉兴&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用上面的数据来获取一个不可变的集合</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        //获取到所有的键值对对象（Entry对象）</span></span><br><span class="line"><span class="comment">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = hm.entrySet();</span></span><br><span class="line"><span class="comment">        //把entries变成一个数组</span></span><br><span class="line"><span class="comment">        Map.Entry[] arr1 = new Map.Entry[0];</span></span><br><span class="line"><span class="comment">        //toArray方法在底层会比较集合的长度跟数组的长度两者的大小</span></span><br><span class="line"><span class="comment">        //如果集合的长度 &gt; 数组的长度 ：数据在数组中放不下，此时会根据实际数据的个数，重新创建数组</span></span><br><span class="line"><span class="comment">        //如果集合的长度 &lt;= 数组的长度：数据在数组中放的下，此时不会创建新的数组，而是直接用</span></span><br><span class="line"><span class="comment">        Map.Entry[] arr2 = entries.toArray(arr1);</span></span><br><span class="line"><span class="comment">        //不可变的map集合</span></span><br><span class="line"><span class="comment">        Map map = Map.ofEntries(arr2);</span></span><br><span class="line"><span class="comment">        map.put(&quot;bbb&quot;,&quot;222&quot;);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Map&lt;Object, Object&gt; map = Map.ofEntries(hm.entrySet().toArray(new Map.Entry[0]));</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map = Map.copyOf(hm);</span><br><span class="line">        map.put(<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.picgo.net/2024/04/26/RXDA7X0TTY77H4QHb0b17ed0446aa294.png"></p><h1 id="2-Stream流"><a href="#2-Stream流" class="headerlink" title="2.Stream流"></a>2.Stream流</h1><h2 id="2-1体验Stream流【理解】"><a href="#2-1体验Stream流【理解】" class="headerlink" title="2.1体验Stream流【理解】"></a>2.1体验Stream流【理解】</h2><ul><li><p>案例需求</p><p>按照下面的要求完成集合的创建和遍历</p><ul><li>创建一个集合，存储多个字符串元素</li><li>把集合中所有以”张”开头的元素存储到一个新的集合</li><li>把”张”开头的集合中的长度为3的元素存储到一个新的集合</li><li>遍历上一步得到的集合</li></ul></li><li><p>原始方式示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStream1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//集合的批量添加</span></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(List.of(<span class="string">&quot;张三丰&quot;</span>,<span class="string">&quot;张无忌&quot;</span>,<span class="string">&quot;张翠山&quot;</span>,<span class="string">&quot;王二麻子&quot;</span>,<span class="string">&quot;张良&quot;</span>,<span class="string">&quot;谢广坤&quot;</span>));</span><br><span class="line">        <span class="comment">//list.add()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历list1把以张开头的元素添加到list2中。</span></span><br><span class="line">        ArrayList&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : list1) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.startsWith(<span class="string">&quot;张&quot;</span>))&#123;</span><br><span class="line">                list2.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历list2集合，把其中长度为3的元素，再添加到list3中。</span></span><br><span class="line">        ArrayList&lt;String&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : list2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.length() == <span class="number">3</span>)&#123;</span><br><span class="line">                list3.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String s : list3) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Stream流示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//集合的批量添加</span></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(List.of(<span class="string">&quot;张三丰&quot;</span>,<span class="string">&quot;张无忌&quot;</span>,<span class="string">&quot;张翠山&quot;</span>,<span class="string">&quot;王二麻子&quot;</span>,<span class="string">&quot;张良&quot;</span>,<span class="string">&quot;谢广坤&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Stream流</span></span><br><span class="line">        list1.stream().filter(s-&gt;s.startsWith(<span class="string">&quot;张&quot;</span>))</span><br><span class="line">                .filter(s-&gt;s.length() == <span class="number">3</span>)</span><br><span class="line">                .forEach(s-&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Stream流的好处</p><ul><li>直接阅读代码的字面意思即可完美展示无关逻辑方式的语义：获取流、过滤姓张、过滤长度为3、逐一打印</li><li>Stream流把真正的函数式编程风格引入到Java中</li><li>代码简洁</li></ul></li></ul><h2 id="2-2Stream流的常见生成方式【应用】"><a href="#2-2Stream流的常见生成方式【应用】" class="headerlink" title="2.2Stream流的常见生成方式【应用】"></a>2.2Stream流的常见生成方式【应用】</h2><p>  <img src="https://img.picgo.net/2024/04/26/GG_6SJUER7FJOQV5536Nb0a04bb8eeff1009.png"></p><ul><li><p>Stream流的三类方法</p><ul><li>获取Stream流<ul><li>创建一条流水线,并把数据放到流水线上准备进行操作</li></ul></li><li>中间方法<ul><li>流水线上的操作</li><li>一次操作完毕之后,还可以继续进行其他操作</li></ul></li><li>终结方法<ul><li>一个Stream流只能有一个终结方法</li><li>是流水线上的最后一个操作</li></ul></li></ul></li><li><p>生成Stream流的方式</p><ul><li><p>Collection体系集合</p><p>使用默认方法stream()生成流， default Stream<E> stream()</p></li><li><p>Map体系集合</p><p>把Map转成Set集合，间接的生成流</p></li><li><p>数组</p><p>通过Arrays中的静态方法stream生成流</p></li><li><p>同种数据类型的多个数据</p><p>通过Stream接口的静态方法of(T… values)生成流</p></li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Collection体系的集合可以使用默认方法stream()生成流</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        Stream&lt;String&gt; listStream = list.stream();</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        Stream&lt;String&gt; setStream = set.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Map体系的集合间接的生成流</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;();</span><br><span class="line">        Stream&lt;String&gt; keyStream = map.keySet().stream();</span><br><span class="line">        Stream&lt;Integer&gt; valueStream = map.values().stream();</span><br><span class="line">        Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; entryStream = map.entrySet().stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组可以通过Arrays中的静态方法stream生成流</span></span><br><span class="line">        String[] strArray = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; strArrayStream = Arrays.stream(strArray);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//同种数据类型的多个数据可以通过Stream接口的静态方法of(T... values)生成流</span></span><br><span class="line">        Stream&lt;String&gt; strArrayStream2 = Stream.of(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">        Stream&lt;Integer&gt; intStream = Stream.of(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>概念</p><p>中间操作的意思是,执行完此方法之后,Stream流依然可以继续执行其他操作</p></li><li><p>常见方法</p><p>| 方法名                                      | 说明                                       |<br>| ———————————————————— | ———————————————————— |<br>| Stream<T> filter(Predicate predicate)    | 用于对流中的数据进行过滤                             |<br>| Stream<T> limit(long maxSize)            | 返回此流中的元素组成的流，截取前指定参数个数的数据                |<br>| Stream<T> skip(long n)                   | 跳过指定参数个数的数据，返回由该流的剩余元素组成的流               |<br>| static <T> Stream<T> concat(Stream a, Stream b) | 合并a和b两个流为一个流                             |<br>| Stream<T> distinct()                     | 返回由该流的不同元素（根据Object.equals(Object) ）组成的流 |</p></li><li><p>filter代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStream3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Stream&lt;T&gt; filter(Predicate predicate)：过滤</span></span><br><span class="line"><span class="comment">//        Predicate接口中的方法boolean test(T t)：对给定的参数进行判断，返回一个布尔值</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张翠山&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王二麻子&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张良&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;谢广坤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//filter方法获取流中的 每一个数据.</span></span><br><span class="line">        <span class="comment">//而test方法中的s,就依次表示流中的每一个数据.</span></span><br><span class="line">        <span class="comment">//我们只要在test方法中对s进行判断就可以了.</span></span><br><span class="line">        <span class="comment">//如果判断的结果为true,则当前的数据留下</span></span><br><span class="line">        <span class="comment">//如果判断的结果为false,则当前数据就不要.</span></span><br><span class="line"><span class="comment">//        list.stream().filter(</span></span><br><span class="line"><span class="comment">//                new Predicate&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//                    @Override</span></span><br><span class="line"><span class="comment">//                    public boolean test(String s) &#123;</span></span><br><span class="line"><span class="comment">//                        boolean result = s.startsWith(&quot;张&quot;);</span></span><br><span class="line"><span class="comment">//                        return result;</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//        ).forEach(s-&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为Predicate接口中只有一个抽象方法test</span></span><br><span class="line">        <span class="comment">//所以我们可以使用lambda表达式来简化</span></span><br><span class="line"><span class="comment">//        list.stream().filter(</span></span><br><span class="line"><span class="comment">//                (String s)-&gt;&#123;</span></span><br><span class="line"><span class="comment">//                    boolean result = s.startsWith(&quot;张&quot;);</span></span><br><span class="line"><span class="comment">//                        return result;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//        ).forEach(s-&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        list.stream().filter(s -&gt;s.startsWith(<span class="string">&quot;张&quot;</span>)).forEach(s-&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>limit&amp;skip代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求1：取前3个数据在控制台输出</span></span><br><span class="line">        list.stream().limit(<span class="number">3</span>).forEach(s-&gt; System.out.println(s));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：跳过3个元素，把剩下的元素在控制台输出</span></span><br><span class="line">        list.stream().skip(<span class="number">3</span>).forEach(s-&gt; System.out.println(s));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：跳过2个元素，把剩下的元素中前2个在控制台输出</span></span><br><span class="line">        list.stream().skip(<span class="number">2</span>).limit(<span class="number">2</span>).forEach(s-&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>concat&amp;distinct代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求1：取前4个数据组成一个流</span></span><br><span class="line">        Stream&lt;String&gt; s1 = list.stream().limit(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：跳过2个数据组成一个流</span></span><br><span class="line">        Stream&lt;String&gt; s2 = list.stream().skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：合并需求1和需求2得到的流，并把结果在控制台输出</span></span><br><span class="line"><span class="comment">//        Stream.concat(s1,s2).forEach(s-&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求4：合并需求1和需求2得到的流，并把结果在控制台输出，要求字符串元素不能重复</span></span><br><span class="line">        Stream.concat(s1,s2).distinct().forEach(s-&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4Stream流终结操作方法【应用】"><a href="#2-4Stream流终结操作方法【应用】" class="headerlink" title="2.4Stream流终结操作方法【应用】"></a>2.4Stream流终结操作方法【应用】</h2></li><li><p>概念</p><p>终结操作的意思是,执行完此方法之后,Stream流将不能再执行其他操作</p></li><li><p>常见方法</p><p>| 方法名                           | 说明           |<br>| ——————————————- | —————— |<br>| void forEach(Consumer action) | 对此流的每个元素执行操作 |<br>| long count()                  | 返回此流中的元素数    |</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStream5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张翠山&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王二麻子&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张良&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;谢广坤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//method1(list);</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//        long count()：返回此流中的元素数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream().count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//  void forEach(Consumer action)：对此流的每个元素执行操作</span></span><br><span class="line">        <span class="comment">//  Consumer接口中的方法void accept(T t)：对给定的参数执行此操作</span></span><br><span class="line">        <span class="comment">//在forEach方法的底层,会循环获取到流中的每一个数据.</span></span><br><span class="line">        <span class="comment">//并循环调用accept方法,并把每一个数据传递给accept方法</span></span><br><span class="line">        <span class="comment">//s就依次表示了流中的每一个数据.</span></span><br><span class="line">        <span class="comment">//所以,我们只要在accept方法中,写上处理的业务逻辑就可以了.</span></span><br><span class="line">        list.stream().forEach(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                        System.out.println(s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">      </span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        <span class="comment">//lambda表达式的简化格式</span></span><br><span class="line">        <span class="comment">//是因为Consumer接口中,只有一个accept方法</span></span><br><span class="line">        list.stream().forEach(</span><br><span class="line">                (String s)-&gt;&#123;</span><br><span class="line">                    System.out.println(s);</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        <span class="comment">//lambda表达式还是可以进一步简化的.</span></span><br><span class="line">        list.stream().forEach(s-&gt;System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5Stream流的收集操作【应用】"><a href="#2-5Stream流的收集操作【应用】" class="headerlink" title="2.5Stream流的收集操作【应用】"></a>2.5Stream流的收集操作【应用】</h3><ul><li><p>概念</p><p>对数据使用Stream流的方式操作完毕后,可以把流中的数据收集到集合中</p></li><li><p>常用方法</p><p>| 方法名                            | 说明        |<br>| ——————————————— | ————- |<br>| R collect(Collector collector) | 把结果收集到集合中 |</p></li><li><p>工具类Collectors提供了具体的收集方式</p><p>| 方法名                                                       | 说明                   |<br>| —————————————————————————————— | ——————————— |<br>| public static <T> Collector toList()                         | 把元素收集到List集合中 |<br>| public static <T> Collector toSet()                          | 把元素收集到Set集合中  |<br>| public static  Collector toMap(Function keyMapper,Function valueMapper) | 把元素收集到Map集合中  |</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toList和toSet方法演示 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStream7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            list1.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        list1.add(<span class="number">10</span>);</span><br><span class="line">        list1.add(<span class="number">10</span>);</span><br><span class="line">        list1.add(<span class="number">10</span>);</span><br><span class="line">        list1.add(<span class="number">10</span>);</span><br><span class="line">        list1.add(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//filter负责过滤数据的.</span></span><br><span class="line">        <span class="comment">//collect负责收集数据.</span></span><br><span class="line">                <span class="comment">//获取流中剩余的数据,但是他不负责创建容器,也不负责把数据添加到容器中.</span></span><br><span class="line">        <span class="comment">//Collectors.toList() : 在底层会创建一个List集合.并把所有的数据添加到List集合中.</span></span><br><span class="line">        List&lt;Integer&gt; list = list1.stream().filter(number -&gt; number % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    Set&lt;Integer&gt; set = list1.stream().filter(number -&gt; number % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            .collect(Collectors.toSet());</span><br><span class="line">    System.out.println(set);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Stream流的收集方法 toMap方法演示</span></span><br><span class="line"><span class="comment">创建一个ArrayList集合，并添加以下字符串。字符串中前面是姓名，后面是年龄</span></span><br><span class="line"><span class="comment">&quot;zhangsan,23&quot;</span></span><br><span class="line"><span class="comment">&quot;lisi,24&quot;</span></span><br><span class="line"><span class="comment">&quot;wangwu,25&quot;</span></span><br><span class="line"><span class="comment">保留年龄大于等于24岁的人，并将结果收集到Map集合中，姓名为键，年龄为值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStream8</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;zhangsan,23&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;lisi,24&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;wangwu,25&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Integer&gt; map = list.stream().filter(</span><br><span class="line">                s -&gt; &#123;</span><br><span class="line">                    String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(split[<span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">return</span> age &gt;= <span class="number">24</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//   collect方法只能获取到流中剩余的每一个数据.</span></span><br><span class="line">         <span class="comment">//在底层不能创建容器,也不能把数据添加到容器当中</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">//Collectors.toMap 创建一个map集合并将数据添加到集合当中</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// s 依次表示流中的每一个数据</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">//第一个lambda表达式就是如何获取到Map中的键</span></span><br><span class="line">          <span class="comment">//第二个lambda表达式就是如何获取Map中的值</span></span><br><span class="line">        ).collect(Collectors.toMap(</span><br><span class="line">                s -&gt; s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>],</span><br><span class="line">                s -&gt; Integer.parseInt(s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]) ));</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-6Stream流综合练习【应用】"><a href="#2-6Stream流综合练习【应用】" class="headerlink" title="2.6Stream流综合练习【应用】"></a>2.6Stream流综合练习【应用】</h3><ul><li><p>案例需求</p><p>现在有两个ArrayList集合，分别存储6名男演员名称和6名女演员名称，要求完成如下的操作</p><ul><li>男演员只要名字为3个字的前三人</li><li>女演员只要姓林的，并且不要第一个</li><li>把过滤后的男演员姓名和女演员姓名合并到一起</li><li>把上一步操作后的元素作为构造方法的参数创建演员对象,遍历数据</li></ul><p>演员类Actor已经提供，里面有一个成员变量，一个带参构造方法，以及成员变量对应的get/set方法</p></li><li><p>代码实现</p><p>演员类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Actor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Actor</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; manList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        manList.add(<span class="string">&quot;周润发&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;成龙&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;吴京&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;周星驰&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;李连杰&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        ArrayList&lt;String&gt; womanList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        womanList.add(<span class="string">&quot;林心如&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;林志玲&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//男演员只要名字为3个字的前三人</span></span><br><span class="line">        Stream&lt;String&gt; manStream = manList.stream().filter(s -&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//女演员只要姓林的，并且不要第一个</span></span><br><span class="line">        Stream&lt;String&gt; womanStream = womanList.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;林&quot;</span>)).skip(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//把过滤后的男演员姓名和女演员姓名合并到一起</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.concat(manStream, womanStream);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 将流中的数据封装成Actor对象之后打印</span></span><br><span class="line">      stream.forEach(name -&gt; &#123;</span><br><span class="line">            <span class="type">Actor</span> <span class="variable">actor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Actor</span>(name);</span><br><span class="line">            System.out.println(actor);</span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-方法引用"><a href="#3-方法引用" class="headerlink" title="3.方法引用"></a>3.方法引用</h2><h3 id="3-1体验方法引用【理解】"><a href="#3-1体验方法引用【理解】" class="headerlink" title="3.1体验方法引用【理解】"></a>3.1体验方法引用【理解】</h3><ul><li><p>方法引用的出现原因</p><p>在使用Lambda表达式的时候，我们实际上传递进去的代码就是一种解决方案：拿参数做操作</p><p>那么考虑一种情况：如果我们在Lambda中所指定的操作方案，已经有地方存在相同方案，那是否还有必要再写重复逻辑呢？答案肯定是没有必要</p><p>那我们又是如何使用已经存在的方案的呢？</p><p>这就是我们要讲解的方法引用，我们是通过方法引用来使用已经存在的方案</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Printable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printString</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//在主方法中调用usePrintable方法</span></span><br><span class="line"><span class="comment">//        usePrintable((String s) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(s);</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">    <span class="comment">//Lambda简化写法</span></span><br><span class="line">        usePrintable(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        usePrintable(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">usePrintable</span><span class="params">(Printable p)</span> &#123;</span><br><span class="line">        p.printString(<span class="string">&quot;爱生活爱Java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2方法引用符【理解】"><a href="#3-2方法引用符【理解】" class="headerlink" title="3.2方法引用符【理解】"></a>3.2方法引用符【理解】</h3><ul><li><p>方法引用符</p><p>::  该符号为引用运算符，而它所在的表达式被称为方法引用</p></li><li><p>推导与省略</p><ul><li>如果使用Lambda，那么根据“可推导就是可省略”的原则，无需指定参数类型，也无需指定的重载形式，它们都将被自动推导</li><li>如果使用方法引用，也是同样可以根据上下文进行推导</li><li>方法引用是Lambda的孪生兄弟</li></ul></li></ul><h3 id="3-3引用类方法【应用】"><a href="#3-3引用类方法【应用】" class="headerlink" title="3.3引用类方法【应用】"></a>3.3引用类方法【应用】</h3><p>​    引用类方法，其实就是引用类的静态方法</p><ul><li><p>格式</p><p>类名::静态方法</p></li><li><p>范例</p><p>Integer::parseInt</p><p>Integer类的方法：public static int parseInt(String s) 将此String转换为int类型数据</p></li><li><p>练习描述</p><ul><li>定义一个接口(Converter)，里面定义一个抽象方法 int convert(String s);</li><li>定义一个测试类(ConverterDemo)，在测试类中提供两个方法<ul><li>一个方法是：useConverter(Converter c)</li><li>一个方法是主方法，在主方法中调用useConverter方法</li></ul></li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Converter</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">convert</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConverterDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda写法</span></span><br><span class="line">        useConverter(s -&gt; Integer.parseInt(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用类方法</span></span><br><span class="line">        useConverter(Integer::parseInt);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useConverter</span><span class="params">(Converter c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> c.convert(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">        System.out.println(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用说明</p><p>Lambda表达式被类方法替代的时候，它的形式参数全部传递给静态方法作为参数</p></li></ul><h3 id="3-4引用对象的实例方法【应用】"><a href="#3-4引用对象的实例方法【应用】" class="headerlink" title="3.4引用对象的实例方法【应用】"></a>3.4引用对象的实例方法【应用】</h3><p>​    引用对象的实例方法，其实就引用类中的成员方法</p><ul><li><p>格式</p><p>对象::成员方法</p></li><li><p>范例</p><p>“HelloWorld”::toUpperCase</p><p>  String类中的方法：public String toUpperCase() 将此String所有字符转换为大写</p></li><li><p>练习描述</p><ul><li><p>定义一个类(PrintString)，里面定义一个方法</p><p>public void printUpper(String s)：把字符串参数变成大写的数据，然后在控制台输出</p></li><li><p>定义一个接口(Printer)，里面定义一个抽象方法</p><p>void printUpperCase(String s)</p></li><li><p>定义一个测试类(PrinterDemo)，在测试类中提供两个方法</p><ul><li>一个方法是：usePrinter(Printer p)</li><li>一个方法是主方法，在主方法中调用usePrinter方法</li></ul></li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintString</span> &#123;</span><br><span class="line">    <span class="comment">//把字符串参数变成大写的数据，然后在控制台输出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printUpper</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> s.toUpperCase();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printUpperCase</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrinterDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda简化写法</span></span><br><span class="line">        usePrinter(s -&gt; System.out.println(s.toUpperCase()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用对象的实例方法</span></span><br><span class="line">        <span class="type">PrintString</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintString</span>();</span><br><span class="line">        usePrinter(ps::printUpper);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">usePrinter</span><span class="params">(Printer p)</span> &#123;</span><br><span class="line">        p.printUpperCase(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用说明</p><p>Lambda表达式被对象的实例方法替代的时候，它的形式参数全部传递给该方法作为参数</p></li></ul><h3 id="3-5引用类的实例方法【应用】"><a href="#3-5引用类的实例方法【应用】" class="headerlink" title="3.5引用类的实例方法【应用】"></a>3.5引用类的实例方法【应用】</h3><p>​    引用类的实例方法，其实就是引用类中的成员方法</p><ul><li><p>格式</p><p>类名::成员方法</p></li><li><p>范例</p><p>String::substring</p><p>public String substring(int beginIndex,int endIndex) </p><p>从beginIndex开始到endIndex结束，截取字符串。返回一个子串，子串的长度为endIndex-beginIndex</p></li><li><p>练习描述</p><ul><li><p>定义一个接口(MyString)，里面定义一个抽象方法：</p><p>String mySubString(String s,int x,int y);</p></li><li><p>定义一个测试类(MyStringDemo)，在测试类中提供两个方法</p><ul><li>一个方法是：useMyString(MyString my)</li><li>一个方法是主方法，在主方法中调用useMyString方法</li></ul></li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyString</span> &#123;</span><br><span class="line">    String <span class="title function_">mySubString</span><span class="params">(String s,<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStringDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//Lambda简化写法</span></span><br><span class="line">        useMyString((s,x,y) -&gt; s.substring(x,y));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用类的实例方法</span></span><br><span class="line">        useMyString(String::substring);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useMyString</span><span class="params">(MyString my)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> my.mySubString(<span class="string">&quot;HelloWorld&quot;</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用说明</p><p>​    Lambda表达式被类的实例方法替代的时候<br>​    第一个参数作为调用者<br>​    后面的参数全部传递给该方法作为参数</p></li></ul><h3 id="3-6引用构造器【应用】"><a href="#3-6引用构造器【应用】" class="headerlink" title="3.6引用构造器【应用】"></a>3.6引用构造器【应用】</h3><p>​    引用构造器，其实就是引用构造方法</p><ul><li><p>l格式</p><p>类名::new</p></li><li><p>范例</p><p>Student::new</p></li><li><p>练习描述</p><ul><li><p>定义一个类(Student)，里面有两个成员变量(name,age)</p><p>并提供无参构造方法和带参构造方法，以及成员变量对应的get和set方法</p></li><li><p>定义一个接口(StudentBuilder)，里面定义一个抽象方法</p><p>Student build(String name,int age);</p></li><li><p>定义一个测试类(StudentDemo)，在测试类中提供两个方法</p><ul><li>一个方法是：useStudentBuilder(StudentBuilder s)</li><li>一个方法是主方法，在主方法中调用useStudentBuilder方法</li></ul></li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentBuilder</span> &#123;</span><br><span class="line">    Student <span class="title function_">build</span><span class="params">(String name,<span class="type">int</span> age)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda简化写法</span></span><br><span class="line">        useStudentBuilder((name,age) -&gt; <span class="keyword">new</span> <span class="title class_">Student</span>(name,age));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用构造器</span></span><br><span class="line">        useStudentBuilder(Student::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useStudentBuilder</span><span class="params">(StudentBuilder sb)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> sb.build(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用说明</p><p>Lambda表达式被构造器替代的时候，它的形式参数全部传递给构造器作为参数</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;不可变集合&quot;&gt;&lt;a href=&quot;#不可变集合&quot; class=&quot;headerlink&quot; title=&quot;不可变集合&quot;&gt;&lt;/a&gt;不可变集合&lt;/h1&gt;&lt;h2 id=&quot;1-不可变集合&quot;&gt;&lt;a href=&quot;#1-不可变集合&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Stream流" scheme="https://wjlgmw-github-io.vercel.app/tags/Stream%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>bug集合</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/5c9976fc.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/5c9976fc.html</id>
    <published>2024-04-25T00:39:50.000Z</published>
    <updated>2024-05-08T01:31:03.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分页查询相关bug"><a href="#分页查询相关bug" class="headerlink" title="分页查询相关bug"></a>分页查询相关bug</h1><p>1.错误：nested exception is org.apache.ibatis.binding.BindingException: Parameter ‘XXX’ not found<br>当我们使用mybatis传入多个参数时候，mybatis映射不到相应的实体<br>解决方式：处理方式是在对应的 mapper 文件中传入的参数前分别加上注解@Param<br>并在sql语句中将参数写进去<br>例如：当参数是被封装成一个对象的时候<br><img src="https://img.picgo.net/2024/04/25/3460052_D0WUDDX810QN12f0208c7f33434d6.png"><br>sql语句中<br><img src="https://img.picgo.net/2024/04/25/QQ202404250859078cbdf9090b3a807c.png"></p><p>2.错误：ERROR: operator does not exist: text == text<br>这个错误信息通常出现在使用SQL查询时，尝试比较两个文本类型（text）的字段。在SQL中，如果你直接使用等于操作符（==）来比较两个文本类型的值，会出现这样的错误<br>解决方式：1.使用=或!=操作符，这是标准的SQL操作符来比较文本字段<br>2.如果你使用的是PostgreSQL，并且需要进行更复杂的比较（例如大小写不敏感比较），可以使用ILIKE，LIKE操作符，或者~（正则表达式匹配）。<br>如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM your_table</span><br><span class="line"><span class="type">WHERE</span> <span class="variable">field1</span> <span class="operator">=</span> field2;</span><br></pre></td></tr></table></figure></p><p>3.错误：java.lang.NoSuchMethodException: com.baomidou.mybatisplus.core.metadata.IPag<br>解决方式：<br><img src="https://img.picgo.net/2024/04/25/I4002X5_KO8SO_SDHG17dedaa7628da480.png"><br>注意resultType，如果是IPage那么会出错</p><p><img src="https://img.picgo.net/2024/04/25/QQ2024042509142819667f4a5ad91eea.png"><br>生成的方法类型要注意</p><p>4.错误：分页参数没有传进去，可能是mybatisplus分页插件没注入<br>解决方法<br><img src="https://img.picgo.net/2024/04/25/_ZCASJKO1WSVAM6Wae8fd832aceccd9b.png"></p><h1 id="Bean注入异常"><a href="#Bean注入异常" class="headerlink" title="Bean注入异常"></a>Bean注入异常</h1><p>报错：Consider defining a bean of type ‘com.bn.airportsimulation.services.RuleRunwayIntervalConfigService’ in your configuration.</p><p>解决方法检查自己的Bean是否注入，查service，mapper</p><h1 id="GetMapping与-RequestBody"><a href="#GetMapping与-RequestBody" class="headerlink" title="@GetMapping与@RequestBody"></a>@GetMapping与@RequestBody</h1><p>@GetMapping与@RequestBody不能一起使用，不然会导致前端传入数据有误</p><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>hexo : 无法将“hexo”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。<br>在powershell中输入npm install -g hexo-cli # -g为全局安装 再装一遍（可能是因为换了node.js的版本，需要重新安装一下）</p><h1 id="SpringBootTest"><a href="#SpringBootTest" class="headerlink" title="SpringBootTest"></a>SpringBootTest</h1><p><img src="https://img.picgo.net/2024/05/07/F4_GIQSN97J_C4GKDO3Z9G3877016af2e4c251.png"><br>依赖没有注入，是因为springboot没有启动（因为springboot要与Test的下面的测试类要对应（老版本））[@Test引入的类错误]<br>可以采用@RunWith<br><img src="https://img.picgo.net/2024/05/07/CJRVRADSS6POVI8BY70Dc9e68e21849097dc.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分页查询相关bug&quot;&gt;&lt;a href=&quot;#分页查询相关bug&quot; class=&quot;headerlink&quot; title=&quot;分页查询相关bug&quot;&gt;&lt;/a&gt;分页查询相关bug&lt;/h1&gt;&lt;p&gt;1.错误：nested exception is org.apache.ibatis</summary>
      
    
    
    
    <category term="bug集合" scheme="https://wjlgmw-github-io.vercel.app/categories/bug%E9%9B%86%E5%90%88/"/>
    
    
    <category term="bug" scheme="https://wjlgmw-github-io.vercel.app/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Apache POI</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/c5546f1a.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/c5546f1a.html</id>
    <published>2024-04-24T01:06:06.000Z</published>
    <updated>2024-05-08T01:31:03.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Apache POI 是一个处理Miscrosoft Office各种文件格式的开源项目。简单来说就是，我们可以使用 POI 在 Java 程序中对Miscrosoft Office各种文件进行读写操作。<br>一般情况下，POI 都是用于操作 Excel 文件。</p><p><img src="https://img.picgo.net/2024/04/24/Z7V4QYMOYPWL_RHJ7Db0a4ae8b6ccb1787.png"></p><p>Apache POI 的应用场景：</p><ul><li>银行网银系统导出交易明细</li><li>各种业务系统导出Excel报表</li><li>批量导入业务数据</li></ul><p><img src="https://img.picgo.net/2024/04/24/LSAIOGBZTEM_LSUG0ae2634594f45df1b.png"></p><h1 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h1><p>Apache POI的maven坐标<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用POI操作Excel文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POITest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过POI创建Excel文件并且写入文件内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title function_">write</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//在内存中创建一个Excel文件</span></span><br><span class="line">        <span class="type">XSSFWorkbook</span> <span class="variable">excel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">        <span class="comment">//在Excel文件中创建一个Sheet页</span></span><br><span class="line">        <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> excel.createSheet(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        <span class="comment">//在Sheet页中创建行对象,rownum编号从0开始</span></span><br><span class="line">        <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//创建单元格并且写入文件内容</span></span><br><span class="line">        row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">        row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;城市&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个新行</span></span><br><span class="line">        row=sheet.createRow(<span class="number">2</span>);</span><br><span class="line">        row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">        row=sheet.createRow(<span class="number">3</span>);</span><br><span class="line">        row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;南京&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过输出流讲内存中的Excel文件写入到磁盘</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\cangqiong\\info.xlsx&quot;</span>));</span><br><span class="line">        excel.write(out);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        out.close();</span><br><span class="line">        excel.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过POI读取Excel文件的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\cangqiong\\info.xlsx&quot;</span>));</span><br><span class="line">        <span class="comment">//读取磁盘上已经存在的Excel文件</span></span><br><span class="line">        <span class="type">XSSFWorkbook</span> <span class="variable">excel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(in);</span><br><span class="line">        <span class="comment">//读取Excel文件中的第一个Sheet页</span></span><br><span class="line">        <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> excel.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//获取Sheet中最后一行的行号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lastRowNum</span> <span class="operator">=</span> sheet.getLastRowNum();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=lastRowNum;i++)&#123;</span><br><span class="line">            <span class="comment">//获得某一行</span></span><br><span class="line">            <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(i);</span><br><span class="line">            <span class="comment">//获得单元格对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">cellValue1</span> <span class="operator">=</span> row.getCell(<span class="number">1</span>).getStringCellValue();</span><br><span class="line">            <span class="type">String</span> <span class="variable">cellValue2</span> <span class="operator">=</span> row.getCell(<span class="number">2</span>).getStringCellValue();</span><br><span class="line">            System.out.println(cellValue1+<span class="string">&quot; &quot;</span>+cellValue2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        in.close();</span><br><span class="line">        excel.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//write();</span></span><br><span class="line">        read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Apache POI 是一个处理Miscrosoft Office各种文件格式的开源项目。简单来说就是，我们可以使用 POI 在 Java </summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Apache POI" scheme="https://wjlgmw-github-io.vercel.app/tags/Apache-POI/"/>
    
  </entry>
  
  <entry>
    <title>苍穹外卖(十二)</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/66abedc.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/66abedc.html</id>
    <published>2024-04-23T19:04:06.000Z</published>
    <updated>2024-05-08T01:31:03.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p><img src="https://img.picgo.net/2024/04/23/VGAEYSM5E7ILR8DUIVaaee0744e95f6657.png"></p><p><img src="https://img.picgo.net/2024/04/23/5J4NB9K4_0DIJIHXNHW98dd9a6a51423092.png"></p><h1 id="工作台"><a href="#工作台" class="headerlink" title="工作台"></a>工作台</h1><h2 id="需求分析和设计"><a href="#需求分析和设计" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><p>工作台是系统运营的数据看板，并提供快捷操作入口，可以有效提高商家的工作效率。<br>工作台展示的数据：</p><ul><li>今日数据</li><li>订单管理</li><li>菜品总览</li><li>套餐总览</li><li>订单信息</li></ul><p>名词解释：</p><ul><li>营业额：已完成订单的总金额</li><li>有效订单：已完成订单的数量</li><li>订单完成率：有效订单数 / 总订单数 * 100%</li><li>平均客单价：营业额 / 有效订单数</li><li>新增用户：新增用户的数量</li></ul><p><img src="https://img.picgo.net/2024/04/23/2_3BWBO1DDMBJ0FZQ_QZE339fca355af54694.png"></p><p>接口设计：</p><ul><li>今日数据接口</li><li>订单管理接口</li><li>菜品总览接口</li><li>套餐总览接口</li><li>订单搜索（已完成）</li><li>各个状态的订单数量统计（已完成</li></ul><p><img src="https://img.picgo.net/2024/04/23/K9UDEZ5AQM9LDMX375bca2173fc6a8ab.png"></p><p><img src="https://img.picgo.net/2024/04/23/1DLP4OA48D8N46P4711c451bbd3e92c.png"></p><p><img src="https://img.picgo.net/2024/04/23/ZNHHDXNP7ad1c4c612f52b355.png"></p><p><img src="https://img.picgo.net/2024/04/23/JZ4HKFD8CK3XA6L22Aec501876da05f304.png"></p><h2 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h2><h1 id="导出运营数据Excel报表"><a href="#导出运营数据Excel报表" class="headerlink" title="导出运营数据Excel报表"></a>导出运营数据Excel报表</h1><h2 id="需求分析和设计-1"><a href="#需求分析和设计-1" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><p><img src="https://img.picgo.net/2024/04/24/OJ_GIT_X02H09MGQI7OKaa4fb6f4a4ec25ee.png"></p><p><img src="https://img.picgo.net/2024/04/24/7GB3HJW2Y92O20Od1eab06e1335f026.png"></p><p><img src="https://img.picgo.net/2024/04/24/MYLJM_7RK857TVAG1b975ab10b3394ed9.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;模型&quot;&gt;&lt;a href=&quot;#模型&quot; class=&quot;headerlink&quot; title=&quot;模型&quot;&gt;&lt;/a&gt;模型&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img.picgo.net/2024/04/23/VGAEYSM5E7ILR8DUIVaaee0744e</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="苍穹外卖" scheme="https://wjlgmw-github-io.vercel.app/tags/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
    
  </entry>
  
  <entry>
    <title>Apache Echarts</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/872b8a29.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/872b8a29.html</id>
    <published>2024-04-22T13:41:22.000Z</published>
    <updated>2024-05-08T01:31:03.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><img src="https://img.picgo.net/2024/04/22/68QX561VSOSYWM80P30T32d3ea302f357cca41.png"></p><p>Apache ECharts 是一款基于 Javascript 的数据可视化图表库，提供直观，生动，可交互，可个性化定制的数据可视化图表。<br>官网地址：<a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a></p><p><img src="https://img.picgo.net/2024/04/22/I1HQJ9B835FJMUQO_Fbc4236b2505acbe6.png"></p><p><img src="https://img.picgo.net/2024/04/22/HJSF68_4YG0UFN5I779eef15a2cf153e8.png"></p><h1 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h1><p>Apache Echarts官方提供的快速入门：<a href="https://echarts.apache.org/handbook/zh/get-started/">https://echarts.apache.org/handbook/zh/get-started/</a></p><p><img src="https://img.picgo.net/2024/04/22/3N92MYAH8NMYR5IVOBMB584a06dd0e3309d5d.png"></p><p>参考官方的入门案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定图表的配置项和数据</span></span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">tooltip</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">legend</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;销量&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="line">myChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>总结：使用Echarts，重点在于研究当前图表所需的数据格式。通常是需要后端提供符合格式要求的动态数据，然后响应给前端来展示图表。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img.picgo.net/2024/04/22/68QX561VSOSYWM80P30T32d3ea3</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Apache Echarts" scheme="https://wjlgmw-github-io.vercel.app/tags/Apache-Echarts/"/>
    
  </entry>
  
  <entry>
    <title>苍穹外卖(十一)</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/a95b25be.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/a95b25be.html</id>
    <published>2024-04-22T13:35:50.000Z</published>
    <updated>2024-05-08T01:31:03.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apache-Echarts"><a href="#Apache-Echarts" class="headerlink" title="Apache Echarts"></a>Apache Echarts</h1><p>详细见Apache Echarts文章</p><h1 id="营业额统计"><a href="#营业额统计" class="headerlink" title="营业额统计"></a>营业额统计</h1><h2 id="需求分析和设计"><a href="#需求分析和设计" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><p>产品原型<br><img src="https://img.picgo.net/2024/04/22/1JUBI3X7PXFBIMQ03a51b02707074d8.png"></p><p>业务规则：</p><ul><li>营业额指订单状态为已完成的订单金额合计</li><li>基于可视化报表的折线图展示营业额数据，X轴为日期，Y轴为营业额</li><li>根据时间选择区间，展示每天的营业额数据</li></ul><p>接口设计</p><p><img src="https://img.picgo.net/2024/04/22/MYUN3_ML8H32XPMBM5a452ec12d6f65ad5.png"></p><h2 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h2><p><img src="https://img.picgo.net/2024/04/22/2LHMTZP78M__OR98fb52f11df735bb.png"></p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 营业额统计</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> begin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/turnoverStatistics&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;营业额统计&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;TurnoverReportVO&gt; <span class="title function_">turnoverStatistics</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span></span><br><span class="line"><span class="params">        <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;营业额统计：&#123;&#125;，&#123;&#125;&quot;</span>,begin,end);</span><br><span class="line">    <span class="keyword">return</span> Result.success( reportService.getTurnoverStatistics(begin,end));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 营业额统计</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> begin</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> TurnoverReportVO <span class="title function_">getTurnoverStatistics</span><span class="params">(LocalDate begin, LocalDate end)</span> &#123;</span><br><span class="line">       <span class="comment">//当前集合用于存放从begin到end范围内的每天的日期</span></span><br><span class="line">       List&lt;LocalDate&gt; dateList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       dateList.add(begin);</span><br><span class="line">       <span class="keyword">while</span> (!begin.equals(end)) &#123;</span><br><span class="line">           <span class="comment">//日期计算，计算指定日期的后一天对应的日期</span></span><br><span class="line">           begin = begin.plusDays(<span class="number">1</span>);</span><br><span class="line">           dateList.add(begin);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//存放每天的营业额</span></span><br><span class="line">       List&lt;Double&gt; turnoverList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (LocalDate date : dateList) &#123;</span><br><span class="line">           <span class="comment">//查询date日期对应的营业额数据，营业额是指：状态为已完成的订单合计</span></span><br><span class="line">           <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> LocalDateTime.of(date, LocalTime.MIN);</span><br><span class="line">           <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> LocalDateTime.of(date, LocalTime.MAX);</span><br><span class="line">           <span class="comment">// select sum(amount) from orders where order_time&gt;beginTime and order_time&lt;endTime and status=5</span></span><br><span class="line">           <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">           map.put(<span class="string">&quot;begin&quot;</span>, beginTime);</span><br><span class="line">           map.put(<span class="string">&quot;end&quot;</span>, endTime);</span><br><span class="line">           map.put(<span class="string">&quot;status&quot;</span>, Orders.COMPLETED);</span><br><span class="line">           <span class="type">Double</span> <span class="variable">turnover</span> <span class="operator">=</span> orderMapper.sumByMap(map);</span><br><span class="line">           turnover = turnover == <span class="literal">null</span> ? <span class="number">0.0</span> : turnover;</span><br><span class="line">           turnoverList.add(turnover);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//封装返回结果</span></span><br><span class="line">       <span class="keyword">return</span> TurnoverReportVO</span><br><span class="line">               .builder()</span><br><span class="line">               .dateList(StringUtils.join(dateList, <span class="string">&quot;,&quot;</span>))</span><br><span class="line">               .turnoverList(StringUtils.join(turnoverList, <span class="string">&quot;,&quot;</span>))</span><br><span class="line">               .build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>dao.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;sumByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Double&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line">        select sum(amount) from orders</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin!=null&quot;</span>&gt;</span></span><br><span class="line">                and order_time <span class="symbol">&amp;gt;</span> #&#123;begin&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;end!=null&quot;</span>&gt;</span></span><br><span class="line">                and order_time <span class="symbol">&amp;lt;</span> #&#123;end&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status!=null&quot;</span>&gt;</span></span><br><span class="line">                and status=#&#123;status&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="用户统计"><a href="#用户统计" class="headerlink" title="用户统计"></a>用户统计</h1><h2 id="需求分析和设计-1"><a href="#需求分析和设计-1" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><p>产品原型：<br><img src="https://img.picgo.net/2024/04/23/YUROPHXWCLA2F9B_E3ca287ac61076f20.png"></p><p>业务规则：</p><ul><li>基于可视化报表的折线图展示用户数据，X轴为日期，Y轴为用户数</li><li>根据时间选择区间，展示每天的用户总量和新增用户量数据</li></ul><p><img src="https://img.picgo.net/2024/04/23/XB_TEM89GDKXIGOQQ413d38d02788e74b8.png"></p><h2 id="代码开发-1"><a href="#代码开发-1" class="headerlink" title="代码开发"></a>代码开发</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户统计</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> begin</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/userStatistics&quot;)</span></span><br><span class="line">  <span class="meta">@ApiOperation(&quot;用户统计&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Result&lt;UserReportVO&gt; <span class="title function_">userStatistics</span><span class="params">(</span></span><br><span class="line"><span class="params">          <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span></span><br><span class="line"><span class="params">          <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end</span></span><br><span class="line"><span class="params">  )</span>&#123;</span><br><span class="line">      log.info(<span class="string">&quot;用户数据统计：&#123;&#125;，&#123;&#125;&quot;</span>,begin,end);</span><br><span class="line">      <span class="keyword">return</span> Result.success(reportService.getUserStatistics(begin,end));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>实现service类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计指定时间内的用户数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> begin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserReportVO <span class="title function_">getUserStatistics</span><span class="params">(LocalDate begin, LocalDate end)</span> &#123;</span><br><span class="line">    <span class="comment">//存放从begin到end之间的日期</span></span><br><span class="line">    List&lt;LocalDate&gt; dateList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    dateList.add(begin);</span><br><span class="line">    <span class="keyword">while</span> (!begin.equals(end))&#123;</span><br><span class="line">        begin=begin.plusDays(<span class="number">1</span>);</span><br><span class="line">        dateList.add(begin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放每天的新增用户数量 select count(id) from user where create_time&lt;? and create_time&gt;?</span></span><br><span class="line">    List&lt;Integer&gt; newUserList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//存放每天的总用户数量 select count(id) from user where create_time&lt;?</span></span><br><span class="line">    List&lt;Integer&gt; totalUserList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (LocalDate date : dateList) &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> LocalDateTime.of(date, LocalTime.MIN);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> LocalDateTime.of(date, LocalTime.MAX);</span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;end&quot;</span>, endTime);</span><br><span class="line">        <span class="comment">//总用户数量</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">totalUser</span> <span class="operator">=</span> userMapper.countByMap(map);</span><br><span class="line">        map.put(<span class="string">&quot;begin&quot;</span>, beginTime);</span><br><span class="line">        <span class="comment">//新增用户数量</span></span><br><span class="line">        Integer newUser=userMapper.countByMap(map);</span><br><span class="line"></span><br><span class="line">        newUserList.add(newUser);</span><br><span class="line">        totalUserList.add(totalUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> UserReportVO</span><br><span class="line">            .builder()</span><br><span class="line">            .dateList(StringUtils.join(dateList))</span><br><span class="line">            .totalUserList(StringUtils.join(totalUserList))</span><br><span class="line">            .newUserList(StringUtils.join(newUserList))</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>dao.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;countByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line">        select count(id) from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin!=null&quot;</span>&gt;</span></span><br><span class="line">            and create_time <span class="symbol">&amp;gt;</span> #&#123;begin&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;end!=null&quot;</span>&gt;</span></span><br><span class="line">            and create_time <span class="symbol">&amp;gt;</span> #&#123;end&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="订单统计"><a href="#订单统计" class="headerlink" title="订单统计"></a>订单统计</h1><h2 id="需求分析和设计-2"><a href="#需求分析和设计-2" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><p>产品原型</p><p><img src="https://img.picgo.net/2024/04/23/LG3MEEFIAHNQGTXPP3IF98a0ca3fa8f6230a.png"></p><p>业务规则：</p><ul><li>有效订单指状态为 “已完成” 的订单</li><li>基于可视化报表的折线图展示订单数据，X轴为日期，Y轴为订单数量</li><li>根据时间选择区间，展示每天的订单总数和有效订单数</li><li>展示所选时间区间内的有效订单数、总订单数、订单完成率，订单完成率 = 有效订单数 / 总订单数 * 100%</li></ul><h2 id="代码开发-2"><a href="#代码开发-2" class="headerlink" title="代码开发"></a>代码开发</h2><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="销量排名Top10"><a href="#销量排名Top10" class="headerlink" title="销量排名Top10"></a>销量排名Top10</h1><h2 id="需求分析和设计-3"><a href="#需求分析和设计-3" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><p>产品原型</p><p><img src="https://img.picgo.net/2024/04/23/XNN_6YV81VNYPXU4Rbf60a98e0eba80bd.png"></p><p>业务规则：</p><ul><li>根据时间选择区间，展示销量前10的商品（包括菜品和套餐）</li><li>基于可视化报表的柱状图降序展示商品销量</li><li>此处的销量为商品销售的份数</li></ul><p><img src="https://img.picgo.net/2024/04/23/46F1_GA_YIDREVPW417bd9e221443c84.png"></p><h2 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h2><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 销量排名top10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> begin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/top10&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;销量排名top10&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;SalesTop10ReportVO&gt; <span class="title function_">top10</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span></span><br><span class="line"><span class="params">        <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end</span></span><br><span class="line"><span class="params">)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;销量排名数据统计：&#123;&#125;，&#123;&#125;&quot;</span>,begin,end);</span><br><span class="line">    <span class="keyword">return</span> Result.success(reportService.getSalesTop10(begin,end));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计指定时间内的销量排名前10</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> begin</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SalesTop10ReportVO <span class="title function_">getSalesTop10</span><span class="params">(LocalDate begin, LocalDate end)</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> LocalDateTime.of(begin, LocalTime.MIN);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> LocalDateTime.of(end, LocalTime.MAX);</span><br><span class="line"></span><br><span class="line">        List&lt;GoodsSalesDTO&gt; saleTop10 = orderMapper.getSaleTop10(beginTime, endTime);</span><br><span class="line">        List&lt;String&gt; names = saleTop10.stream().map(GoodsSalesDTO::getName).collect(Collectors.toList());</span><br><span class="line">        <span class="type">String</span> <span class="variable">nameList</span> <span class="operator">=</span> StringUtils.join(names, <span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; numbers = saleTop10.stream().map(GoodsSalesDTO::getNumber).collect(Collectors.toList());</span><br><span class="line">        <span class="type">String</span> <span class="variable">numberList</span> <span class="operator">=</span> StringUtils.join(numbers, <span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装返回结果数据</span></span><br><span class="line">        <span class="keyword">return</span> SalesTop10ReportVO</span><br><span class="line">                .builder()</span><br><span class="line">                .nameList(nameList)</span><br><span class="line">                .numberList(numberList)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>dao.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getSaleTop10&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.dto.GoodsSalesDTO&quot;</span>&gt;</span></span><br><span class="line">      select od.name name,sum(od.number) number</span><br><span class="line">      from order_detail od ,orders o</span><br><span class="line">      where od.order_id = o.id and o.status = 5</span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null&quot;</span>&gt;</span></span><br><span class="line">          and order_time <span class="symbol">&amp;gt;</span>= #&#123;begin&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;end != null&quot;</span>&gt;</span></span><br><span class="line">          and order_time <span class="symbol">&amp;lt;</span>= #&#123;end&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      group by name order by number desc limit 0, 10</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Apache-Echarts&quot;&gt;&lt;a href=&quot;#Apache-Echarts&quot; class=&quot;headerlink&quot; title=&quot;Apache Echarts&quot;&gt;&lt;/a&gt;Apache Echarts&lt;/h1&gt;&lt;p&gt;详细见Apache Echarts文章&lt;/p</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="苍穹外卖" scheme="https://wjlgmw-github-io.vercel.app/tags/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
    
  </entry>
  
  <entry>
    <title>坦克移动</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/49306d37.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/49306d37.html</id>
    <published>2024-04-21T20:51:04.000Z</published>
    <updated>2024-05-08T01:31:03.033Z</updated>
    
    <content type="html"><![CDATA[<html>    <head>        <meta charset="utf-8" />        <title>让坦克开起来</title>        <style type="text/css">            input{font-size:26px;margin-top: 20px;}            body{background-image: url(images/grassland.png);}            #mytank{position: absolute;left:10px;top:100px}        </style>    </head><body onkeydown="moveTank(event)"><img id="mytank" src="../img/siteicon/right.png"/><script>    //219970531 汪建龙    let currentDirection = 'right'; // 初始方向为右侧    function moveTank(event) {        const tank = document.getElementById('mytank');        const tankWidth = tank.offsetWidth;        const tankHeight = tank.offsetHeight;        const screenWidth = window.innerWidth;        const screenHeight = window.innerHeight;        // 禁用鼠标右键        document.oncontextmenu = function() {            return false;        };        const key = event.key.toLowerCase();        let left = parseInt(tank.style.left) || 0;        let top = parseInt(tank.style.top) || 0;        switch (key) {            case 'w': // 上            case 'arrowup':                top = Math.max(top - 10, 0);                currentDirection = 'up';                break;            case 's': // 下            case 'arrowdown':                top = Math.min(top + 10, screenHeight - tankHeight);                currentDirection = 'down';                break;            case 'a': // 左            case 'arrowleft':                left = Math.max(left - 10, 0);                currentDirection = 'left';                break;            case 'd': // 右            case 'arrowright':                left = Math.min(left + 10, screenWidth - tankWidth);                currentDirection = 'right';                break;        }        // 更新坦克位置        tank.style.left = left + 'px';        tank.style.top = top + 'px';        // 更新坦克方向        tank.src = `../img/siteicon/${currentDirection}.png`;    }</script></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;让坦克开起来&lt;/title&gt;
        &lt;style type=&quot;text/css&quot;&gt;
            input{font-size</summary>
      
    
    
    
    <category term="前端js" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%89%8D%E7%AB%AFjs/"/>
    
    
    <category term="前端" scheme="https://wjlgmw-github-io.vercel.app/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>苍穹外卖(九)</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/7727bd2.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/7727bd2.html</id>
    <published>2024-04-21T17:17:14.000Z</published>
    <updated>2024-05-08T01:31:03.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户端历史订单模块"><a href="#用户端历史订单模块" class="headerlink" title="用户端历史订单模块"></a>用户端历史订单模块</h1><h2 id="查询历史订单"><a href="#查询历史订单" class="headerlink" title="查询历史订单"></a>查询历史订单</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="https://img.picgo.net/2024/04/21/CK0YZOTMTCBPIQLON7C8f81a0805feb6e7a.png" ><br>返回数据是Oders+orderDetailList</p><h3 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h3><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 历史订单查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/historyOrders&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;历史订单查询&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">historyOrdersPage</span><span class="params">(<span class="meta">@RequestParam(&quot;page&quot;)</span> <span class="type">int</span> page, <span class="meta">@RequestParam(&quot;pageSize&quot;)</span> <span class="type">int</span> pageSize,Integer status)</span>&#123;</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> orderService.historyOrdersPage(page,pageSize,status);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 历史订单查询</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> PageResult <span class="title function_">historyOrdersPage</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, Integer status)</span> &#123;</span><br><span class="line">       <span class="comment">//先进行分页查询</span></span><br><span class="line">       PageHelper.startPage(page,pageSize);</span><br><span class="line"></span><br><span class="line">       <span class="type">OrdersPageQueryDTO</span> <span class="variable">ordersPageQueryDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrdersPageQueryDTO</span>();</span><br><span class="line">       ordersPageQueryDTO.setUserId(BaseContext.getCurrentId());</span><br><span class="line">       ordersPageQueryDTO.setStatus(status);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 分页条件查询</span></span><br><span class="line">       Page&lt;Orders&gt; p = orderMapper.pageQuery(ordersPageQueryDTO);</span><br><span class="line"></span><br><span class="line">       List&lt;OrderVO&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 查询出订单明细，并封装入OrderVO进行响应</span></span><br><span class="line">       <span class="keyword">if</span> (p != <span class="literal">null</span> &amp;&amp; p.getTotal() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Orders orders : p) &#123;</span><br><span class="line">               <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> orders.getId();<span class="comment">// 订单id</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">// 查询订单明细</span></span><br><span class="line">               List&lt;OrderDetail&gt; orderDetails = orderDetailMapper.getByOrderId(orderId);</span><br><span class="line"></span><br><span class="line">               <span class="type">OrderVO</span> <span class="variable">orderVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderVO</span>();</span><br><span class="line">               BeanUtils.copyProperties(orders, orderVO);</span><br><span class="line">               orderVO.setOrderDetailList(orderDetails);</span><br><span class="line"></span><br><span class="line">               list.add(orderVO);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(p.getTotal(), list);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>dao<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页条件查询并按下单时间排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ordersPageQueryDTO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Page&lt;Orders&gt; <span class="title function_">pageQuery</span><span class="params">(OrdersPageQueryDTO ordersPageQueryDTO)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据订单id查询订单明细</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from order_detail where order_id = #&#123;orderId&#125;&quot;)</span></span><br><span class="line">List&lt;OrderDetail&gt; <span class="title function_">getByOrderId</span><span class="params">(Long orderId)</span>;</span><br></pre></td></tr></table></figure></p><p>dao.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;pageQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.entity.Orders&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.sky.dto.OrdersPageQueryDTO&quot;</span>&gt;</span></span><br><span class="line">        select * from orders</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;number != null and number!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and number like concat(&#x27;%&#x27;,#&#123;number&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null and phone!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and phone like concat(&#x27;%&#x27;,#&#123;phone&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userId != null&quot;</span>&gt;</span></span><br><span class="line">                and user_id = #&#123;userId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">                and status = #&#123;status&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;beginTime != null&quot;</span>&gt;</span></span><br><span class="line">                and order_time <span class="symbol">&amp;gt;</span>= #&#123;beginTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;endTime != null&quot;</span>&gt;</span></span><br><span class="line">                and order_time <span class="symbol">&amp;lt;</span>= #&#123;endTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by order_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="查询订单详情"><a href="#查询订单详情" class="headerlink" title="查询订单详情"></a>查询订单详情</h2><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="https://img.picgo.net/2024/04/21/LYXT6S29LE7CJ0MQCRSXE9fe6f6687313ffb9.png"><br>返回数据是Oders+orderDetailList</p><h3 id="接口开发-1"><a href="#接口开发-1" class="headerlink" title="接口开发"></a>接口开发</h3><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询订单详情</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/orderDetail/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;查询订单详情&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">orderDetail</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">   <span class="type">OrderVO</span> <span class="variable">orderVO</span> <span class="operator">=</span> orderService.getOrderDetailById(id);</span><br><span class="line">   <span class="keyword">return</span> Result.success(orderVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询订单详情</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> OrderVO <span class="title function_">getOrderDetailById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="type">OrderVO</span> <span class="variable">orderVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderVO</span>();</span><br><span class="line">       <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> orderMapper.getById(id);</span><br><span class="line">       List&lt;OrderDetail&gt; orderDetailList = orderDetailMapper.getByOrderId(id);</span><br><span class="line">       BeanUtils.copyProperties(orders,orderVO);</span><br><span class="line">       orderVO.setOrderDetailList(orderDetailList);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> orderVO;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="取消订单"><a href="#取消订单" class="headerlink" title="取消订单"></a>取消订单</h2><h3 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="https://img.picgo.net/2024/04/21/EVRRXFYIH7SY608_Q8f9f0083b465c9c1.png"></p><h3 id="接口开发-2"><a href="#接口开发-2" class="headerlink" title="接口开发"></a>接口开发</h3><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 取消订单</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PutMapping(&quot;/cancel/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;取消订单&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">cancel</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">       orderService.cancel(id);</span><br><span class="line">       <span class="keyword">return</span> Result.success();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取消订单</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">      orderMapper.cancel(id);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>dao层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;update orders set status=6 where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure></p><h2 id="再来一单"><a href="#再来一单" class="headerlink" title="再来一单"></a>再来一单</h2><h3 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="https://img.picgo.net/2024/04/21/BASQT3YXPJCRBBERZH16a190f2e1911d52.png"></p><h3 id="接口开发-3"><a href="#接口开发-3" class="headerlink" title="接口开发"></a>接口开发</h3><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 再来一单</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@PostMapping(&quot;/repetition/&#123;id&#125;&quot;)</span></span><br><span class="line">  <span class="meta">@ApiOperation(&quot;再来一单&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">repetition</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">      orderService.repetition(id);</span><br><span class="line">      <span class="keyword">return</span> Result.success();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 再来一单</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">repetition</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> orderMapper.getById(id);</span><br><span class="line">       orders.setStatus(Orders.PENDING_PAYMENT);</span><br><span class="line">       orders.setPayStatus(Orders.UN_PAID);</span><br><span class="line">       orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">       orders.setNumber(String.valueOf(System.currentTimeMillis()));</span><br><span class="line">       orderMapper.insert(orders);</span><br><span class="line">       List&lt;OrderDetail&gt; orderDetailList = orderDetailMapper.getByOrderId(id);</span><br><span class="line">       <span class="keyword">for</span> (OrderDetail orderDetail : orderDetailList) &#123;</span><br><span class="line">           orderDetail.setOrderId(orders.getId());</span><br><span class="line">       &#125;</span><br><span class="line">       orderDetailMapper.insertBatch(orderDetailList);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="商家端订单管理模块"><a href="#商家端订单管理模块" class="headerlink" title="商家端订单管理模块"></a>商家端订单管理模块</h1><h2 id="订单搜索"><a href="#订单搜索" class="headerlink" title="订单搜索"></a>订单搜索</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用户端历史订单模块&quot;&gt;&lt;a href=&quot;#用户端历史订单模块&quot; class=&quot;headerlink&quot; title=&quot;用户端历史订单模块&quot;&gt;&lt;/a&gt;用户端历史订单模块&lt;/h1&gt;&lt;h2 id=&quot;查询历史订单&quot;&gt;&lt;a href=&quot;#查询历史订单&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WebSocket快速入门</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/2d382316.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/2d382316.html</id>
    <published>2024-04-21T14:53:53.000Z</published>
    <updated>2024-05-08T01:31:03.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>WebSocket 是基于 TCP 的一种新的网络协议。它实现了浏览器与服务器全双工通信——浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接， 并进行双向数据传输。</p><p><img src="https://img.picgo.net/2024/04/21/QBP6AB0ND8SCDV_C_KA4cc86a385df3a1e4.png" ></p><p><img src="https://img.picgo.net/2024/04/21/VVAPRWUJM3QCV2YZ5R0O89d847d2ceb478ec.png"></p><p>HTTP协议和WebSocket协议对比：</p><ul><li>HTTP是短连接</li><li>WebSocket是长连接</li><li>HTTP通信是单向的，基于请求响应模式</li><li>WebSocket支持双向通信</li><li>HTTP和WebSocket底层都是TCP连接</li></ul><p>应用场景：</p><ul><li>视频弹幕</li><li>网页聊天</li><li>体育实况更新</li><li>股票基金报价实时更新</li></ul><p><img src="https://img.picgo.net/2024/04/21/2WD4OWZUYV004G9_Ycac82d1d70e2e3b7.png"></p><h1 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h1><p>实现步骤：<br>1.直接使用websocket.html页面作为WebSocket客户端<br>2.导入WebSocket的maven坐标<br>3.导入WebSocket服务端组件WebSocketServer，用于和客户端通信<br>4.导入配置类WebSocketConfiguration，注册WebSocket的服务端组件<br>5.导入定时任务类WebSocketTask，定时向客户端推送数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebSocket服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/ws/&#123;sid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放会话对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Session&gt; sessionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, <span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端：&quot;</span> + sid + <span class="string">&quot;建立连接&quot;</span>);</span><br><span class="line">        sessionMap.put(sid, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message, <span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到来自客户端：&quot;</span> + sid + <span class="string">&quot;的信息:&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(<span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接断开:&quot;</span> + sid);</span><br><span class="line">        sessionMap.remove(sid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToAllClient</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        Collection&lt;Session&gt; sessions = sessionMap.values();</span><br><span class="line">        <span class="keyword">for</span> (Session session : sessions) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//服务器向客户端发送消息</span></span><br><span class="line">                session.getBasicRemote().sendText(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebSocket配置类，用于注册WebSocket的Bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketTask</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebSocketServer webSocketServer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过WebSocket每隔5秒向客户端发送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessageToClient</span><span class="params">()</span> &#123;</span><br><span class="line">        webSocketServer.sendToAllClient(<span class="string">&quot;这是来自服务端的消息：&quot;</span> + DateTimeFormatter.ofPattern(<span class="string">&quot;HH:mm:ss&quot;</span>).format(LocalDateTime.now()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然WebSocket支持双向通信，功能看似比HTTP强大，那么我们是不是可以基于WebSocket开发所有的业务功能？<br>WebSocket缺点：</p><ul><li>服务器长期维护长连接需要一定的成本</li><li>各个浏览器支持程度不一</li><li>WebSocket 是长连接，受网络限制比较大，需要处理好重连</li></ul><p>结论：WebSocket并不能完全取代HTTP，它只适合在特定的场景下使用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;WebSocket 是基于 TCP 的一种新的网络协议。它实现了浏览器与服务器全双工通信——浏览器和服务器只需要完成一次握手，两者之间就可以</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="WebSocket" scheme="https://wjlgmw-github-io.vercel.app/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>Spring Task快速入门</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/2b93b116.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/2b93b116.html</id>
    <published>2024-04-21T13:47:59.000Z</published>
    <updated>2024-05-08T01:31:03.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Spring Task 是Spring框架提供的任务调度工具，可以按照约定的时间自动执行某个代码逻辑。<br>定位：定时任务框架<br>作用：定时自动执行某段Java代码<br>应用场景：</p><ul><li>信用卡每月还款提醒</li><li>银行贷款每月还款提醒</li><li>火车票售票系统处理未支付订单</li><li>入职纪念日为用户发送通知<br>只要是需要定时处理的场景都可以使用Spring Task<br><img src="https://img.picgo.net/2024/04/21/R6Y_WY6IW6WF5Z1KQdcc272031d3a8642.png"></li></ul><h1 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h1><p>cron表达式其实就是一个字符串，通过cron表达式可以定义任务触发的时间<br>构成规则：分为6或7个域，由空格分隔开，每个域代表一个含义<br>每个域的含义分别为：秒、分钟、小时、日、月、周、年(可选)</p><p><img src="https://img.picgo.net/2024/04/21/GC62PXUD2036NQY64DS5JS7c2e90d365c118c5.png"><br>日与周是互斥的</p><p>cron表达式在线生成器：<a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a><br><img src="https://img.picgo.net/2024/04/21/11XY0832DY4W9IFU86edaedd2869fc70.png"></p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>Spring Task使用步骤：<br>1.导入maven坐标 spring-context（已存在）<br>2.启动类添加注解 @EnableScheduling 开启任务调度<br>3.自定义定时任务类</p><p><img src="https://img.picgo.net/2024/04/21/1MBZPN7AMVUA9Z8MG53b2e0fe215c4ef9.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义定时任务类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时任务 每隔5秒触发一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exeuteTask</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时任务开始执行:&#123;&#125;&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Spring Task 是Spring框架提供的任务调度工具，可以按照约定的时间自动执行某个代码逻辑。&lt;br&gt;定位：定时任务框架&lt;br&gt;作用</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="spring Task" scheme="https://wjlgmw-github-io.vercel.app/tags/spring-Task/"/>
    
  </entry>
  
  <entry>
    <title>苍穹外卖(十)</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/7adb0ca6.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/7adb0ca6.html</id>
    <published>2024-04-21T13:15:32.000Z</published>
    <updated>2024-05-08T01:31:03.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="订单状态定时处理、来单提醒和客户催单"><a href="#订单状态定时处理、来单提醒和客户催单" class="headerlink" title="订单状态定时处理、来单提醒和客户催单"></a>订单状态定时处理、来单提醒和客户催单</h1><p>订单状态定时处理<br><img src="https://img.picgo.net/2024/04/21/9Q1VKZ64T5EJ3PBF908709398c658a62.png" ></p><p>来单提醒<br><img src="https://img.picgo.net/2024/04/21/_INCITQPGETS7CH1QSDE71bd7044c02fc976.png"></p><p>客户催单<br><img src="https://img.picgo.net/2024/04/21/XDY8BRTRHLJ5M57RMUe8986106a8355d1a.png"></p><h1 id="Spring-Task"><a href="#Spring-Task" class="headerlink" title="Spring Task"></a>Spring Task</h1><p>详细见Spring Task文章</p><h1 id="订单状态定时处理"><a href="#订单状态定时处理" class="headerlink" title="订单状态定时处理"></a>订单状态定时处理</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>用户下单后可能存在的情况：</p><ul><li>下单后未支付，订单一直处于“待支付”状态</li><li>用户收货后管理端未点击完成按钮，订单一直处于“派送中”状态<br><img src="https://img.picgo.net/2024/04/21/HEGUWF5Q25KDCIBYKX259534b5f5cb2189a.png"></li></ul><p><img src="https://img.picgo.net/2024/04/21/GIAZJC0AFGGFA54VI2U5a70de8f69dd2b57.png"></p><p>对于上面两种情况需要通过定时任务来修改订单状态，具体逻辑为：</p><ul><li>通过定时任务每分钟检查一次是否存在支付超时订单（下单后超过15分钟仍未支付则判定为支付超时订单），如果存在则修改订单状态为“已取消”</li><li>通过定时任务每天凌晨1点检查一次是否存在“派送中”的订单，如果存在则修改订单状态为“已完成”</li></ul><h2 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务类，定时处理订单状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderTask</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理超时订单的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 * * * * ? *&quot;)</span><span class="comment">//每分钟触发一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTimeoutOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时处理超时订单：&#123;&#125;&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now().plusMinutes(-<span class="number">15</span>);</span><br><span class="line">        <span class="comment">// select * from orders where status=? and order_time&lt;(当前时间-15分钟)</span></span><br><span class="line">        List&lt;Orders&gt; ordersList = orderMapper.getByStatusAndOrderTimeLT(Orders.PENDING_PAYMENT, time);</span><br><span class="line">        <span class="keyword">if</span> (ordersList!=<span class="literal">null</span> &amp;&amp;ordersList.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Orders orders : ordersList) &#123;</span><br><span class="line">                orders.setStatus(Orders.CANCELLED);</span><br><span class="line">                orders.setCancelReason(<span class="string">&quot;订单超时，自动取消&quot;</span>);</span><br><span class="line">                orders.setCancelTime(LocalDateTime.now());</span><br><span class="line">                orderMapper.update(orders);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理一直处于派送中状态的订单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 1 * * ?&quot;)</span> <span class="comment">//每天凌晨1点触发一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processDeliveryOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时处理于派送中的订单：&#123;&#125;&quot;</span>,LocalDateTime.now());</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now().plusMinutes(-<span class="number">60</span>); <span class="comment">//将上一个工作日的订单全部处理</span></span><br><span class="line">        List&lt;Orders&gt; ordersList = orderMapper.getByStatusAndOrderTimeLT(Orders.DELIVERY_IN_PROGRESS, time);</span><br><span class="line">        <span class="keyword">if</span> (ordersList!=<span class="literal">null</span> &amp;&amp;ordersList.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Orders orders : ordersList) &#123;</span><br><span class="line">                orders.setStatus(Orders.COMPLETED);</span><br><span class="line">                orderMapper.update(orders);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>详细见WebSocket文章</p><h1 id="来单提醒"><a href="#来单提醒" class="headerlink" title="来单提醒"></a>来单提醒</h1><h2 id="需求分析和设计"><a href="#需求分析和设计" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><p>用户下单并且支付成功后，需要第一时间通知外卖商家。通知的形式有如下两种：</p><ul><li>语音播报</li><li>弹出提示框</li></ul><p><img src="https://img.picgo.net/2024/04/21/ZV9UIMOOVT2HZ2B9N619ec7b0923f5cc7e8.png"></p><p>设计：<br>1.通过WebSocket实现管理端页面和服务端保持长连接状态<br>2.当客户支付后，调用WebSocket的相关API实现服务端向客户端推送消息<br>3.客户端浏览器解析服务端推送的消息，判断是来单提醒还是客户催单，进行相应的消息提示和语音播报<br>4.约定服务端发送给客户端浏览器的数据格式为JSON，字段包括：type，orderId，content</p><ul><li>type 为消息类型，1为来单提醒 2为客户催单</li><li>orderId 为订单id</li><li>content 为消息内容</li></ul><h2 id="代码开发-1"><a href="#代码开发-1" class="headerlink" title="代码开发"></a>代码开发</h2><p>在订单支付成功后加上以上代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过websocket向客户端浏览器推送消息 type orderId，content</span></span><br><span class="line">Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;type&quot;</span>,<span class="number">1</span>);<span class="comment">//1表示来单提醒 2表示客户催单</span></span><br><span class="line">map.put(<span class="string">&quot;orderId&quot;</span>,ordersDB.getId());</span><br><span class="line">map.put(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;订单号：&quot;</span>+ordersPaymentDTO.getOrderNumber());</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">webSocketServer.sendToAllClient(json);</span><br></pre></td></tr></table></figure></p><h1 id="客户催单"><a href="#客户催单" class="headerlink" title="客户催单"></a>客户催单</h1><h2 id="需求分析和设计-1"><a href="#需求分析和设计-1" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><p>用户在小程序中点击催单按钮后，需要第一时间通知外卖商家。通知的形式有如下两种：<br>语音播报<br>弹出提示框<br><img src="https://img.picgo.net/2024/04/21/B0NVPCJUVEJTMRUOENNJ6e96ee6ffe15fe91.png"><br>设计：<br>1.通过WebSocket实现管理端页面和服务端保持长连接状态<br>2.当用户点击催单按钮后，调用WebSocket的相关API实现服务端向客户端推送消息<br>3.客户端浏览器解析服务端推送的消息，判断是来单提醒还是客户催单，进行相应的消息提示和语音播报<br>4.约定服务端发送给客户端浏览器的数据格式为JSON，字段包括：type，orderId，content</p><ul><li>type 为消息类型，1为来单提醒 2为客户催单</li><li>orderId 为订单id</li><li>content 为消息内容</li></ul><p>接口设计：<br><img src="https://img.picgo.net/2024/04/21/6EKYU4I4MB8Q1H4237f742838dc4a10.png"></p><h2 id="代码开发-2"><a href="#代码开发-2" class="headerlink" title="代码开发"></a>代码开发</h2><p>控制器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户催单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/reminder/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;客户催单&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">reminder</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    orderService.reminder(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 客户催单</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reminder</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">     <span class="comment">//根据id查询订单</span></span><br><span class="line">    Orders ordersDB=orderMapper.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验订单是否存在</span></span><br><span class="line">     <span class="keyword">if</span> (ordersDB==<span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OrderBusinessException</span>(MessageConstant.ORDER_NOT_FOUND);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">     map.put(<span class="string">&quot;type&quot;</span>,<span class="number">2</span>);<span class="comment">//1表示来单提醒 2表示客户催单</span></span><br><span class="line">     map.put(<span class="string">&quot;orderId&quot;</span>,id);</span><br><span class="line">     map.put(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;订单号：&quot;</span>+ordersDB.getNumber());</span><br><span class="line"></span><br><span class="line">     <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">     webSocketServer.sendToAllClient(json);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;订单状态定时处理、来单提醒和客户催单&quot;&gt;&lt;a href=&quot;#订单状态定时处理、来单提醒和客户催单&quot; class=&quot;headerlink&quot; title=&quot;订单状态定时处理、来单提醒和客户催单&quot;&gt;&lt;/a&gt;订单状态定时处理、来单提醒和客户催单&lt;/h1&gt;&lt;p&gt;订单状态定时</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="苍穹外卖" scheme="https://wjlgmw-github-io.vercel.app/tags/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
    
  </entry>
  
  <entry>
    <title>微信支付+支付宝支付</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/7fc1f7b8.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/7fc1f7b8.html</id>
    <published>2024-04-20T20:33:16.000Z</published>
    <updated>2024-05-08T01:31:03.033Z</updated>
    
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="常用支付方式" scheme="https://wjlgmw-github-io.vercel.app/tags/%E5%B8%B8%E7%94%A8%E6%94%AF%E4%BB%98%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>苍穹外卖(八)</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/1ba39136.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/1ba39136.html</id>
    <published>2024-04-20T12:51:57.000Z</published>
    <updated>2024-05-08T01:31:03.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今日内容总概述"><a href="#今日内容总概述" class="headerlink" title="今日内容总概述"></a>今日内容总概述</h1><p>用户下单、订单支付<br><img src="https://img.picgo.net/2024/04/20/CS5JUI88WF7IOQ05FSOUc2995c5ccaa0d7bb.png" ></p><h1 id="导入地址簿功能代码"><a href="#导入地址簿功能代码" class="headerlink" title="导入地址簿功能代码"></a>导入地址簿功能代码</h1><h2 id="需求分析和设计"><a href="#需求分析和设计" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><p><img src="https://img.picgo.net/2024/04/20/XR5W79ZWODXPXKP7Aff2fbf2f6d50685a.png"></p><p>接口设计<br><img src="https://img.picgo.net/2024/04/20/_YARRZWZ4AEQZL5BLN11f1b71366e649958f.png"></p><p>新增地址<br><img src="https://img.picgo.net/2024/04/20/G4_R8KMZ3GU7JLI694b25af156202bbd45.png" ></p><p>查询登录用户所有地址<br><img src="https://img.picgo.net/2024/04/20/8LVZ1SQXMZCQK5Q67a53819ab18f649.png"></p><p>查询默认地址<br><img src="https://img.picgo.net/2024/04/20/RJEK_18FCL2VMNF712ab2e1b0ce68591c1.png" ></p><p>修改地址<br><img src="https://img.picgo.net/2024/04/20/4SUZ00BW_T0975PY3Fe735653b2be69b26.png"></p><p>根据id删除地址<br><img src="https://img.picgo.net/2024/04/20/0ARSIHKAUV15NFNYF85ee7e0eb0866765a.png"></p><p>根据id查询地址<br><img src="https://img.picgo.net/2024/04/20/IGBT5Q53HARONC_UACD21de079e4902c127.png"></p><p>设置默认地址<br><img src="https://img.picgo.net/2024/04/20/UBJQ2W37NGKPOSSYP5264f0b6acdd3d57.png"></p><p>数据库设计（address_book表）：<br><img src="https://img.picgo.net/2024/04/20/00YKDM19_QA0J4A008JO4106d2494ed42331.png"></p><h2 id="代码导入"><a href="#代码导入" class="headerlink" title="代码导入"></a>代码导入</h2><p><img src="https://img.picgo.net/2024/04/20/_HN0LCHXDZEY_4C_MHLde2bfe99ee080bfd.png" ></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在微信开发者小程序进行相应的测试<br><img src="https://img.picgo.net/2024/04/20/25M541DA8D9F9A_PN042ce2b9a3ed7a0400.png"></p><h1 id="用户下单"><a href="#用户下单" class="headerlink" title="用户下单"></a>用户下单</h1><h2 id="需求分析和设计-1"><a href="#需求分析和设计-1" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h2><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>用户下单业务说明：<br>在电商系统中，用户是通过下单的方式通知商家，用户已经购买了商品，需要商家进行备货和发货。<br>用户下单后会产生订单相关数据，订单数据需要能够体现如下信息：<br><img src="https://img.picgo.net/2024/04/20/RBIPA25D7RQXX962be6d9dba193ac3.png"><br>用户点餐业务流程：<br><img src="https://img.picgo.net/2024/04/20/6OT6DQ34EXTALOTWfbbbf546e43ac93a.png"><br>接口设计（分析）：<br>用户下单接口<br><img src="https://img.picgo.net/2024/04/20/Z3DFFUT_JXEO36PSQN5d01600951eff5b1.png">、</p><p>订单支付接口<br><img src="https://img.picgo.net/2024/04/20/8FFNLV06J4EF15R2f43f3663cdd672f.png"></p><p><img src="https://img.picgo.net/2024/04/20/SZGVPM8952KXB6RU3I9W58a3716be42fce6d.png"></p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>两种表<br><img src="https://img.picgo.net/2024/04/20/JAPV089P0SSG5O4W003Yfd2deaafbb66343c.png" ></p><p>订单表<br><img src="https://img.picgo.net/2024/04/20/1JHMOYELOXILMGMSVHe830148a1efe564c.png" ></p><p>订单明细表<br><img src="https://img.picgo.net/2024/04/20/SU9J9TRY39BQ791E7OK0c98343ee28a9c3a5.png"></p><h2 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h2><p>DTO类<br><img src="https://img.picgo.net/2024/04/20/47_55DCJ6Q9SV5H61CO2dc11923fdd57353c.png"></p><p>VO类<br><img src="https://img.picgo.net/2024/04/20/1K15YZ4XIM7UGQ0TWODU8ffc6633c229997c.png"></p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;userOrderController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/order&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户端订单相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ordersSubmitDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;用户下单&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;OrderSubmitVO&gt; <span class="title function_">submit</span><span class="params">(<span class="meta">@RequestBody</span> OrdersSubmitDTO ordersSubmitDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;用户下单，参数为:&#123;&#125;&quot;</span>,ordersSubmitDTO);</span><br><span class="line">        <span class="type">OrderSubmitVO</span> <span class="variable">orderSubmitVO</span> <span class="operator">=</span> orderService.submitOrder(ordersSubmitDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success(orderSubmitVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>service层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ordersSubmitDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OrderSubmitVO <span class="title function_">submitOrder</span><span class="params">(OrdersSubmitDTO ordersSubmitDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDetailMapper orderDetailMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressBookMapper addressBookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> ShoppingCartMapper shoppingCartMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ordersSubmitDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> OrderSubmitVO <span class="title function_">submitOrder</span><span class="params">(OrdersSubmitDTO ordersSubmitDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//处理各种业务异常（地址簿为空、购物车为空）</span></span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookMapper.getById(ordersSubmitDTO.getAddressBookId());</span><br><span class="line">        <span class="keyword">if</span> (addressBook==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//抛出业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressBookBusinessException</span>(MessageConstant.ADDRESS_BOOK_IS_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查询当前用户的购物车数据</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">        shoppingCart.setUserId(userId);</span><br><span class="line">        List&lt;ShoppingCart&gt; shoppingCartList = shoppingCartMapper.list(shoppingCart);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shoppingCartList==<span class="literal">null</span>||shoppingCartList.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ShoppingCartBusinessException</span>(MessageConstant.SHOPPING_CART_IS_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向订单表插入1条数据</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Orders</span>();</span><br><span class="line">        BeanUtils.copyProperties(ordersSubmitDTO,orders);</span><br><span class="line">        orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">        orders.setPayStatus(Orders.UN_PAID);</span><br><span class="line">        orders.setStatus(Orders.PENDING_PAYMENT);</span><br><span class="line">        orders.setNumber(String.valueOf(System.currentTimeMillis()));</span><br><span class="line">        orders.setPhone(addressBook.getPhone());</span><br><span class="line">        orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">        orders.setUserId(userId);</span><br><span class="line"></span><br><span class="line">        orderMapper.insert(orders);</span><br><span class="line"></span><br><span class="line">        List&lt;OrderDetail&gt; orderDetailList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//向订单明细表插入n条数据</span></span><br><span class="line">        <span class="keyword">for</span> (ShoppingCart cart : shoppingCartList) &#123;</span><br><span class="line">            <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();<span class="comment">//订单明细</span></span><br><span class="line">            BeanUtils.copyProperties(cart,orderDetail);</span><br><span class="line">            orderDetail.setOrderId(orders.getId());<span class="comment">//设置当前订单明细关联的订单id</span></span><br><span class="line">            orderDetailList.add(orderDetail);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        orderDetailMapper.insertBatch(orderDetailList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空当前用户的购物车数据</span></span><br><span class="line">        shoppingCartMapper.deleteByUserId(userId);</span><br><span class="line">        <span class="comment">//封装VO放回结果</span></span><br><span class="line">        <span class="type">OrderSubmitVO</span> <span class="variable">orderSubmitVO</span> <span class="operator">=</span> OrderSubmitVO.builder()</span><br><span class="line">                .id(orders.getId())</span><br><span class="line">                .orderTime(orders.getOrderTime())</span><br><span class="line">                .orderNumber(orders.getNumber())</span><br><span class="line">                .orderAmount(orders.getAmount())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> orderSubmitVO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>dao层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入订单数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Orders orders)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDetailMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量插入订单明细数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderDetailList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(List&lt;OrderDetail&gt; orderDetailList)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>mapper映射<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Orders&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into orders</span><br><span class="line">        (number, status, user_id, address_book_id, order_time, checkout_time, pay_method, pay_status, amount, remark,</span><br><span class="line">         phone, address, consignee, estimated_delivery_time, delivery_status, pack_amount, tableware_number,</span><br><span class="line">         tableware_status)</span><br><span class="line">        values (#&#123;number&#125;, #&#123;status&#125;, #&#123;userId&#125;, #&#123;addressBookId&#125;, #&#123;orderTime&#125;, #&#123;checkoutTime&#125;, #&#123;payMethod&#125;,</span><br><span class="line">                #&#123;payStatus&#125;, #&#123;amount&#125;, #&#123;remark&#125;, #&#123;phone&#125;, #&#123;address&#125;, #&#123;consignee&#125;,</span><br><span class="line">                #&#123;estimatedDeliveryTime&#125;, #&#123;deliveryStatus&#125;, #&#123;packAmount&#125;, #&#123;tablewareNumber&#125;, #&#123;tablewareStatus&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.OrderDetailMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        insert into order_detail</span><br><span class="line">        (name, order_id, dish_id, setmeal_id, dish_flavor, number, amount, image)</span><br><span class="line">        values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;orderDetailList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;od&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            (#&#123;od.name&#125;,#&#123;od.orderId&#125;,#&#123;od.dishId&#125;,#&#123;od.setmealId&#125;,#&#123;od.dishFlavor&#125;,</span><br><span class="line">            #&#123;od.number&#125;,#&#123;od.amount&#125;,#&#123;od.image&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="订单支付"><a href="#订单支付" class="headerlink" title="订单支付"></a>订单支付</h1><h2 id="微信支付介绍"><a href="#微信支付介绍" class="headerlink" title="微信支付介绍"></a>微信支付介绍</h2><h3 id="微信支付产品和微信支付接入流程"><a href="#微信支付产品和微信支付接入流程" class="headerlink" title="微信支付产品和微信支付接入流程"></a>微信支付产品和微信支付接入流程</h3><p>微信支付产品<br><img src="https://img.picgo.net/2024/04/20/RT0_75EE49WRRICNNB9470e5655205d9c4.png"></p><p>参考：<a href="https://pay.weixin.qq.com/static/product/product_index.shtml">https://pay.weixin.qq.com/static/product/product_index.shtml</a></p><p><img src="https://img.picgo.net/2024/04/20/OOT1D6E6TIS689IAE703abaafd2c216e3.png"></p><h3 id="微信小程序支付时许图"><a href="#微信小程序支付时许图" class="headerlink" title="微信小程序支付时许图"></a>微信小程序支付时许图</h3><p><img src="https://img.picgo.net/2024/04/20/49EIFJEIHMC00BY598d9608d640fbd00.png"></p><p><img src="https://img.picgo.net/2024/04/20/KMJZ_VSHHFE93LXVR5E5RI3497dfa3942978c6.png"></p><h3 id="微信支付相关接口介绍"><a href="#微信支付相关接口介绍" class="headerlink" title="微信支付相关接口介绍"></a>微信支付相关接口介绍</h3><p><img src="https://img.picgo.net/2024/04/20/K0KNTA1_UCZL08623SVc5b5a5708ec57308.png"></p><p><img src="https://img.picgo.net/2024/04/20/9CUATMY2EGKXB4KE0edfd110a96bb0d6.png"></p><h3 id="微信支付准备工作"><a href="#微信支付准备工作" class="headerlink" title="微信支付准备工作"></a>微信支付准备工作</h3><p><img src="https://img.picgo.net/2024/04/20/Q_VAYG1HFNJBRTX_5U__J72db5f2eac06f001.png"></p><p><img src="https://img.picgo.net/2024/04/20/AFBZ_N75G788TMZO_ULVNYc92a27679f3ded82.png"></p><p>安装cpolar<br>然后再在相应的cmd里面输入下面指令，要将./cpolar改为cpolar.exe  token也要改为自己的<br><img src="https://img.picgo.net/2024/04/20/PPO41CN8BS5GR3TNUad57b7c8bfd613eb.png"></p><p>cpolar.exe http 8080 代指自己后端port<br>创建相应的公域网</p><h2 id="导入功能代码"><a href="#导入功能代码" class="headerlink" title="导入功能代码"></a>导入功能代码</h2><p><img src="https://img.picgo.net/2024/04/20/8G7QAEIKNZKDLE73e470dbb4e63c265.png"></p><p>修改成自己的配置文件（图中的用不了）<br><img src="https://img.picgo.net/2024/04/20/ZXH71YT2JITPY5B9G_SF_N76895b6bf9b0c682.png"></p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 订单支付</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> ordersPaymentDTO</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PutMapping(&quot;/payment&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;订单支付&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result&lt;OrderPaymentVO&gt; <span class="title function_">payment</span><span class="params">(<span class="meta">@RequestBody</span> OrdersPaymentDTO ordersPaymentDTO)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       log.info(<span class="string">&quot;订单支付：&#123;&#125;&quot;</span>, ordersPaymentDTO);</span><br><span class="line">       <span class="type">OrderPaymentVO</span> <span class="variable">orderPaymentVO</span> <span class="operator">=</span> orderService.payment(ordersPaymentDTO);</span><br><span class="line">       log.info(<span class="string">&quot;生成预支付交易单：&#123;&#125;&quot;</span>, orderPaymentVO);</span><br><span class="line">       <span class="keyword">return</span> Result.success(orderPaymentVO);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>dao层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据订单号查询订单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderNumber</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from orders where number = #&#123;orderNumber&#125;&quot;)</span></span><br><span class="line">Orders <span class="title function_">getByNumber</span><span class="params">(String orderNumber)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改订单信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Orders orders)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">getById</span><span class="params">(Long userId)</span>;</span><br></pre></td></tr></table></figure></p><p>service层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单支付</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ordersPaymentDTO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">OrderPaymentVO <span class="title function_">payment</span><span class="params">(OrdersPaymentDTO ordersPaymentDTO)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付成功，修改订单状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outTradeNo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">paySuccess</span><span class="params">(String outTradeNo)</span>;</span><br></pre></td></tr></table></figure></p><p>实现service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单支付</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ordersPaymentDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> OrderPaymentVO <span class="title function_">payment</span><span class="params">(OrdersPaymentDTO ordersPaymentDTO)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 当前登录用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getById(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用微信支付接口，生成预支付交易单</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> weChatPayUtil.pay(</span><br><span class="line">                ordersPaymentDTO.getOrderNumber(), <span class="comment">//商户订单号</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0.01</span>), <span class="comment">//支付金额，单位 元</span></span><br><span class="line">                <span class="string">&quot;苍穹外卖订单&quot;</span>, <span class="comment">//商品描述</span></span><br><span class="line">                user.getOpenid() <span class="comment">//微信用户的openid</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonObject.getString(<span class="string">&quot;code&quot;</span>) != <span class="literal">null</span> &amp;&amp; jsonObject.getString(<span class="string">&quot;code&quot;</span>).equals(<span class="string">&quot;ORDERPAID&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OrderBusinessException</span>(<span class="string">&quot;该订单已支付&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">OrderPaymentVO</span> <span class="variable">vo</span> <span class="operator">=</span> jsonObject.toJavaObject(OrderPaymentVO.class);</span><br><span class="line">        vo.setPackageStr(jsonObject.getString(<span class="string">&quot;package&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> vo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付成功，修改订单状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outTradeNo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paySuccess</span><span class="params">(String outTradeNo)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据订单号查询订单</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">ordersDB</span> <span class="operator">=</span> orderMapper.getByNumber(outTradeNo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据订单id更新订单的状态、支付方式、支付状态、结账时间</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> Orders.builder()</span><br><span class="line">                .id(ordersDB.getId())</span><br><span class="line">                .status(Orders.TO_BE_CONFIRMED)</span><br><span class="line">                .payStatus(Orders.PAID)</span><br><span class="line">                .checkoutTime(LocalDateTime.now())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        orderMapper.update(orders);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;今日内容总概述&quot;&gt;&lt;a href=&quot;#今日内容总概述&quot; class=&quot;headerlink&quot; title=&quot;今日内容总概述&quot;&gt;&lt;/a&gt;今日内容总概述&lt;/h1&gt;&lt;p&gt;用户下单、订单支付&lt;br&gt;&lt;img src=&quot;https://img.picgo.net/2024/</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="苍穹外卖" scheme="https://wjlgmw-github-io.vercel.app/tags/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
    
  </entry>
  
  <entry>
    <title>自定义一个starter</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/f333ffdd.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/f333ffdd.html</id>
    <published>2024-04-19T22:03:26.000Z</published>
    <updated>2024-05-08T01:31:03.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景启动器的作用"><a href="#场景启动器的作用" class="headerlink" title="场景启动器的作用"></a>场景启动器的作用</h1><ul><li>自动引入依赖（依赖的传递性）</li><li>自动配置组件（自动配置类 XxxAutoConfiguation）</li><li>自定义属性(@EnableConfigurationProperties 启用属性实体类)</li></ul><h1 id="场景启动器的原理"><a href="#场景启动器的原理" class="headerlink" title="场景启动器的原理"></a>场景启动器的原理</h1><p>SpringBoot项目启动类上的@EnableAutoConfiguration注解会自动加载场景启动器提供的<br>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports<br>文件中定义的自动配置类，该自动配置类会启用属性实体类并完成组件的注册。</p><h1 id="自定义场景启动器的步骤"><a href="#自定义场景启动器的步骤" class="headerlink" title="自定义场景启动器的步骤"></a>自定义场景启动器的步骤</h1><p>1.定义属性实体类（SmsProperties）<br>2.定义组件（SmsService）<br>3.定义自动配置类（SmsAutoConfiguration.java） -&gt; 3.1.注册组件 3.2.启用属性实体类<br>4.将自动配置类写入imports文件中</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p><img src="https://img.picgo.net/2024/04/19/IPBDYQV_B8SNGAKVIDbf77b7fbfe626923.png"></p><p>SmsProperties<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;sms&quot;)</span> <span class="comment">//对前置属性为sms的进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String host;<span class="comment">//主机</span></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>SmsService<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SmsProperties smsProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String tel)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (smsProperties.getHost().equals(<span class="string">&quot;0.0.0.0&quot;</span>)&amp;&amp;</span><br><span class="line">                smsProperties.getPassword().equals(<span class="string">&quot;123&quot;</span>)&amp;&amp;</span><br><span class="line">                smsProperties.getUsername().equals(<span class="string">&quot;zhangsan&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;向&quot;</span>+tel+<span class="string">&quot;发送短信成功&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;主机、用户名和密码不正确,请重新配置&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SmsAutoConfiguration<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(SmsProperties.class)</span><span class="comment">//把属性实体类放在容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SmsService <span class="title function_">smsService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SmsService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsService</span>();</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后将SmsAutoConfiguration填入到META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports<br><img src="https://img.picgo.net/2024/04/19/WV_QMDR23T2POF3H18a0c786d6c4c7cd.png"></p><p>效果展示<br><img src="https://img.picgo.net/2024/04/19/MUPIKVG1DKT0D7PCN8K71c6d17385133d82.png"></p><p>自定义starter一般不需要maven中的插件可以将其删掉，在maven生命周期中执行clean和install安装到本地中<br>然后再需要的使用的地方引入自定义starter的maven三坐标</p><p>再要使用的模块中配置全局配置文件<br><img src="https://img.picgo.net/2024/04/19/0AI5U7YM5JPZRGPVJR02ddebd39606a9b1.png"></p><p>然后再进行相应的测试即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">sms</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(smsService.send(<span class="string">&quot;123132&quot;</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;场景启动器的作用&quot;&gt;&lt;a href=&quot;#场景启动器的作用&quot; class=&quot;headerlink&quot; title=&quot;场景启动器的作用&quot;&gt;&lt;/a&gt;场景启动器的作用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;自动引入依赖（依赖的传递性）&lt;/li&gt;
&lt;li&gt;自动配置组件（自动配置类 Xxx</summary>
      
    
    
    
    <category term="后端" scheme="https://wjlgmw-github-io.vercel.app/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="SpringBoot" scheme="https://wjlgmw-github-io.vercel.app/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>苍穹外卖(一)</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/f9dc7df9.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/f9dc7df9.html</id>
    <published>2024-04-19T11:01:12.000Z</published>
    <updated>2024-05-08T01:31:03.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot; &quot;&gt;&lt;/a&gt; &lt;/h1&gt;</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="苍穹外卖" scheme="https://wjlgmw-github-io.vercel.app/tags/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
    
  </entry>
  
  <entry>
    <title>黑马点评-实战-redis</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/a858d08d.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/a858d08d.html</id>
    <published>2024-04-17T01:22:27.000Z</published>
    <updated>2024-05-08T01:31:03.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="达人探店"><a href="#达人探店" class="headerlink" title="达人探店"></a>达人探店</h1><h2 id="发布探店笔记"><a href="#发布探店笔记" class="headerlink" title="发布探店笔记"></a>发布探店笔记</h2><p>探店笔记类似点评网站的评价，往往是图文结合。对应的表有两个：</p><ul><li>tb_blog：探店笔记表，包含笔记中的标题、文字、图片等</li><li>tb_blog_comments：其他用户对探店笔记的评价</li></ul><p>内容展示<br><img src="https://img.picgo.net/2024/04/18/080IP5ZUXRR720UM05F2bcbf92576f944859.png"></p><p>tb_blog结构<br><img src="https://img.picgo.net/2024/04/18/X7UL1O4IOSQJHW75b58db40b24daae.png"></p><p>业务展示<br><img src="https://img.picgo.net/2024/04/18/F1SZ_08QMLP8TATRVH7061447d3b9908e6.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IMAGE_UPLOAD_DIR</span> <span class="operator">=</span> <span class="string">&quot;D:\\IdeaProjects\\hm-dianping\\nginx-1.18.0\\html\\hmdp\\imgs&quot;</span>; <span class="comment">//改为自己本地的路径</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(<span class="meta">@RequestBody</span> Blog blog)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取登录用户</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">        blog.setUserId(user.getId());</span><br><span class="line">        <span class="comment">// 保存探店博文</span></span><br><span class="line">        blogService.save(blog);</span><br><span class="line">        <span class="comment">// 返回id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(blog.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;blog&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">uploadImage</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile image)</span> &#123;  <span class="comment">//存入本地的，没有上传到文件服务器上面</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取原始文件名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> image.getOriginalFilename();</span><br><span class="line">            <span class="comment">// 生成新文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> createNewFileName(originalFilename);</span><br><span class="line">            <span class="comment">// 保存文件</span></span><br><span class="line">            image.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(SystemConstants.IMAGE_UPLOAD_DIR, fileName));</span><br><span class="line">            <span class="comment">// 返回结果</span></span><br><span class="line">            log.debug(<span class="string">&quot;文件上传成功，&#123;&#125;&quot;</span>, fileName);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;文件上传失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看探店笔记"><a href="#查看探店笔记" class="headerlink" title="查看探店笔记"></a>查看探店笔记</h3><p><img src="https://img.picgo.net/2024/04/18/3IKV19EI20A0DUVHYBJBb6c6d897e052f585.png"><br>解释blog类 @TableField(exist = false)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户图标</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@TableField(exist = false)</span>  <span class="comment">//该字段不存在数据库中</span></span><br><span class="line">  <span class="keyword">private</span> String icon;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户姓名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@TableField(exist = false)</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 是否点赞过了</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@TableField(exist = false)</span></span><br><span class="line">  <span class="keyword">private</span> Boolean isLike;</span><br></pre></td></tr></table></figure><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">queryBlogById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> blogService.queryBlogById(id);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>实现service接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询blog</span></span><br><span class="line">    <span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="keyword">if</span> (blog==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;笔记不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.查询blog有关的用户</span></span><br><span class="line">    queryBlogUser(blog);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(blog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">queryBlogUser</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> blog.getUserId();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line">    blog.setName(user.getNickName());</span><br><span class="line">    blog.setIcon(user.getIcon());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="点赞"><a href="#点赞" class="headerlink" title="点赞"></a>点赞</h2><p><img src="https://img.picgo.net/2024/04/18/KB02Y80JOVC5_DRG5TQ69f51b4098333b16.png"></p><p>完善点赞功能<br>需求：</p><ul><li>同一个用户只能点赞一次，再次点击则取消点赞</li><li>如果当前用户已经点赞，则点赞按钮高亮显示（前端已实现，判断字段Blog类的isLike属性）</li></ul><p>实现步骤：</p><ul><li>给Blog类中添加一个isLike字段，标示是否被当前用户点赞</li><li>修改点赞功能，利用Redis的set集合判断是否点赞过，未点赞过则点赞数+1，已点赞过则点赞数-1</li><li>修改根据id查询Blog的业务，判断当前登录用户是否点赞过，赋值给isLike字段</li><li>修改分页查询Blog业务，判断当前登录用户是否点赞过，赋值给isLike字段</li></ul><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/like/&#123;id&#125;&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> blogService.likeBlog(id);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>实现service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">isBlogLiked</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取登录用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2.判断当前登录用户是否已经点赞</span></span><br><span class="line">    String key=<span class="string">&quot;blog:liked&quot;</span>+blog.getId();</span><br><span class="line">    Boolean isMember=stringRedisTemplate.opsForSet().isMember(key,userId.toString());</span><br><span class="line">    blog.setIsLike(BooleanUtil.isTrue(isMember));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取登录用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2.判断当前登录用户是否已经点赞</span></span><br><span class="line">    String key=<span class="string">&quot;blog:liked&quot;</span>+id;</span><br><span class="line">    Boolean isMember=stringRedisTemplate.opsForSet().isMember(key,userId.toString());</span><br><span class="line">    <span class="keyword">if</span> (BooleanUtil.isFalse(isMember))&#123;</span><br><span class="line">        <span class="comment">//3.如果未点赞，可以点赞</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked=liked+1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">        <span class="comment">//3.1.数据库点赞数+1</span></span><br><span class="line">        <span class="keyword">if</span> (isSuccess)&#123;</span><br><span class="line">            stringRedisTemplate.opsForSet().add(key,userId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2.保存用户到Redis的set集合</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//4.如果已点赞，取消点赞</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked=liked-1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">        <span class="comment">//4.1.数据库点赞数-1</span></span><br><span class="line">        stringRedisTemplate.opsForSet().remove(key,userId.toString());</span><br><span class="line">        <span class="comment">//4.2.把用户从Redis的set集合移除</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要修改的地方  在查询的时候，查询是否已经被点赞<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryHotBlog</span><span class="params">(Integer current)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据用户查询</span></span><br><span class="line">    Page&lt;Blog&gt; page = query()</span><br><span class="line">            .orderByDesc(<span class="string">&quot;liked&quot;</span>)</span><br><span class="line">            .page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));</span><br><span class="line">    <span class="comment">// 获取当前页数据</span></span><br><span class="line">    List&lt;Blog&gt; records = page.getRecords();</span><br><span class="line">    <span class="comment">// 查询用户</span></span><br><span class="line">    records.forEach(blog -&gt; &#123;</span><br><span class="line">        <span class="built_in">this</span>.queryBlogUser(blog);</span><br><span class="line">        <span class="built_in">this</span>.isBlogLiked(blog);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(records);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询blog</span></span><br><span class="line">    <span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="keyword">if</span> (blog==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;笔记不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.查询blog有关的用户</span></span><br><span class="line">    queryBlogUser(blog);</span><br><span class="line">    <span class="comment">//3.查询blog是否被点赞</span></span><br><span class="line">    isBlogLiked(blog);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(blog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="点赞排行榜"><a href="#点赞排行榜" class="headerlink" title="点赞排行榜"></a>点赞排行榜</h2><p><img src="https://img.picgo.net/2024/04/18/38IPI5ZRH4TLKP2CASYQ0fc71697126a0c4b.png"></p><p>redis的数据结构特点<br><img src="https://img.picgo.net/2024/04/18/3I2ZACEE_YYQHCOIP90250bcc1c1f26e1.png"></p><p>将点赞代码的Set改为SortedSet<br>控制层 点赞排行榜<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/likes/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryBlogLikes</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogService.queryBlogLikes(id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>实现service接口改造和实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlogServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BlogMapper, Blog&gt; <span class="keyword">implements</span> <span class="title class_">IBlogService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主界面查询</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryHotBlog</span><span class="params">(Integer current)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据用户查询</span></span><br><span class="line">        Page&lt;Blog&gt; page = query()</span><br><span class="line">                .orderByDesc(<span class="string">&quot;liked&quot;</span>)</span><br><span class="line">                .page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));</span><br><span class="line">        <span class="comment">// 获取当前页数据</span></span><br><span class="line">        List&lt;Blog&gt; records = page.getRecords();</span><br><span class="line">        <span class="comment">// 查询用户</span></span><br><span class="line">        records.forEach(blog -&gt; &#123;</span><br><span class="line">            <span class="built_in">this</span>.queryBlogUser(blog);</span><br><span class="line">            <span class="built_in">this</span>.isBlogLiked(blog);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(records);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryBlogById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询blog</span></span><br><span class="line">        <span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="keyword">if</span> (blog == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;笔记不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.查询blog有关的用户</span></span><br><span class="line">        queryBlogUser(blog);</span><br><span class="line">        <span class="comment">//3.查询blog是否被点赞</span></span><br><span class="line">        isBlogLiked(blog);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否点赞</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">isBlogLiked</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取登录用户</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">        <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//用户未登录，无需查询是否点赞</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> user.getId();</span><br><span class="line">        <span class="comment">//2.判断当前登录用户是否已经点赞</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + blog.getId();</span><br><span class="line">        <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());</span><br><span class="line">        blog.setIsLike(score != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点赞</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取登录用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//2.判断当前登录用户是否已经点赞</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + id;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());</span><br><span class="line">        <span class="keyword">if</span> (score == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//3.如果未点赞，可以点赞</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked=liked+1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">            <span class="comment">//3.1.数据库点赞数+1</span></span><br><span class="line">            <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">                stringRedisTemplate.opsForZSet().add(key, userId.toString(), System.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.2.保存用户到Redis的set集合</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//4.如果已点赞，取消点赞</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked=liked-1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">            <span class="comment">//4.1.数据库点赞数-1</span></span><br><span class="line">            stringRedisTemplate.opsForZSet().remove(key, userId.toString());</span><br><span class="line">            <span class="comment">//4.2.把用户从Redis的set集合移除</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点赞排行榜</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryBlogLikes</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        String key=BLOG_LIKED_KEY+id;</span><br><span class="line">        <span class="comment">//1.查询top5的点赞用户 zrange key 0 4</span></span><br><span class="line">        Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(key, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> (top5==<span class="literal">null</span>||top5.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.解析出其中的用户di</span></span><br><span class="line">        List&lt;Long&gt; ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">        <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids); <span class="comment">//拼接字符串</span></span><br><span class="line">        <span class="comment">//3.根据用户id查询用户</span></span><br><span class="line">        List&lt;UserDTO&gt; usersDTOS = userService.query()</span><br><span class="line">                .in(<span class="string">&quot;id&quot;</span>,ids).last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span>+idStr+<span class="string">&quot;)&quot;</span>).list() <span class="comment">//排序</span></span><br><span class="line">                .stream()</span><br><span class="line">                .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//4.返回</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(usersDTOS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">queryBlogUser</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> blog.getUserId();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line">        blog.setName(user.getNickName());</span><br><span class="line">        blog.setIcon(user.getIcon());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="好友关注"><a href="#好友关注" class="headerlink" title="好友关注"></a>好友关注</h1><h2 id="关注和取关"><a href="#关注和取关" class="headerlink" title="关注和取关"></a>关注和取关</h2><p><img src="https://img.picgo.net/2024/04/18/ED0I9QQ2YWD9XF5H1ES6603b0f43b624b882.png"></p><p>需求：基于该表数据结构，实现两个接口：<br>1.关注和取关接口<br>2.判断是否关注的接口</p><p>关注是User之间的关系，是博主与粉丝的关系，数据库中有一张tb_follow表来标示：<br><img src="https://img.picgo.net/2024/04/18/8LVVMTNDE53U_VY6F_I401d5a1465c2ec50.png"></p><p>注意: 这里需要把主键修改为自增长，简化开发。</p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/follow&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FollowController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IFollowService followService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关注或取关</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> followUserId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isFollow</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;/&#123;isFollow&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long followUserId,<span class="meta">@PathVariable(&quot;isFollow&quot;)</span> Boolean isFollow)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> followService.follow(followUserId,isFollow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否关注</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> followUserId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;or/not/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long followUserId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> followService.isFollow(followUserId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FollowServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;FollowMapper, Follow&gt; <span class="keyword">implements</span> <span class="title class_">IFollowService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(Long followUserId, Boolean isFollow)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取登录用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//1.判断到底是关注还是取关</span></span><br><span class="line">        <span class="keyword">if</span> (isFollow)&#123;</span><br><span class="line">            <span class="comment">//2.关注，新增数据</span></span><br><span class="line">            <span class="type">Follow</span> <span class="variable">follow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Follow</span>();</span><br><span class="line">            follow.setUserId(userId);</span><br><span class="line">            follow.setFollowUserId(followUserId);</span><br><span class="line">            save(follow);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//3.取关，删除</span></span><br><span class="line">            remove(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Follow&gt;()</span><br><span class="line">                    .eq(<span class="string">&quot;user_id&quot;</span>,userId).eq(<span class="string">&quot;follow_user_id&quot;</span>,followUserId));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">isFollow</span><span class="params">(Long followUserId)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取登录用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//2.查询是否关注</span></span><br><span class="line">        query() .eq(<span class="string">&quot;user_id&quot;</span>,userId).eq(<span class="string">&quot;follow_user_id&quot;</span>,followUserId).count();</span><br><span class="line">       <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(count()&gt;<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="共同关注"><a href="#共同关注" class="headerlink" title="共同关注"></a>共同关注</h2><p>首先完成进入博主首页功能<br><img src='https://s21.ax1x.com/2024/04/17/pFzMgED.png'></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserController 根据id查询用户</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;</span><br><span class="line"><span class="comment">// 查询详情</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line"><span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line"><span class="comment">// 返回</span></span><br><span class="line"><span class="keyword">return</span> Result.ok(userDTO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BlogController</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogByUserId</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line"><span class="comment">// 根据用户查询</span></span><br><span class="line">Page&lt;Blog&gt; page = blogService.query()</span><br><span class="line">.eq(<span class="string">&quot;user_id&quot;</span>, id).page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));</span><br><span class="line"><span class="comment">// 获取当前页数据</span></span><br><span class="line">List&lt;Blog&gt; records = page.getRecords();</span><br><span class="line"><span class="keyword">return</span> Result.ok(records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现共同关注功能<br>需求：利用Redis中恰当的数据结构，实现共同关注功能。在博主个人页面展示出当前用户与博主的共同好友。</p><p><img src="https://img.picgo.net/2024/04/18/PJ0FMMI7LFRXPJLCR046b1ce2e96ab1df.png"></p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 共同关注</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/common/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">followCommons</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> followService.followCommons(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">followCommons</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取当前用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    String key=<span class="string">&quot;follows:&quot;</span>+userId;</span><br><span class="line">    <span class="comment">//2.求交集</span></span><br><span class="line">    String key2=<span class="string">&quot;follows:&quot;</span>+id;</span><br><span class="line">    Set&lt;String&gt; intersect = stringRedisTemplate.opsForSet().intersect(key, key2);</span><br><span class="line">    <span class="keyword">if</span> (intersect==<span class="literal">null</span>||intersect.isEmpty())&#123;</span><br><span class="line">        <span class="comment">//无交集</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.解析id集合</span></span><br><span class="line">    List&lt;Long&gt; ids = intersect.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">    List&lt;UserDTO&gt; users = userService.listByIds(ids)</span><br><span class="line">            .stream()</span><br><span class="line">            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> Result.ok(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="关注推送"><a href="#关注推送" class="headerlink" title="关注推送"></a>关注推送</h2><h3 id="Feed流实现方案分析"><a href="#Feed流实现方案分析" class="headerlink" title="Feed流实现方案分析"></a>Feed流实现方案分析</h3><p>关注推送也叫做Feed流，直译为投喂。为用户持续的提供“沉浸式”的体验，通过无限下拉刷新获取新的信息。<br><img src="https://img.picgo.net/2024/04/18/MY9J0WQJO38EI5UAY7DI415902f2c65df87a.png"></p><p>Feed流产品有两种常见模式：</p><ul><li>Timeline：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈<br>1.优点：信息全面，不会有缺失。并且实现也相对简单<br>2.缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低</li><li>智能排序：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户<br>1.优点：投喂用户感兴趣信息，用户粘度很高，容易沉迷<br>2.缺点：如果算法不精准，可能起到反作用<br>本例中的个人页面，是基于关注的好友来做Feed流，因此采用Timeline的模式。该模式的实现方案有三种：<br>1.拉模式<br>2.推模式<br>3.推拉结合</li></ul><p>拉模式<br><img src="https://img.picgo.net/2024/04/18/ABK0LGFPLE00KBJJ_C00f9d8a6d4ea7b32.png"></p><p>推模式<br><img src='https://s21.ax1x.com/2024/04/17/pFzM2Ue.png'></p><p>推拉结合<br><img src='https://s21.ax1x.com/2024/04/17/pFzMR4H.png'></p><p>三种方案对比<br><img src='https://s21.ax1x.com/2024/04/17/pFzMfCd.png'></p><h3 id="推送到粉丝收件箱"><a href="#推送到粉丝收件箱" class="headerlink" title="推送到粉丝收件箱"></a>推送到粉丝收件箱</h3><p>需求：</p><ul><li>修改新增探店笔记的业务，在保存blog到数据库的同时，推送到粉丝的收件箱</li><li>收件箱满足可以根据时间戳排序，必须用Redis的数据结构实现</li><li>查询收件箱数据时，可以实现分页查询</li></ul><h4 id="Feed流的分页问题"><a href="#Feed流的分页问题" class="headerlink" title="Feed流的分页问题"></a>Feed流的分页问题</h4><p><img src='https://s21.ax1x.com/2024/04/17/pFz17b6.png'></p><h4 id="Feed流的滚动分页"><a href="#Feed流的滚动分页" class="headerlink" title="Feed流的滚动分页"></a>Feed流的滚动分页</h4><p><img src='https://s21.ax1x.com/2024/04/17/pFz1qUO.png'></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(<span class="meta">@RequestBody</span> Blog blog)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> blogService.saveBlog(blog);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">     <span class="comment">//1.获取登录用户</span></span><br><span class="line">     <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">     blog.setUserId(user.getId());</span><br><span class="line">     <span class="comment">//2.保存探店笔记</span></span><br><span class="line">     <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> save(blog);</span><br><span class="line">     <span class="keyword">if</span> (!isSuccess) &#123;</span><br><span class="line">         <span class="keyword">return</span> Result.fail(<span class="string">&quot;新增笔记失败&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//3.查询笔记作者的所有粉丝</span></span><br><span class="line">     List&lt;Follow&gt; follows = followService.query().eq(<span class="string">&quot;follow_user_id&quot;</span>, user.getId()).list();</span><br><span class="line">     <span class="comment">//4.推送笔记id给所有粉丝</span></span><br><span class="line">     <span class="keyword">for</span> (Follow follow : follows) &#123;</span><br><span class="line">         <span class="comment">//4.1.获取粉丝id</span></span><br><span class="line">         <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> follow.getUserId();</span><br><span class="line">         <span class="comment">//4.2.推送</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> FEED_KEY + userId;</span><br><span class="line">         stringRedisTemplate.opsForZSet().add(key,blog.getId().toString(),System.currentTimeMillis());</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//返回id</span></span><br><span class="line">     <span class="keyword">return</span> Result.ok(blog.getId());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="滚动分页查询收件箱的思路"><a href="#滚动分页查询收件箱的思路" class="headerlink" title="滚动分页查询收件箱的思路"></a>滚动分页查询收件箱的思路</h3><p><img src='https://s21.ax1x.com/2024/04/18/pFz3uq0.png'></p><p>参数分析<br><img src='https://s21.ax1x.com/2024/04/18/pFz3QaT.png'></p><h3 id="实现滚动分页查询"><a href="#实现滚动分页查询" class="headerlink" title="实现滚动分页查询"></a>实现滚动分页查询</h3><p>滚动分页类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScrollResult</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;?&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Long minTime;</span><br><span class="line">    <span class="keyword">private</span> Integer offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/of/follow&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryBlogOfFollow</span><span class="params">(<span class="meta">@RequestParam(&quot;lastId&quot;)</span> Long max,<span class="meta">@RequestParam(value = &quot;offset&quot;,defaultValue = &quot;0&quot;)</span>Integer offset)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogService.queryBlogOfFollow(max,offset);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogOfFollow</span><span class="params">(Long max, Integer offset)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取当前用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2.查询收件箱 ZREVRANGEBYSCORE key Max Min LIMIT offset count</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> FEED_KEY+userId;</span><br><span class="line">    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples = stringRedisTemplate.opsForZSet()</span><br><span class="line">            .reverseRangeByScoreWithScores(key, <span class="number">0</span>, max, offset, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//3.非空判断</span></span><br><span class="line">    <span class="keyword">if</span> (typedTuples==<span class="literal">null</span>||typedTuples.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.解析数据：blogId、minTime（时间戳）、offset</span></span><br><span class="line">    List&lt;Long&gt; ids=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(typedTuples.size());</span><br><span class="line">    <span class="type">long</span> minTime=<span class="number">0</span>; <span class="comment">//2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">os</span> <span class="operator">=</span><span class="number">1</span>; <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">for</span> (ZSetOperations.TypedTuple&lt;String&gt; tuple : typedTuples) &#123;<span class="comment">//5 4 4 2 2</span></span><br><span class="line">        <span class="comment">//4.1.获取id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> tuple.getValue();</span><br><span class="line">        ids.add(Long.valueOf(idStr));</span><br><span class="line">        <span class="comment">//获取分数（时间戳）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> tuple.getScore().longValue();</span><br><span class="line">        <span class="keyword">if</span> (time== minTime )&#123;</span><br><span class="line">            os++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            minTime=time;</span><br><span class="line">            os=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids);</span><br><span class="line">    <span class="comment">//5.根据id查询blog</span></span><br><span class="line">    List&lt;Blog&gt; blogs = query()</span><br><span class="line">            .in(<span class="string">&quot;id&quot;</span>, ids).last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="string">&quot;)&quot;</span>).list();</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        <span class="comment">//5.1.查询blog有关的用户</span></span><br><span class="line">        queryBlogUser(blog);</span><br><span class="line">        <span class="comment">//5.2.查询blog是否被点赞</span></span><br><span class="line">        isBlogLiked(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.封装并返回</span></span><br><span class="line">    <span class="type">ScrollResult</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScrollResult</span>();</span><br><span class="line">    r.setList(blogs);</span><br><span class="line">    r.setOffset(os);</span><br><span class="line">    r.setMinTime(minTime);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="附近商铺"><a href="#附近商铺" class="headerlink" title="附近商铺"></a>附近商铺</h1><h2 id="GEO数据结构的基本用法"><a href="#GEO数据结构的基本用法" class="headerlink" title="GEO数据结构的基本用法"></a>GEO数据结构的基本用法</h2><p>GEO就是Geolocation的简写形式，代表地理坐标。Redis在3.2版本中加入了对GEO的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令有：</p><ul><li>GEOADD：添加一个地理空间信息，包含：经度（longitude）、纬度（latitude）、值（member）</li><li>GEODIST：计算指定的两个点之间的距离并返回</li><li>GEOHASH：将指定member的坐标转为hash字符串形式并返回</li><li>GEOPOS：返回指定member的坐标</li><li>GEORADIUS：指定圆心、半径，找到该圆内包含的所有member，并按照与圆心之间的距离排序后返回。6.2以后已废弃</li><li>GEOSEARCH：在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能</li><li>GEOSEARCHSTORE：与GEOSEARCH功能一致，不过可以把结果存储到一个指定的key。 6.2.新功能</li></ul><p>需求：<br>1.添加下面几条数据：</p><ul><li>北京南站（ 116.378248 39.865275 ）</li><li>北京站（ 116.42803 39.903738 ）</li><li>北京西站（ 116.322287 39.893729 ）<br>2.计算北京西站到北京站的距离<br>3.搜索天安门（ 116.397904 39.909005 ）附近10km内的所有火车站，并按照距离升序排序</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GEOADD g1 116.378248 39.865275 bjn  116.42803 39.903738 bjz  116.322287 39.893729 bjx</span><br><span class="line"></span><br><span class="line">GEODIST g1 bjx bjz km</span><br><span class="line"></span><br><span class="line">geosearch g1 FROMLONLAT 116.397904 39.909005 BYRADIUS  10 km WITHDIST</span><br></pre></td></tr></table></figure><h2 id="导入店铺数据到GEO"><a href="#导入店铺数据到GEO" class="headerlink" title="导入店铺数据到GEO"></a>导入店铺数据到GEO</h2><p><img src="https://img.picgo.net/2024/04/18/8YN4R5S8QNIN1Q0996cdf0cafd06a53.png"></p><p>按照商户类型做分组，类型相同的商户作为同一组，以typeId为key存入同一个GEO集合中即可<br><img src="https://img.picgo.net/2024/04/18/W9MI7V6S4Y2XE37BFe73c297bebe41be6.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">loadShopData</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//1.查询店铺信息</span></span><br><span class="line">       List&lt;Shop&gt; list = shopService.list();</span><br><span class="line">       <span class="comment">//2.把店铺分组，按照typeId分组，id一致的放到一个集合</span></span><br><span class="line">       Map&lt;Long,List&lt;Shop&gt;&gt; map=list.stream().collect(Collectors.groupingBy(Shop::getTypeId));</span><br><span class="line">       <span class="comment">//3.分批完成写入Redis</span></span><br><span class="line">       <span class="keyword">for</span> (Map.Entry&lt;Long, List&lt;Shop&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">           <span class="comment">//3.1.获取类型id</span></span><br><span class="line">           <span class="type">Long</span> <span class="variable">typeId</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">           String key=<span class="string">&quot;shop:geo:&quot;</span>+typeId;</span><br><span class="line">           <span class="comment">//3.2.获取同类型的店铺的集合</span></span><br><span class="line">           List&lt;Shop&gt; value = entry.getValue();</span><br><span class="line">           List&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; locations=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(value.size());</span><br><span class="line">           <span class="comment">//3.3.写入redis GEOADD key 经度 纬度 member</span></span><br><span class="line">           <span class="keyword">for</span> (Shop shop : value) &#123;</span><br><span class="line">               <span class="comment">//stringRedisTemplate.opsForGeo().add(key,new Point(shop.getX(),shop.getY()),shop.getId().toString());</span></span><br><span class="line">               locations.add(<span class="keyword">new</span> <span class="title class_">RedisGeoCommands</span>.GeoLocation&lt;&gt;(</span><br><span class="line">                       shop.getId().toString(),</span><br><span class="line">                       <span class="keyword">new</span> <span class="title class_">Point</span>(shop.getX(),shop.getY())</span><br><span class="line">               ));</span><br><span class="line">           &#125;</span><br><span class="line">           stringRedisTemplate.opsForGeo().add(key,locations);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="实现附近商户功能"><a href="#实现附近商户功能" class="headerlink" title="实现附近商户功能"></a>实现附近商户功能</h2><p>修改版本号<br><img src="https://img.picgo.net/2024/04/18/RPTBBZ1JTMFP_KL9QCdb9d060632d27fbc.png"></p><p>控制层代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据商铺类型分页查询商铺信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> typeId 商铺类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> current 页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 商铺列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/type&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopByType</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;typeId&quot;)</span> Integer typeId,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;x&quot;,required = false)</span>Double x,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;y&quot;,required = false)</span>Double y</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    <span class="comment">// 返回数据</span></span><br><span class="line">    <span class="keyword">return</span> shopService.queryShopByType(typeId,current,x,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">queryShopByType</span><span class="params">(Integer typeId, Integer current, Double x, Double y)</span> &#123;</span><br><span class="line">       <span class="comment">//1.判断是否需要根据坐标查询</span></span><br><span class="line">       <span class="keyword">if</span> (x==<span class="literal">null</span>||y==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="comment">//不需要坐标查询，按照数据库查询</span></span><br><span class="line">           <span class="comment">// 根据类型分页查询</span></span><br><span class="line">           Page&lt;Shop&gt; page = query()</span><br><span class="line">                   .eq(<span class="string">&quot;type_id&quot;</span>, typeId)</span><br><span class="line">                   .page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.DEFAULT_PAGE_SIZE));</span><br><span class="line">           <span class="comment">//返回数据</span></span><br><span class="line">           <span class="keyword">return</span> Result.ok(page.getRecords());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//2.计算分页参数</span></span><br><span class="line">       <span class="type">int</span> from=(current-<span class="number">1</span>)*SystemConstants.DEFAULT_PAGE_SIZE;</span><br><span class="line">       <span class="type">int</span> end=current*SystemConstants.DEFAULT_PAGE_SIZE;</span><br><span class="line">       <span class="comment">//3.查询redis、按照距离排序、分页。结果：shopId、distance</span></span><br><span class="line">       String key=SHOP_GEO_KEY+typeId;</span><br><span class="line">       GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; results = stringRedisTemplate.opsForGeo() <span class="comment">//GEOSEARCH BYLONLAT x y BYRADIUS 10 WITHDISTANCE</span></span><br><span class="line">               .search(</span><br><span class="line">                       key,</span><br><span class="line">                       GeoReference.fromCoordinate(x, y),</span><br><span class="line">                       <span class="keyword">new</span> <span class="title class_">Distance</span>(<span class="number">5000</span>),</span><br><span class="line">                       RedisGeoCommands.GeoSearchCommandArgs.newGeoSearchArgs().includeDistance().limit(end)</span><br><span class="line">               );</span><br><span class="line">       <span class="comment">//4.解析出id</span></span><br><span class="line">       <span class="keyword">if</span> (results==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;GeoResult&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt;&gt; list = results.getContent();</span><br><span class="line">       <span class="keyword">if</span> (list.size()&lt;=from)&#123;</span><br><span class="line">           <span class="comment">// 没有下一页了，结束</span></span><br><span class="line">           <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;Long&gt; ids=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list.size());</span><br><span class="line">       Map&lt;String,Distance&gt; distanceMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(list.size());</span><br><span class="line">       <span class="comment">//4.1.截取from~end的部分</span></span><br><span class="line">       list.stream().skip(from).forEach(result-&gt;&#123;</span><br><span class="line">           <span class="comment">//4.2.获取店铺id</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">shopIdStr</span> <span class="operator">=</span> result.getContent().getName();</span><br><span class="line">           ids.add(Long.valueOf(shopIdStr));</span><br><span class="line">           <span class="comment">//4.3.获取距离</span></span><br><span class="line">           <span class="type">Distance</span> <span class="variable">distance</span> <span class="operator">=</span> result.getDistance();</span><br><span class="line">           distanceMap.put(shopIdStr,distance);</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//5.根据id查询Shop</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids);</span><br><span class="line">       List&lt;Shop&gt; shops = query().in(<span class="string">&quot;id&quot;</span>, ids).last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="string">&quot;)&quot;</span>).list();</span><br><span class="line">       <span class="keyword">for</span> (Shop shop : shops) &#123;</span><br><span class="line">           shop.setDistance(distanceMap.get(shop.getId().toString()).getValue());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//6.返回</span></span><br><span class="line">       <span class="keyword">return</span> Result.ok(shops);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h1 id="用户签到"><a href="#用户签到" class="headerlink" title="用户签到"></a>用户签到</h1><h2 id="BitMap功能演示"><a href="#BitMap功能演示" class="headerlink" title="BitMap功能演示"></a>BitMap功能演示</h2><p>假如我们用一张表来存储用户签到信息，其结构应该如下：<br><img src="https://img.picgo.net/2024/04/18/8QUWWVYY4U9LQPHV9Uab835af2a73a8e30.png"><br>假如有1000万用户，平均每人每年签到次数为10次，则这张表一年的数据量为 1亿条<br>每签到一次需要使用（8 + 8 + 1 + 1 + 3 + 1）共22 字节的内存，一个月则最多需要600多字节</p><p>bitmap<br><img src="https://img.picgo.net/2024/04/18/AEP8XRLITI8JCAUe705427481860139.png"><br>我们按月来统计用户签到信息，签到记录为1，未签到则记录为0.</p><p><img src="https://img.picgo.net/2024/04/18/C6XFER3HC__BFTC3U_POe9907396d06e7eae.png"><br>把每一个bit位对应当月的每一天，形成了映射关系。用0和1标示业务状态，这种思路就称为位图（BitMap）。<br>Redis中是利用string类型数据结构实现BitMap，因此最大上限是512M，转换为bit则是 2^32个bit位。<br>BitMap的操作命令有：</p><ul><li>SETBIT：向指定位置（offset）存入一个0或1</li><li>GETBIT ：获取指定位置（offset）的bit值</li><li>BITCOUNT ：统计BitMap中值为1的bit位的数量</li><li>BITFIELD ：操作（查询、修改、自增）BitMap中bit数组中的指定位置（offset）的值</li><li>BITFIELD_RO ：获取BitMap中bit数组，并以十进制形式返回</li><li>BITOP ：将多个BitMap的结果做位运算（与 、或、异或）</li><li>BITPOS ：查找bit数组中指定范围内第一个0或1出现的位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">SETBIT bm1 0 1</span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">SETBIT bm1 1 1</span></span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">SETBIT bm1 2 1</span></span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">SETBIT bm1 5 1</span></span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">SETBIT bm1 6 1</span></span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">SETBIT bm1 7 1</span></span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GETBIT bm1 2</span></span><br><span class="line">1</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">BITCOUNT</span></span><br><span class="line">ERR wrong number of arguments for &#x27;bitcount&#x27; command</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">BITCOUNT bm1</span></span><br><span class="line">6</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">BITFIELD bm1 GET u2 0</span></span><br><span class="line">3</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">BITFIELD bm1 GET u3 0</span></span><br><span class="line">7</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">BITFIELD bm1 GET u4 0</span></span><br><span class="line">14</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">BITPOS bm1 0</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><img src="https://img.picgo.net/2024/04/18/J2MEOTYWOA7R9VVWECe53902dc0705ccf2.png"></p><h2 id="实现签到功能"><a href="#实现签到功能" class="headerlink" title="实现签到功能"></a>实现签到功能</h2><p><img src="https://img.picgo.net/2024/04/18/XR3BIO4TY4TPX2PES8O9fde66f3c7f9784bb.png"></p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 用户签到</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@PostMapping(&quot;/sign&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">sign</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> userService.sign();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><br>service实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">sign</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//1.获取当前登录的用户</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">       <span class="comment">//2.获取日期</span></span><br><span class="line">       <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">       <span class="comment">//3.拼接key</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">keySuffix</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;:yyyyMM&quot;</span>));</span><br><span class="line">       String key= USER_SIGN_KEY +userId+keySuffix;</span><br><span class="line">       <span class="comment">//4.获取今天是本月的第几天</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">dayOfMonth</span> <span class="operator">=</span> now.getDayOfMonth();</span><br><span class="line">       <span class="comment">//5.写入Redis SETBIT key offset 1</span></span><br><span class="line">       stringRedisTemplate.opsForValue().setBit(key,dayOfMonth-<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> Result.ok();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="统计连续签到"><a href="#统计连续签到" class="headerlink" title="统计连续签到"></a>统计连续签到</h2><p><img src="https://img.picgo.net/2024/04/18/VOETD4YZJNG95MY3We5674bb861eb12d7.png"></p><p><img src="https://img.picgo.net/2024/04/18/P4PFMAQ930V8HRFM9I465f9a901453390bf.png" ></p><p>控制层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**统计连续签到</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/sign/count&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">signCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.signCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">signCount</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//1.获取当前登录的用户</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">       <span class="comment">//2.获取日期</span></span><br><span class="line">       <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">       <span class="comment">//3.拼接key</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">keySuffix</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;:yyyyMM&quot;</span>));</span><br><span class="line">       String key= USER_SIGN_KEY +userId+keySuffix;</span><br><span class="line">       <span class="comment">//4.获取今天是本月的第几天</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">dayOfMonth</span> <span class="operator">=</span> now.getDayOfMonth();</span><br><span class="line">       <span class="comment">//5.获取本月截至今天为之的所有的签到记录，返回的是一个十进制数字</span></span><br><span class="line">       List&lt;Long&gt; result = stringRedisTemplate.opsForValue().bitField(</span><br><span class="line">               key,</span><br><span class="line">               BitFieldSubCommands.create()</span><br><span class="line">                       .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class="number">0</span>)</span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">if</span> (result==<span class="literal">null</span>||result.isEmpty())&#123;</span><br><span class="line">           <span class="comment">//没有任何签到结果</span></span><br><span class="line">           <span class="keyword">return</span> Result.ok();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">Long</span> <span class="variable">num</span> <span class="operator">=</span> result.get(<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">if</span> (num==<span class="literal">null</span>||num==<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> Result.ok();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//6.循环遍历</span></span><br><span class="line">       <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">           <span class="comment">//6.1.让这个数字与1做与运算，得到数字的最后一个bit位    //判断这个bit位是否为0</span></span><br><span class="line">           <span class="keyword">if</span> ((num&amp;<span class="number">1</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">               <span class="comment">//如果为0，说明未签到，结束</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//如果不为0，说明已签到，计数器+1</span></span><br><span class="line">               count++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//把数字右移一位，抛弃最后一个bit位，继续下一个bit位</span></span><br><span class="line">           num&gt;&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> Result.ok();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h1 id="UV统计"><a href="#UV统计" class="headerlink" title="UV统计"></a>UV统计</h1><h2 id="HyperLogLog的用法"><a href="#HyperLogLog的用法" class="headerlink" title="HyperLogLog的用法"></a>HyperLogLog的用法</h2><p>首先我们搞懂两个概念：</p><ul><li>UV：全称Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1天内同一个用户多次访问该网站，只记录1次。</li><li>PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录1次PV，用户多次打开页面，则记录多次PV。往往用来衡量网站的流量。</li></ul><p>UV统计在服务端做会比较麻烦，因为要判断该用户是否已经统计过了，需要将统计过的用户信息保存。但是如果每个访问的用户都保存到Redis中，数据量会非常恐怖。</p><p>Hyperloglog(HLL)是从Loglog算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。相关算法原理大家可以参考：<a href="https://juejin.cn/post/6844903785744056333#heading-0">https://juejin.cn/post/6844903785744056333#heading-0</a><br>Redis中的HLL是基于string结构实现的，单个HLL的内存永远小于16kb，内存占用低的令人发指！作为代价，其测量结果是概率性的，有小于0.81％的误差。不过对于UV统计来说，这完全可以忽略。</p><p><img src="https://img.picgo.net/2024/04/18/UZIPGNELFL6BO0KQO0QD8b3fcc9f97ee8fde.png"></p><h2 id="测试百万数据的统计"><a href="#测试百万数据的统计" class="headerlink" title="测试百万数据的统计"></a>测试百万数据的统计</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHyperLogLog</span><span class="params">()</span> &#123;</span><br><span class="line">    String[] values=<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        j=i%<span class="number">1000</span>;</span><br><span class="line">        values[j]=<span class="string">&quot;user_&quot;</span>+i;</span><br><span class="line">        <span class="keyword">if</span> (j==<span class="number">999</span>)&#123;</span><br><span class="line">            <span class="comment">//发送到Redis</span></span><br><span class="line">            stringRedisTemplate.opsForHyperLogLog().add(<span class="string">&quot;hl2&quot;</span>,values);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//统计数量</span></span><br><span class="line">    Long count=stringRedisTemplate.opsForHyperLogLog().size(<span class="string">&quot;hl2&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;count=&quot;</span>+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HyperLogLog的作用：</p><ul><li>做海量数据的统计工作<br>HyperLogLog的优点：</li><li>内存占用极低</li><li>性能非常好<br>HyperLogLog的缺点：</li><li>有一定的误差</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;达人探店&quot;&gt;&lt;a href=&quot;#达人探店&quot; class=&quot;headerlink&quot; title=&quot;达人探店&quot;&gt;&lt;/a&gt;达人探店&lt;/h1&gt;&lt;h2 id=&quot;发布探店笔记&quot;&gt;&lt;a href=&quot;#发布探店笔记&quot; class=&quot;headerlink&quot; title=&quot;发布探店笔</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="redis实战项目" scheme="https://wjlgmw-github-io.vercel.app/tags/redis%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>黑马头条-消息队列-redis</title>
    <link href="https://wjlgmw-github-io.vercel.app/posts/e0097467.html"/>
    <id>https://wjlgmw-github-io.vercel.app/posts/e0097467.html</id>
    <published>2024-04-17T00:57:30.000Z</published>
    <updated>2024-05-08T01:31:03.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识消息队列"><a href="#认识消息队列" class="headerlink" title="认识消息队列"></a>认识消息队列</h1><p>消息队列（Message Queue），字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色：<br>1.消息队列：存储和管理消息，也被称为消息代理（Message Broker）<br>2.生产者：发送消息到消息队列<br>3.消费者：从消息队列获取消息并处理消息<br>Redis提供了三种不同的方式来实现消息队列：<br>1.list结构：基于List结构模拟消息队列<br>2.PubSub：基本的点对点消息模型<br>3.Stream：比较完善的消息队列模型</p><p><img src="https://img.picgo.net/2024/04/18/5KZBNITR64F8UX858c13020f1cd8fd.png"></p><h1 id="基于List实现消息队列"><a href="#基于List实现消息队列" class="headerlink" title="基于List实现消息队列"></a>基于List实现消息队列</h1><p>消息队列（Message Queue），字面意思就是存放消息的队列。而Redis的list数据结构是一个双向链表，很容易模拟出队列效果。<br>队列是入口和出口不在一边，因此我们可以利用：LPUSH 结合 RPOP、或者 RPUSH 结合 LPOP来实现。<br>不过要注意的是，当队列中没有消息时RPOP或LPOP操作会返回null，并不像JVM的阻塞队列那样会阻塞并等待消息。因此这里应该使用BRPOP或者BLPOP来实现阻塞效果<br><img src="https://img.picgo.net/2024/04/18/SGS3RM6BNC_VDPQ3ZRI28ff419b261b0722.png"></p><p>基于List的消息队列有哪些优缺点？<br>优点：<br>1.利用Redis存储，不受限于JVM内存上限<br>2.基于Redis的持久化机制，数据安全性有保证<br>3.可以满足消息有序性<br>缺点：<br>1.无法避免消息丢失<br>2.只支持单消费者</p><h1 id="基于PubSub实现消息队列"><a href="#基于PubSub实现消息队列" class="headerlink" title="基于PubSub实现消息队列"></a>基于PubSub实现消息队列</h1><p>PubSub（发布订阅）是Redis2.0版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息。<br>SUBSCRIBE channel [channel] ：订阅一个或多个频道<br>PUBLISH channel msg ：向一个频道发送消息<br>PSUBSCRIBE pattern[pattern] ：订阅与pattern格式匹配的所有频道</p><p><img src="https://img.picgo.net/2024/04/18/MK1MHR6QURODT7SIA1Kfb1d0fef37268080.png"></p><p>基于PubSub的消息队列有哪些优缺点？<br>优点：<br>1.采用发布订阅模型，支持多生产、多消费<br>缺点：<br>1.不支持数据持久化<br>2.无法避免消息丢失<br>3.消息堆积有上限，超出时数据丢失</p><h1 id="Stream的单消费模式"><a href="#Stream的单消费模式" class="headerlink" title="Stream的单消费模式"></a>Stream的单消费模式</h1><p>Stream 是 Redis 5.0 引入的一种新数据类型，可以实现一个功能非常完善的消息队列。</p><p><img src="https://img.picgo.net/2024/04/18/E8I58H0AUQ_KKM33S9e14e5fd47447dc0e.png"></p><p>读消息<br><img src="https://img.picgo.net/2024/04/18/K6I4_YBK3PD3YZNKRN02G8cc8f5ee354e86a8.png"></p><p>阻塞读消息<br><img src="https://img.picgo.net/2024/04/18/HGTJXEKP4MHUIRDW3C9Sb5b404a29a0efe93.png"></p><p>注意<br><img src="https://img.picgo.net/2024/04/18/RH9CG4CWIX_1VM26JW0392292577375e54.png"></p><p>STREAM类型消息队列的XREAD命令特点：<br>1.消息可回溯<br>2.一个消息可以被多个消费者读取<br>3.可以阻塞读取<br>4.有消息漏读的风险</p><h1 id="Stream的消费者组模式"><a href="#Stream的消费者组模式" class="headerlink" title="Stream的消费者组模式"></a>Stream的消费者组模式</h1><p>消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列。具备下列特点<br><img src="https://img.picgo.net/2024/04/18/KM00Q6A1MOQVAFBRJRLT4f9d29d7889d784d.png"></p><p>创建消费者组<br><img src="https://img.picgo.net/2024/04/18/EGKCMI2BJYI1HZ22Mcc545a1c717e4ef3.png"></p><p>从消费者组读取消息<br><img src="https://img.picgo.net/2024/04/18/A2UD3HW6WMT37H_GW025006cf32d1fa5e.png"></p><p>消费者监听消息的基本思路<br><img src="https://img.picgo.net/2024/04/18/5G3Y1YHTFFSTCLP9db99a275c882f976.png"></p><p>STREAM类型消息队列的XREADGROUP命令特点：</p><ul><li>消息可回溯</li><li>可以多消费者争抢消息，加快消费速度</li><li>可以阻塞读取</li><li>没有消息漏读的风险</li><li>有消息确认机制，保证消息至少被消费一次</li></ul><p>三种消息队列比较<br><img src="https://img.picgo.net/2024/04/18/JWCPB8SWO9TAQLH8NN22b027209e3f4d866b.png"></p><h1 id="基于Stream消息队列实现异步秒杀"><a href="#基于Stream消息队列实现异步秒杀" class="headerlink" title="基于Stream消息队列实现异步秒杀"></a>基于Stream消息队列实现异步秒杀</h1><p>需求：<br>1.创建一个Stream类型的消息队列，名为stream.orders<br>2.修改之前的秒杀下单Lua脚本，在认定有抢购资格后，直接向stream.orders中添加消息，内容包含voucherId、userId、orderId<br>3.项目启动时，开启一个线程任务，尝试获取stream.orders中的消息，完成下单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XGROUP CREATE stream.orders g1 0 MKSTREAM</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--1.参数列表</span></span><br><span class="line"><span class="comment">--1.1.优惠劵id</span></span><br><span class="line"><span class="keyword">local</span> voucherId=ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="comment">--1.2.用户id</span></span><br><span class="line"><span class="keyword">local</span> userId=ARGV[<span class="number">2</span>]</span><br><span class="line"><span class="comment">--1.3. 订单id</span></span><br><span class="line"><span class="keyword">local</span> orderId=ARGV[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">--2.数据key</span></span><br><span class="line"><span class="comment">--2.1.库存key</span></span><br><span class="line"><span class="keyword">local</span> stockKey=<span class="string">&#x27;seckill:stock:&#x27;</span> .. voucherId</span><br><span class="line"><span class="comment">--2.2.订单key</span></span><br><span class="line"><span class="keyword">local</span> orderKey=<span class="string">&#x27;seckill:order:&#x27;</span> .. voucherId</span><br><span class="line"></span><br><span class="line"><span class="comment">--3.脚本业务</span></span><br><span class="line"><span class="comment">--3.1.判断库存是否充足 get stockKey</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">--3.2.库存不足,返回1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--3.2.判断用户是否下单 SISMEMBER orderKey userId</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">--3.3.存在，说明是重复下单，返回2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--3.4.扣库存 incrby stockKey -1</span></span><br><span class="line">redis.call(<span class="string">&#x27;incrby&#x27;</span>,stockKey,<span class="number">-1</span>)</span><br><span class="line"><span class="comment">--3.5.下单（保存用户）sadd orderKey userId</span></span><br><span class="line">redis.call(<span class="string">&#x27;sadd&#x27;</span>,orderKey,userId)</span><br><span class="line"><span class="comment">--3.6.发送消息到队列中，XADD stream.orders * k1 v1 k2 v2</span></span><br><span class="line">redis.call(<span class="string">&#x27;xadd&#x27;</span>,<span class="string">&#x27;stream.orders&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;userId&#x27;</span>,userId,<span class="string">&#x27;voucherId&#x27;</span>,voucherId,<span class="string">&#x27;id&#x27;</span>,orderId)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>修改地方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">       String queueName=<span class="string">&quot;stream.orders&quot;</span>;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">//1.获取消息队列中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS stream.order&gt;</span></span><br><span class="line">                   List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                           Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                           StreamReadOptions.empty().count(<span class="number">1</span>).block(Duration.ofSeconds(<span class="number">2</span>)),</span><br><span class="line">                           StreamOffset.create(queueName, ReadOffset.lastConsumed())</span><br><span class="line">                   );</span><br><span class="line">                   <span class="comment">//2.判断消息获取是否成功</span></span><br><span class="line">                   <span class="keyword">if</span> (list==<span class="literal">null</span>||list.isEmpty())&#123;</span><br><span class="line">                       <span class="comment">//2.1.如果获取失败，说明没有消息，继续下一次循环</span></span><br><span class="line">                       <span class="keyword">continue</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//3.解析消息中的订单信息</span></span><br><span class="line">                   MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                   Map&lt;Object, Object&gt; values = record.getValue();</span><br><span class="line">                   <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(), <span class="literal">true</span>);</span><br><span class="line">                   <span class="comment">//4.如果获取成功，可以下单</span></span><br><span class="line">                   handleVoucherOrder(voucherOrder);</span><br><span class="line">                   <span class="comment">//5.ACK确认 SACK stream.orders g1 id</span></span><br><span class="line">                   stringRedisTemplate.opsForStream().acknowledge(queueName,<span class="string">&quot;g1&quot;</span>,record.getId());</span><br><span class="line">                   handleVoucherOrder(voucherOrder);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                   log.error(<span class="string">&quot;处理订单异常&quot;</span>,e);</span><br><span class="line">                   handlePendingList();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handlePendingList</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">//1.获取pending-list中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS stream.order 0</span></span><br><span class="line">                   List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                           Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                           StreamReadOptions.empty().count(<span class="number">1</span>),</span><br><span class="line">                           StreamOffset.create(queueName, ReadOffset.from(<span class="string">&quot;0&quot;</span>))</span><br><span class="line">                   );</span><br><span class="line">                   <span class="comment">//2.判断消息获取是否成功</span></span><br><span class="line">                   <span class="keyword">if</span> (list==<span class="literal">null</span>||list.isEmpty())&#123;</span><br><span class="line">                       <span class="comment">//2.1.如果获取失败，说明pending-list没有消息，继续下一次循环</span></span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//3.解析消息中的订单信息</span></span><br><span class="line">                   MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                   Map&lt;Object, Object&gt; values = record.getValue();</span><br><span class="line">                   <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(), <span class="literal">true</span>);</span><br><span class="line">                   <span class="comment">//4.如果获取成功，可以下单</span></span><br><span class="line">                   handleVoucherOrder(voucherOrder);</span><br><span class="line">                   <span class="comment">//5.ACK确认 SACK stream.orders g1 id</span></span><br><span class="line">                   stringRedisTemplate.opsForStream().acknowledge(queueName,<span class="string">&quot;g1&quot;</span>,record.getId());</span><br><span class="line">                   handleVoucherOrder(voucherOrder);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                   log.error(<span class="string">&quot;处理pending-list异常&quot;</span>,e);</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">       <span class="comment">//获取用户</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">       <span class="comment">//获取订单id</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">       <span class="comment">//1.执行lua脚本</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">               SECKILL_SCRIPT,</span><br><span class="line">               Collections.emptyList(),</span><br><span class="line">               voucherId.toString(), userId.toString(),String.valueOf(orderId)</span><br><span class="line">       );</span><br><span class="line">       <span class="comment">//2.判断结果是否为0</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> result.intValue();</span><br><span class="line">       <span class="keyword">if</span> (r!=<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="comment">//2.1.不为0，代表没有购买资格</span></span><br><span class="line">           <span class="keyword">return</span> Result.fail(r==<span class="number">1</span>?<span class="string">&quot;库存不足&quot;</span>:<span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//3.获取代理对象</span></span><br><span class="line">       proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">       <span class="comment">//4.返回订单id</span></span><br><span class="line">       <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;认识消息队列&quot;&gt;&lt;a href=&quot;#认识消息队列&quot; class=&quot;headerlink&quot; title=&quot;认识消息队列&quot;&gt;&lt;/a&gt;认识消息队列&lt;/h1&gt;&lt;p&gt;消息队列（Message Queue），字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色：&lt;br</summary>
      
    
    
    
    <category term="项目" scheme="https://wjlgmw-github-io.vercel.app/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="redis实战项目" scheme="https://wjlgmw-github-io.vercel.app/tags/redis%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
</feed>
